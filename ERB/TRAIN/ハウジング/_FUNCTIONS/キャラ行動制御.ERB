;-------------------------------------------------
;キャラクターの行動制御(モジュールの使用や視界の判定など)
;
;-------------------------------------------------
;キャラクターがモジュールの使用を試みる
;-------------------------------------------------
@HO_TRY_USE_MODULE(CHARA_ID, USAGE)
#DIM CHARA_ID
#DIMS USAGE
#DIM DYNAMIC CHARA_IDX
#DIMS DYNAMIC _LIST_MODULE
#DIMS DYNAMIC _LIST_OPTIONS
#DIM DYNAMIC MODULE_IDX
#DIM DYNAMIC MODULE_ID
#DIM DYNAMIC ROOM_IDX
CALL HO_GET_CHARAIDX(CHARA_ID)
CHARA_IDX = RESULT
CALL HO_GET_CHARADATA(CHARA_IDX, "ROOM_IDX")
ROOM_IDX = RESULT
CALL HO_GET_MAPDATA(HO_有効マップID, ROOM_IDX, "MODULE_LIST")
_LIST_MODULE = %RESULTS% 

;用途に合致しているモジュールの一覧を作成
FOR MODULE_IDX, 0, LIST_COUNT(_LIST_MODULE)
    MODULE_ID = TOINT(LIST_GET(_LIST_MODULE, MODULE_IDX))
    CALL HO_GET_MODULE_DATA(MODULE_ID, "用途")
    IF LIST_INDEXOF(RESULTS, USAGE) != -1
        _LIST_OPTIONS = %LIST_ADD(_LIST_OPTIONS, TOSTR(MODULE_IDX))%
    ENDIF
NEXT

;クルーがクルー私室の使用を試みた場合、自身の部屋だけを使うように
IF LIST_COUNT(_LIST_OPTIONS) > 0
    CALL HO_CHECK_ROOM_TAG(ROOM_IDX, "クルー私室")
    IF RESULT
        _LIST_OPTIONS '= "" 
        _LIST_OPTIONS = %LIST_ADD(_LIST_OPTIONS, TOSTR(CHARA_IDX))% 
    ENDIF
ENDIF 
FOR LOCAL, 0, LIST_COUNT(_LIST_OPTIONS)
    MODULE_IDX = TOINT(LIST_GET(_LIST_OPTIONS, LOCAL))
    ;満員のモジュールは使えない
    CALL HO_CHECK_MODULE_CAPACITY(ROOM_IDX, MODULE_IDX)
    SIF RESULT == 0
        CONTINUE
    ;;施錠されているモジュールは使えないが、同行中なら判定をバイパス
    ;同行中は常にMASTERを追随している前提
    CALL HO_GET_CHARADATA(CHARA_IDX, "ACTION")
    IF RESULTS != "同行中"
        CALL HO_IS_MODULE_LOCKED(ROOM_IDX, MODULE_IDX)
        IF RESULT == 1
            CONTINUE
        ENDIF
    ENDIF
    ;チェック結果に問題がなければモジュールを使用状態にする
    CALL HO_USE_MODULE(CHARA_ID, ROOM_IDX, MODULE_IDX)
    RETURN 1
NEXT
RETURN -1

;モジュールの空きを調べる
@HO_CHECK_MODULE_CAPACITY(ROOM_IDX, MODULE_IDX)
#DIM ROOM_IDX
#DIM MODULE_IDX
#DIM MODULE_ID
#DIM DYNAMIC USER_COUNT
#DIM DYNAMIC CAPACITY

CALL HO_GET_MODULE_ID(ROOM_IDX, MODULE_IDX)
MODULE_ID = RESULT
SIF RESULT == -1
    RETURN

IF HO_MASTER現在地 == ROOM_IDX
    CALL HO_GET_MASTER_DATA("MODULE_USAGE")
    SIF MODULE_IDX == RESULT
        USER_COUNT ++
ENDIF 
LOCAL:1 = 0
WHILE _DIC_HO_CHARALIST:(LOCAL:1) != "-1"
    CALL HO_GET_CHARADATA(LOCAL:1, "ROOM_IDX")
    IF RESULT != ROOM_IDX
        LOCAL:1 ++
        CONTINUE
    ENDIF
    CALL HO_GET_CHARADATA(LOCAL:1, "MODULE_USAGE")
    IF MODULE_IDX == RESULT
        USER_COUNT ++
    ENDIF
    LOCAL:1 ++
WEND
CALL HO_GET_MODULE_DATA(MODULE_ID, "人数")
CAPACITY = RESULT - USER_COUNT
RETURN CAPACITY


;キャラデータにモジュールの使用状態を登録
@HO_USE_MODULE(CHARA_ID, ROOM_IDX, MODULE_IDX)
#DIM CHARA_IDX
#DIM ROOM_IDX
#DIM MODULE_IDX
#DIM DYNAMIC CHARA_ID
#DIMS DYNAMIC ACTION

CALL HO_GET_CHARAIDX(CHARA_ID)
CHARA_IDX = RESULT
CALL HO_SET_CHARADATA(CHARA_IDX, "MODULE_USAGE", TOSTR(MODULE_IDX))
;自動施錠指定のモジュールは使用時に施錠
CALL HO_CHECK_MODULE_ELEMENT(ROOM_IDX, MODULE_IDX, "自動施錠")
IF RESULT
    CALL HO_LOCK_ROOM_MODULE(CHARA_ID, ROOM_IDX, MODULE_IDX, 1)
ENDIF

;マスターが対象のモジュールを既に使っている場合は相席モード
CALL HO_GET_CHARAACT(CHARA_ID)
ACTION = %RESULTS%
CALL HO_GET_MASTER_DATA("MODULE_USAGE")
IF HO_MASTER現在地 == ROOM_IDX && RESULT == MODULE_IDX && ACTION != "同行中"
    TCVAR:CHARA_ID:相席フラグ = 1
    CALL COLOR_PRINTL(@"%ANAME(CHARA_ID)%が%ANAME(MASTER)%のそばにやってきた", カラー_黄緑)
    CALL HO_ADD_COMPANION(CHARA_ID, 1)
ENDIF 

;モジュールの利用停止
@HO_STOP_USE_MODULE(CHARA_ID)
#DIM CHARA_ID
#DIM DYNAMIC CHARA_IDX
#DIM DYNAMIC ROOM_IDX
#DIM DYNAMIC MODULE_IDX

CALL HO_GET_CHARAIDX(CHARA_ID)
CHARA_IDX = RESULT
CALL HO_GET_CHARADATA(CHARA_IDX, "ROOM_IDX")
ROOM_IDX = RESULT
CALL HO_GET_CHARADATA(CHARA_IDX, "MODULE_USAGE")
MODULE_IDX = RESULT 
;使用していたモジュールを解放
CALL HO_LOCK_ROOM_MODULE(CHARA_ID, ROOM_IDX, MODULE_IDX, 0)
;キャラデータのモジュール使用状況を更新
CALL HO_SET_CHARADATA(CHARA_IDX, "MODULE_USAGE", "-1")
;相席モードの場合コンパニオンから離脱
IF TCVAR:CHARA_ID:相席フラグ == 1
    CALL HO_REMOVE_COMPANION(CHARA_ID)
    CALL COLOR_PRINTW(@"%ANAME(CHARA_ID, RESULT)%は%ANAME(MASTER)%に別れを告げて立ち去った", カラー_黄緑)
    TCVAR:CHARA_ID:相席フラグ = 0
ENDIF

;引数に指定した用途に合致し使用可能なモジュールをリストで返す
@HO_GET_USABLE_MODULE(USAGE, ROOM_IDX, USER_NUM = 1)
#DIMS USAGE
#DIM ROOM_IDX
#DIM USER_NUM
#DIMS DYNAMIC _LIST_MODULE
#DIMS DYNAMIC _LIST_OPTIONS
#DIM DYNAMIC MODULE_IDX
#DIM DYNAMIC MODULE_ID

VARSET RESULTS
CALL HO_GET_MAPDATA(HO_有効マップID, ROOM_IDX, "MODULE_LIST")
_LIST_MODULE = %RESULTS% 

;用途に合致しているモジュールの一覧を作成
FOR MODULE_IDX, 0, LIST_COUNT(_LIST_MODULE)
    MODULE_ID = TOINT(LIST_GET(_LIST_MODULE, MODULE_IDX))
    CALL HO_GET_MODULE_DATA(MODULE_ID, "用途")
    IF LIST_INDEXOF(RESULTS, USAGE) != -1
        CALL HO_CHECK_MODULE_CAPACITY(ROOM_IDX, MODULE_IDX)
        SIF USER_NUM <= RESULT
            _LIST_OPTIONS = %LIST_ADD(_LIST_OPTIONS, TOSTR(MODULE_IDX))%
    ENDIF
NEXT
IF LIST_COUNT(_LIST_OPTIONS) != 0
    RESULTS = %_LIST_OPTIONS%
    RETURN LIST_COUNT(_LIST_OPTIONS)
ELSE
    RETURN 0
ENDIF
;-------------------------------------------------
;ルームモジュールを施錠
;LOCK = 1:ロック, LOCK = 0:アンロック
;施錠済みのモジュールを再度施錠したり、解錠済みのモジュールを再度解錠しても問題はない
;-------------------------------------------------
@HO_LOCK_ROOM_MODULE(CHARA_ID, ROOM_IDX, MODULE_IDX, LOCK = 1, MAP_ID = -1)
#DIM  CHARA_ID
#DIM  ROOM_IDX
#DIM  MODULE_IDX
#DIM  LOCK
#DIM  MAP_ID
#DIM  DYNAMIC MODULE_ID
#DIMS DYNAMIC _LIST_LOCKED_MODULE

SIF MAP_ID == -1
    MAP_ID = HO_有効マップID

VARSET RESULTS
IF LOCK == 1 
    ;施錠権限がない場合施錠できない
    CALL HO_CHECK_MODULE_OWNER(ROOM_IDX, MODULE_IDX)
    SIF CHARA_ID != RESULT && RESULT != -1
        RETURN
    CALL HO_GET_MAPDATA(MAP_ID, ROOM_IDX, "LOCKED_MODULE")
    _LIST_LOCKED_MODULE = %RESULTS%
    IF RESULT == -1 ;対象ROOM_IDXに施錠リストが存在しない
        _LIST_LOCKED_MODULE = %LIST_ADD(_LIST_LOCKED_MODULE, TOSTR(MODULE_IDX))%
        CALL HO_SET_MAPDATA(ROOM_IDX, "LOCKED_MODULE", _LIST_LOCKED_MODULE)
    ELSE
        ;対象ROOM_IDXに施錠リストがあるが、対象MODULE_IDXは施錠リストに登録されていない
        IF LIST_INDEXOF(_LIST_LOCKED_MODULE, TOSTR(MODULE_IDX)) == -1
            _LIST_LOCKED_MODULE = %LIST_ADD(_LIST_LOCKED_MODULE, TOSTR(MODULE_IDX))%
            CALL HO_SET_MAPDATA(ROOM_IDX, "LOCKED_MODULE", _LIST_LOCKED_MODULE)
        ENDIF
    ENDIF
ELSE ;アンロック処理
    CALL HO_GET_MAPDATA(MAP_ID, ROOM_IDX, "LOCKED_MODULE")
    _LIST_LOCKED_MODULE = %RESULTS%
    SIF RESULT == -1
        RETURN
    IF LIST_INDEXOF(_LIST_LOCKED_MODULE, TOSTR(MODULE_IDX)) != -1
        _LIST_LOCKED_MODULE = %LIST_REMOVEAT(_LIST_LOCKED_MODULE, LIST_INDEXOF(_LIST_LOCKED_MODULE, TOSTR(MODULE_IDX)))%
        CALL HO_SET_MAPDATA(ROOM_IDX, "LOCKED_MODULE", _LIST_LOCKED_MODULE)
    ENDIF
ENDIF

;ルームモジュールの施錠判定
@HO_IS_MODULE_LOCKED(ROOM_IDX, MODULE_IDX, MAP_ID = -1)
#DIM  ROOM_IDX
#DIM  MODULE_IDX
#DIM  MAP_ID
#DIMS DYNAMIC _LIST_LOCKED_MODULE

SIF MAP_ID == -1
    MAP_ID = HO_有効マップID
VARSET RESULTS
CALL HO_GET_MAPDATA(MAP_ID, ROOM_IDX, "LOCKED_MODULE")
_LIST_LOCKED_MODULE = %RESULTS%
IF LIST_INDEXOF(_LIST_LOCKED_MODULE, TOSTR(MODULE_IDX)) != -1
    RETURN 1
ELSE
    RETURN 0
ENDIF

;-------------------------------------------------
;;MPLYからMTARは視認可能か？
; MPLY_ID 主体のCHARA_ID
; MTAR_ID ターゲットのCHARA_ID
; RETURN 1 = 視認可,RETURN = 0 視認可
;-------------------------------------------------
@HO_IS_TARGET_VISIBLE(MPLY_ID, MTAR_ID)
#DIM MTAR_ID
#DIM MPLY_ID
#DIM DYNAMIC MTAR_IDX
#DIM DYNAMIC MPLY_IDX
#DIM DYNAMIC MTAR_ROOM_IDX
#DIM DYNAMIC MPLY_ROOM_IDX
#DIM DYNAMIC MTAR_MODULE_IDX
#DIM DYNAMIC MPLY_MODULE_IDX
#DIM DYNAMIC MTAR_MODULE_ID
#DIM DYNAMIC MPLY_MODULE_ID

;MPLYの設定
IF MPLY_ID == MASTER
    MPLY_ROOM_IDX = HO_MASTER現在地
    CALL HO_GET_MASTER_DATA("MODULE_USAGE")
    MPLY_MODULE_IDX = RESULT
ELSE
    CALL HO_GET_CHARAIDX(MPLY_ID)
    MPLY_IDX = RESULT
    CALL HO_GET_CHARADATA(MPLY_IDX, "ROOM_IDX")
    MPLY_ROOM_IDX = RESULT
    CALL HO_GET_CHARADATA(MPLY_IDX, "MODULE_USAGE")
    MPLY_MODULE_IDX = RESULT
ENDIF

;MTARの設定
IF MTAR_ID == MASTER
    MTAR_ROOM_IDX = HO_MASTER現在地
    CALL HO_GET_MASTER_DATA("MODULE_USAGE")
    MTAR_MODULE_IDX = RESULT
ELSE
    CALL HO_GET_CHARAIDX(MTAR_ID)
    MTAR_IDX = RESULT
    CALL HO_GET_CHARADATA(MTAR_IDX, "ROOM_IDX")
    MTAR_ROOM_IDX = RESULT
    CALL HO_GET_CHARADATA(MTAR_IDX, "MODULE_USAGE")
    MTAR_MODULE_IDX = RESULT
ENDIF
;MTARとMPLYが同じ部屋にいない
SIF MPLY_ROOM_IDX != MTAR_ROOM_IDX
    RETURN 0
;MTARとMPLYがどちらもモジュールを使用しておらず、同じ部屋にいる
SIF MTAR_MODULE_IDX == -1 && MPLY_MODULE_IDX == -1 && MPLY_ROOM_IDX == MTAR_ROOM_IDX
    RETURN 1
RESULT = 0
SIF MTAR_MODULE_IDX != -1
    CALL HO_CHECK_MODULE_ELEMENT(MTAR_ROOM_IDX, MTAR_MODULE_IDX, "遮蔽")
;MTARがモジュールを使用しており、かつ遮蔽されている
IF RESULT == 1
    ;;MTARが遮蔽されている
    ;MPLY,MTARが同じルームのモジュールを使っているなら見えていると判断
    IF MPLY_ROOM_IDX == MTAR_ROOM_IDX && MPLY_MODULE_IDX == MTAR_MODULE_IDX
        RETURN 1
    ELSE
        RETURN 0
    ENDIF
;MTARが遮蔽されていない
ELSE
    ;MPLYがモジュールを使っておらず同じ部屋にいるならば見えていると判断
    SIF MPLY_MODULE_IDX == -1 && MPLY_ROOM_IDX == MTAR_ROOM_IDX
        RETURN 1 
    ;MPLYが遮蔽されているなら見えていないと判断
    CALL HO_CHECK_MODULE_ELEMENT(MPLY_ROOM_IDX, MPLY_MODULE_IDX, "遮蔽")
    IF RESULT == 1
        RETURN 0
    ELSE
        ;MTAR,MPLYともに遮蔽されていない
        RETURN 1
    ENDIF
ENDIF

RETURN 0

;-------------------------------------------------
;;モジュールのオーナーを調べる
; 現状ではクルーの私室が誰のものかを判別する以外の用途がない
; 個別のモジュールに持ち主を指定する場合、拡張する必要がでてくるかも
; RETURN CHARA_ID(OWNER指定なし = -1)
;-------------------------------------------------
@HO_CHECK_MODULE_OWNER(ROOM_IDX, MODULE_IDX, MAP_ID = -1)
#DIM ROOM_IDX
#DIM MODULE_IDX
#DIM MAP_ID
#DIM DYNAMIC MODULE_ID
#DIM DYNAMIC CHARA_IDX

SIF MAP_ID == -1
    MAP_ID = HO_有効マップID

CALL HO_GET_MODULE_ID(ROOM_IDX, MODULE_IDX, MAP_ID)
MODULE_ID = RESULT
IF MODULE_ID == HO_CREW_PRIVATE_ROOM_ID
    CHARA_IDX = MODULE_IDX
    CALL HO_GET_CHARADATA(CHARA_IDX, "CHARA_ID")
    RETURN RESULT
ENDIF

RETURN -1


;-------------------------------------------------
;プレイヤーのモジュール使用に関する処理
;-------------------------------------------------
;;使用
@HO_MASTER_USE_MODULE(ROOM_IDX, MODULE_IDX)
#DIM ROOM_IDX
#DIM MODULE_IDX
#DIM DYNAMIC MODULE_ID
#DIM DYNAMIC MODULE_CAPACITY
#DIM DYNAMIC CHARA_ID
#DIM DYNAMIC NUM_COMPANION
#DIMS DYNAMIC _LIST_COMPANION
#DIMS DYNAMIC _LIST_ADD_MEMBER
#DIM DYNAMIC ADD_MEMBER_NUM

CALL HO_GET_MODULE_ID(ROOM_IDX, MODULE_IDX)
MODULE_ID = RESULT
CALL HO_GET_FOLLOWER_LIST
NUM_COMPANION = RESULT
_LIST_COMPANION = %RESULTS%

;既にこのモジュールを使っている
CALL HO_GET_MASTER_DATA("MODULE_USAGE")
IF RESULT == MODULE_IDX
    CALL HO_MASTER_STOP_USE_MODULE(ROOM_IDX, MODULE_IDX)
    RETURN
ENDIF
;モジュールに空きはあるか
CALL HO_CHECK_MODULE_CAPACITY(ROOM_IDX, MODULE_IDX)
MODULE_CAPACITY = RESULT
IF MODULE_CAPACITY == 0
    CALL COLOR_PRINTW("このモジュールは満員のようだ", カラー_注意) 
    CLEARLINE 1
    RETURN
ENDIF

IF MODULE_CAPACITY < NUM_COMPANION + 1
    CALL COLOR_PRINTW(@"このモジュールを使うには同行者の数が多すぎるようだ(空席:{MODULE_CAPACITY})", カラー_注意) 
    CLEARLINE 1
    RETURN
ENDIF
;モジュールの施錠確認
CALL HO_IS_MODULE_LOCKED(ROOM_IDX, MODULE_IDX)
IF RESULT == 1
    CALL COLOR_PRINTW("このモジュールは鍵が掛かっているようだ", カラー_注意) 
    CLEARLINE 1
    RETURN
ENDIF

;;モジュールが使用可能な場合

;コマンド継続状況を解除
CALL INIT_EQUIP

;既に別のモジュールを使用中だった場合は使用を中止
CALL HO_GET_MASTER_DATA("MODULE_USAGE")
IF RESULT != -1
    CALL HO_MASTER_STOP_USE_MODULE()
ENDIF

;相席者を交流対象に加える
CALL HO_GET_MODULE_USE_MEMBER(ROOM_IDX, MODULE_IDX)
_LIST_ADD_MEMBER = %RESULTS%
ADD_MEMBER_NUM = RESULT
FOR LOCAL, 0, ADD_MEMBER_NUM
    CHARA_ID = TOINT(LIST_GET(_LIST_ADD_MEMBER, LOCAL))
    SIF LOCAL == 0
        CALL COLOR_PRINTW(@"%ANAME(CHARA_ID, ADD_MEMBER_NUM)%と一緒になった", カラー_黄緑)
    TCVAR:CHARA_ID:相席フラグ = 1
    CALL HO_ADD_COMPANION(CHARA_ID, 1)
NEXT

;同行者にも使用させる
CALL HO_GET_COMPANION_LIST()
NUM_COMPANION = RESULT
_LIST_COMPANION = %RESULTS%
FOR LOCAL:0, 0, NUM_COMPANION
    CALL HO_USE_MODULE(TOINT(LIST_GET(_LIST_COMPANION, LOCAL:0)), ROOM_IDX, MODULE_IDX)
NEXT

;自動施錠指定のモジュールは使用時に施錠
CALL HO_CHECK_MODULE_ELEMENT(ROOM_IDX, MODULE_IDX, "自動施錠")
IF RESULT
    CALL HO_LOCK_ROOM_MODULE(MASTER, ROOM_IDX, MODULE_IDX)
ENDIF

;MASTERのモジュール使用状態を更新する
CALL HO_CHECK_MODULE_OWNER(ROOM_IDX, MODULE_IDX)
IF RESULT == -1
    TRYCALLFORM HO_ROOM_MODULE_USE_MESSAGE_{MODULE_ID}(MASTER)
ELSE
    TRYCALLFORM HO_ROOM_MODULE_USE_MESSAGE_{MODULE_ID}(MASTER, 0, RESULT)
ENDIF
PRINTFORMW %RESULTS%
CALL HO_SET_MASTER_DATA("MODULE_USAGE", TOSTR(MODULE_IDX))


;;モジュールの使用を止める
@HO_MASTER_STOP_USE_MODULE(ROOM_IDX = -1, MODULE_IDX = -1)
#DIM ROOM_IDX
#DIM MODULE_IDX
#DIM DYNAMIC CHARA_ID
#DIM DYNAMIC MODULE_ID
#DIM DYNAMIC NUM_COMPANION
#DIMS DYNAMIC _LIST_COMPANION
#DIMS DYNAMIC _LIST_REMOVE_MEMBER
#DIM DYNAMIC REMOVE_MEMBER_NUM
SIF ROOM_IDX == -1
    ROOM_IDX = HO_MASTER現在地
IF MODULE_IDX == -1
    CALL HO_GET_MASTER_DATA("MODULE_USAGE")
    MODULE_IDX = RESULT
ENDIF

;コマンド継続状況を解除
CALL INIT_EQUIP

IF RESULT != -1
    ;施錠している場合は解錠
    CALL HO_IS_MODULE_LOCKED(ROOM_IDX, MODULE_IDX)
    SIF RESULT
        CALL HO_LOCK_ROOM_MODULE(MASTER, ROOM_IDX, MODULE_IDX, 0)
    ;MODULE_IDに設定されている使用中止メッセージを出力
    CALL HO_GET_MODULE_ID(HO_MASTER現在地, RESULT)
    MODULE_ID = RESULT
    CALL HO_CHECK_MODULE_OWNER(ROOM_IDX, MODULE_IDX)
    IF RESULT == -1
        TRYCALLFORM HO_ROOM_MODULE_USE_MESSAGE_{MODULE_ID}(MASTER, 1)
    ELSE
        TRYCALLFORM HO_ROOM_MODULE_USE_MESSAGE_{MODULE_ID}(MASTER, 1, RESULT)
    ENDIF
    PRINTFORMW %RESULTS%
ENDIF

;相席者を交流対象から除外する
CALL HO_GET_MODULE_USE_MEMBER(ROOM_IDX, MODULE_IDX)
_LIST_REMOVE_MEMBER = %RESULTS%
REMOVE_MEMBER_NUM = RESULT
FOR LOCAL, 0, REMOVE_MEMBER_NUM
    CHARA_ID = TOINT(LIST_GET(_LIST_REMOVE_MEMBER, LOCAL))
    IF TCVAR:CHARA_ID:相席フラグ == 1
        CALL COLOR_PRINTW(@"%ANAME(CHARA_ID)%と別れた", カラー_黄緑)
        CALL HO_REMOVE_COMPANION(CHARA_ID)
        TCVAR:CHARA_ID:相席フラグ = 0
    ENDIF
NEXT
;コンパニオンリストを更新
CALL HO_GET_COMPANION_LIST
NUM_COMPANION = RESULT
_LIST_COMPANION = %RESULTS%

;MASTERのモジュール使用状態を未使用に
CALL HO_SET_MASTER_DATA("MODULE_USAGE", "-1")
;同行者の使用状態も解除
FOR LOCAL:0, 0, NUM_COMPANION
    CALL HO_STOP_USE_MODULE(TOINT(LIST_GET(_LIST_COMPANION, LOCAL:0)))
NEXT

;行動不能状態になったマスターを強制的に私室に移動させる
@HO_FORCE_MASTER_REST
#DIM DYNAMIC NUM_COMPANION
#DIMS DYNAMIC _LIST_COMPANION
#DIM DYNAMIC OPTION_NUM
#DIMS DYNAMIC _LIST_OPTIONS

CALL HO_MASTER_STOP_USE_MODULE
CALL HO_GET_COMPANION_LIST
NUM_COMPANION = RESULT
_LIST_COMPANION = %RESULTS%
FOR LOCAL:0, 0, NUM_COMPANION
    CALL HO_REMOVE_COMPANION(TOINT(LIST_GET(_LIST_COMPANION, LOCAL:0)))
NEXT
CALL HO_FIND_ROOM_BY_TAG("プレイヤー私室")
CALL HO_MOVE_MASTER(RESULT, 1)
CALL HO_GET_USABLE_MODULE("仮眠", HO_MASTER現在地)
OPTION_NUM = RESULT
_LIST_OPTIONS = %RESULTS%
IF OPTION_NUM != 0
    CALL HO_MASTER_USE_MODULE(HO_MASTER現在地, TOINT(LIST_GET(_LIST_OPTIONS, RAND(0, OPTION_NUM))))
    CALL COLOR_PRINTW(@"疲れ切った%ANAME(MASTER)%は私室で横になり仮眠をとることにした", カラー_注意)
    TCVAR:MASTER:51 = 0
    TCVAR:MASTER:52 = 0
    BASE:(MASTER):体力 = LIMIT(BASE:(MASTER):体力 + 1200, BASE:(MASTER):体力, MAXBASE:(MASTER):体力)
    BASE:(MASTER):気力 = LIMIT(BASE:(MASTER):気力 + 900, BASE:(MASTER):気力, MAXBASE:(MASTER):気力)
ELSE
    CALL COLOR_PRINTW(@"疲れ切った%ANAME(MASTER)%は私室に戻り休憩することにした。……が、部屋に寝具が無いためあまりきちんと休めなかった", カラー_注意)
    TCVAR:MASTER:51 = 0
    TCVAR:MASTER:52 = 0
    BASE:(MASTER):体力 = LIMIT(BASE:(MASTER):体力 + 600, BASE:(MASTER):体力, MAXBASE:(MASTER):体力)
    BASE:(MASTER):気力 = LIMIT(BASE:(MASTER):気力 + 450, BASE:(MASTER):気力, MAXBASE:(MASTER):気力)
ENDIF

;-------------------------------------------------
; 条件を満たすメンバーをマスターが使用しているモジュールに招待する
;-------------------------------------------------
@HO_MASTER_TRY_INVITE(CHARA_ID)
#DIM CHARA_ID
#DIM ROOM_IDX
#DIM MODULE_IDX

ROOM_IDX = HO_MASTER現在地
CALL HO_GET_MASTER_DATA("MODULE_USAGE")
MODULE_IDX = RESULT
SIF MODULE_IDX == -1
    RETURN 0
;モジュールに空きがあるかチェック
CALL HO_CHECK_MODULE_CAPACITY(ROOM_IDX, MODULE_IDX)
IF RESULT == 0
    CALL COLOR_PRINTW(@"%ANAME(CHARA_ID)%を同じ席に誘おうとしたが、モジュールに空きがない", カラー_注意)
    RETURN 0
ENDIF
;キャラが正体可能な行動状態かチェック。とりあえず待機ならOK
CALL HO_GET_CHARAACT(CHARA_ID)
IF !GROUPMATCH(RESULTS, "待機", "休憩中")                                                                                           
    CALL COLOR_PRINTW(@"%ANAME(CHARA_ID)%を同じ席に誘おうとしたが、取込中のようだ", カラー_注意)
    RETURN 0
ENDIF
;CHARA_IDをコンパニオンに加える
CALL HO_ADD_COMPANION(CHARA_ID)
;コンパニオン追加条件を満たしていなかった
SIF RESULT == 0
    RETURN 1
;MASTERと同じモジュールを使わせる
CALL HO_USE_MODULE(CHARA_ID, ROOM_IDX, MODULE_IDX)
RETURN 1

;-------------------------------------------------
; キャラのステータスを取得・変更する関数
;-------------------------------------------------
@HO_CHECK_CUM_AMOUNT(CHARA_ID)
#DIM CHARA_ID
#DIM DYNAMIC CUM_AMOUNT
#FUNCTION
FOR LOCAL,0, CUM_SLOT_NUM
    SIF LOCAL:0 == 射精部位_口
        CONTINUE
    CUM_AMOUNT += CUM_GET_AMOUNT:CHARA_ID:(LOCAL:0)
NEXT
RETURNF CUM_AMOUNT

@HO_WASH(CHARA_ID)
#DIM CHARA_ID
#DIM DYNAMIC CUM_AMOUNT
FOR LOCAL,0, CUM_SLOT_NUM
    CUM_GET_AMOUNT:CHARA_ID:(LOCAL:0) = 0
NEXT

;特定のアクションをしているメンバーをリスト形式で返却
@HO_CHECK_PLAY_WITH(ACTION)
#DIMS ACTION
#DIMS DYNAMIC _LIST_MEMBER
#DIM DYNAMIC MEMBER_NUM
#DIMS DYNAMIC _LIST_PLAY_WITH
#DIM DYNAMIC CHARA_ID
LOCAL:1 = 0
VARSET RESULTS
CALL HO_GET_COMPANION_LIST
SIF RESULT == 0
    RETURN 0
MEMBER_NUM = RESULT
_LIST_MEMBER = %RESULTS%
FOR LOCAL, 0, MEMBER_NUM
    CHARA_ID = TOINT(LIST_GET(_LIST_MEMBER, LOCAL))
    IF TCVAR:CHARA_ID:相席フラグ != 1
        LOCAL:1 ++
        _LIST_PLAY_WITH = %LIST_ADD(_LIST_PLAY_WITH, TOSTR(CHARA_ID))%
    ELSE
        CALL HO_GET_CHARAACT(CHARA_ID)
        IF RESULTS == ACTION
            LOCAL:1 ++
            _LIST_PLAY_WITH = %LIST_ADD(_LIST_PLAY_WITH, TOSTR(CHARA_ID))%
        ENDIF
    ENDIF
NEXT
RESULTS = %_LIST_PLAY_WITH%
RETURN LOCAL:1