;-------------------------------------------------
;マップデータに関する関数
;[ROOM_ID]      ROOM_IDXにセットされている部屋の種類
;[ROOM_PATH]    どの部屋と接続されているか
;[MODULE_LIST]  ROOMに配置されているモジュールの種類
;-------------------------------------------------
@HO_GET_MAPDATA(MAP_ID, ROOM_IDX, DATANAME)
#DIM MAP_ID
#DIM ROOM_IDX
#DIMS DATANAME

VARSET RESULTS
SIF DIC_GET(_DIC_HO_MAPDATA:MAP_ID:ROOM_IDX, DATANAME) == ""
    RETURN -1

ISNUMERIC DIC_GET(_DIC_HO_MAPDATA:MAP_ID:ROOM_IDX, DATANAME)
IF RESULT
    RETURN TOINT(DIC_GET(_DIC_HO_MAPDATA:MAP_ID:ROOM_IDX, DATANAME))
ELSE
    RESULTS = %DIC_GET(_DIC_HO_MAPDATA:MAP_ID:ROOM_IDX, DATANAME)%
    RETURN
ENDIF

@HO_SET_MAPDATA(ROOM_IDX, DATANAME, VALUES, MAP_ID = -1)
#DIM  ROOM_IDX
#DIMS DATANAME
#DIMS VALUES
#DIM  MAP_ID

SIF MAP_ID == -1
    MAP_ID = HO_有効マップID

_DIC_HO_MAPDATA:MAP_ID:ROOM_IDX = %DIC_SET(_DIC_HO_MAPDATA:MAP_ID:ROOM_IDX, DATANAME, VALUES)%
RETURN

;;セーブデータに保存されたマップデータを読み出す
;セーブデータが空なら初期設定マップを読み出す
@HO_LOAD_MAPDATA(MAP_ID)
#DIM MAP_ID

FOR LOCAL, 0, HO_MAX_ROOMNUM
    _DIC_HO_MAPDATA:MAP_ID:LOCAL = %_DIC_HO_SAVED_MAPDATA:MAP_ID:LOCAL%
NEXT
IF _DIC_HO_MAPDATA:MAP_ID:0 == ""
    CALL HO_SET_MAPDATA_DEFAULT(MAP_ID)
ENDIF


@HO_GET_ROOM_DATA(ROOM_ID, DATANAME)
#DIM ROOM_ID
#DIMS DATANAME
#DIMS DYNAMIC _DIC_ROOM_DATA
#DIMS DYNAMIC STR_DATA

TRYCCALLFORM HO_ROOM_DATA_{ROOM_ID}
    _DIC_ROOM_DATA = %RESULTS%
CATCH
    RETURN -1
ENDCATCH

STR_DATA = %DIC_GET(_DIC_ROOM_DATA, DATANAME)%
ISNUMERIC STR_DATA
IF RESULT
    RETURN TOINT(STR_DATA)
ELSE
    RESULTS = %STR_DATA%
    RETURN
ENDIF

;ROOM_IDを取得
@HO_GET_ROOM_ID(ROOM_IDX, MAP_ID = -1)
#DIM ROOM_IDX
#DIM MAP_ID

SIF MAP_ID == -1
    MAP_ID = HO_有効マップID
CALL HO_GET_MAPDATA(MAP_ID, ROOM_IDX, "ROOM_ID")
RETURN RESULT

@HO_GET_ROOM_NAME(ROOM_IDX)
#DIM ROOM_IDX
#DIM MAP_ID

SIF MAP_ID == -1
    MAP_ID = HO_有効マップID
CALL HO_GET_MAPDATA(MAP_ID, ROOM_IDX, "ROOM_ID")
CALL HO_GET_ROOM_DATA(RESULT, "ROOM_NAME")
RETURN

;ROOM_TAGを取得
@HO_GET_ROOM_TAG(ROOM_IDX)
#DIM ROOM_IDX
#DIM MAP_ID

SIF MAP_ID == -1
    MAP_ID = HO_有効マップID
CALL HO_GET_MAPDATA(MAP_ID, ROOM_IDX, "ROOM_ID")
CALL HO_GET_ROOM_DATA(RESULT, "ROOM_TAG")
RETURN

@HO_CHECK_ROOM_TAG(ROOM_IDX, ROOM_TAG)
#DIM ROOM_IDX
#DIM MAP_ID
#DIMS ROOM_TAG
#DIMS _LIST_TAG
CALL HO_GET_MAPDATA(MAP_ID, ROOM_IDX, "ROOM_ID")
CALL HO_GET_ROOM_DATA(RESULT, "ROOM_TAG")
_LIST_TAG = %RESULTS%
IF LIST_INDEXOF(_LIST_TAG, ROOM_TAG) != -1
    RETURN 1
ELSE
    RETURN 0
ENDIF

;ROOM_TAGに該当する部屋をIDXで取得
@HO_FIND_ROOM_BY_TAG(ROOM_TAG, RANDOM = 0, MAP_ID = -1)
#DIMS ROOM_TAG
#DIM MAP_ID
#DIM RANDOM
#DIM  DYNAMIC ROOM_IDX
#DIMS DYNAMIC _LIST_ROOM
SIF MAP_ID == -1
    MAP_ID = HO_有効マップID
WHILE ROOM_IDX < HO_MAX_ROOMNUM
    CALL HO_GET_ROOM_TAG(ROOM_IDX)
    IF LIST_INDEXOF(RESULTS, ROOM_TAG) != -1
        _LIST_ROOM = %LIST_ADD(_LIST_ROOM, TOSTR(ROOM_IDX))%
    ENDIF
    ROOM_IDX ++
WEND
IF LIST_COUNT(_LIST_ROOM) > 0
    IF !RANDOM
        RETURN TOINT(LIST_GET(_LIST_ROOM, 0))
    ELSE
        LOCAL = LIST_COUNT(_LIST_ROOM)
        RETURN TOINT(LIST_GET(_LIST_ROOM, RAND(0, LOCAL)))
    ENDIF
ELSE
;タグに該当する部屋が見つからなかった場合
    RETURN -1
ENDIF

;ROOM_TAGに該当するFROMから最も近い部屋をIDXで取得
@HO_FIND_NEAREST_ROOM_BY_TAG(ROOM_TAG, ROOM_IDX_FROM, MAP_ID = -1)
#DIMS ROOM_TAG
#DIM ROOM_IDX_FROM
#DIM MAP_ID
#DIM DYNAMIC DIST
#DIM  DYNAMIC ROOM_IDX
#DIM  DYNAMIC LIST_IDX
#DIMS DYNAMIC _DIC_ROOM_LIST, HO_MAX_ROOMNUM + 1

VARSET _DIC_ROOM_LIST, "-1"
SIF MAP_ID == -1
    MAP_ID = HO_有効マップID
WHILE ROOM_IDX < HO_MAX_ROOMNUM
    CALL HO_GET_ROOM_TAG(ROOM_IDX)
    IF LIST_INDEXOF(RESULTS, ROOM_TAG) != -1
        _DIC_ROOM_LIST:LIST_IDX '= ""
        _DIC_ROOM_LIST:LIST_IDX = %DIC_SET(_DIC_ROOM_LIST:LIST_IDX, "ROOM_IDX", TOSTR(ROOM_IDX))%
        CALL HO_GET_ROUTE(ROOM_IDX_FROM, ROOM_IDX)
        DIST = RESULT
        _DIC_ROOM_LIST:LIST_IDX = %DIC_SET(_DIC_ROOM_LIST:LIST_IDX, "DISTANCE", TOSTR(DIST))%
        LIST_IDX++
    ENDIF
    ROOM_IDX ++
WEND
IF FINDELEMENT(_DIC_ROOM_LIST, "-1") > 0
    CALL ARRAYSORT_DIC(_DIC_ROOM_LIST, "DISTANCE")
    ROOM_IDX = TOINT(DIC_GET(_DIC_ROOM_LIST:0, "ROOM_IDX"))
    RETURN ROOM_IDX
ELSE
;タグに該当する部屋が見つからなかった場合
    RETURN -1
ENDIF

;使用したいモジュールの用途から条件を満たす最も近い部屋を探す
@HO_FIND_NEAREST_ROOM_BY_MODULE_USAGE(MODULE_USAGE, ROOM_IDX_FROM, 現在地を除外 = 0, MAP_ID = -1)
#DIMS MODULE_USAGE
#DIM ROOM_IDX_FROM
#DIM 現在地を除外
#DIM MAP_ID
#DIM DYNAMIC DIST
#DIM  DYNAMIC ROOM_IDX
#DIM  DYNAMIC LIST_IDX
#DIM  DYNAMIC MODULE_ID
#DIMS DYNAMIC _LIST_MODULE
#DIMS DYNAMIC _LIST_USAGE
#DIMS DYNAMIC _DIC_ROOM_LIST, HO_MAX_ROOMNUM + 1

VARSET _DIC_ROOM_LIST, "-1"
SIF MAP_ID == -1
    MAP_ID = HO_有効マップID
WHILE ROOM_IDX < HO_MAX_ROOMNUM
    IF ROOM_IDX == ROOM_IDX_FROM && 現在地を除外 == 1
        ROOM_IDX ++
        CONTINUE
    ENDIF
    CALL HO_GET_MAPDATA(MAP_ID, ROOM_IDX, "MODULE_LIST")
    _LIST_MODULE = %RESULTS%
    FOR LOCAL, 0, LIST_COUNT(_LIST_MODULE)
        MODULE_ID = TOINT(LIST_GET(_LIST_MODULE, LOCAL))
        CALL HO_GET_MODULE_DATA(MODULE_ID, "用途")
        _LIST_USAGE = %RESULTS%
        ;探索対象のルームに一つでも条件を満たすモジュールがあれば、その部屋のIDXと距離を取って次の部屋を探索
        IF LIST_INDEXOF(_LIST_USAGE, MODULE_USAGE) != -1
            _DIC_ROOM_LIST:LIST_IDX '= ""
            _DIC_ROOM_LIST:LIST_IDX = %DIC_SET(_DIC_ROOM_LIST:LIST_IDX, "ROOM_IDX", TOSTR(ROOM_IDX))%
            CALL HO_GET_ROUTE(ROOM_IDX_FROM, ROOM_IDX)
            DIST = RESULT
            _DIC_ROOM_LIST:LIST_IDX = %DIC_SET(_DIC_ROOM_LIST:LIST_IDX, "DISTANCE", TOSTR(DIST))%
            LIST_IDX ++
            BREAK
        ENDIF
    NEXT
    ROOM_IDX ++
WEND
IF FINDELEMENT(_DIC_ROOM_LIST, "-1") > 0
    CALL ARRAYSORT_DIC(_DIC_ROOM_LIST, "DISTANCE")
    ROOM_IDX = TOINT(DIC_GET(_DIC_ROOM_LIST:0, "ROOM_IDX"))
    RETURN ROOM_IDX
ELSE
;条件に該当する部屋が見つからなかった場合
    RETURN -1
ENDIF

;マップデータから対象の部屋との接続情報を取得しLIST形式で返却
@HO_GET_PATH(ROOM_IDX, MAP_ID = -1)
#DIM MAP_ID
#DIM ROOM_IDX

VARSET RESULTS
SIF MAP_ID == -1
    MAP_ID = HO_有効マップID
CALL HO_GET_MAPDATA(MAP_ID, ROOM_IDX, "ROOM_PATH")
RETURN



;-------------------------------------------------
;ルームモジュールに関する関数
;-------------------------------------------------
;マップデータに保持している対象の部屋のモジュールリストよりモジュールIDを取得する
@HO_GET_MODULE_ID(ROOM_IDX, MODULE_IDX, MAP_ID = -1)
#DIM ROOM_IDX
#DIM MODULE_IDX
#DIM MAP_ID
#DIMS DYNAMIC _LIST_MODULE_LIST

SIF MAP_ID == -1
    MAP_ID = HO_有効マップID

CALL HO_GET_MAPDATA(MAP_ID, ROOM_IDX, "MODULE_LIST")
_LIST_MODULE_LIST = %RESULTS%

IF LIST_COUNT(_LIST_MODULE_LIST) == 0
    RETURN -1
ELSE
    LOCALS = %LIST_GET(_LIST_MODULE_LIST, MODULE_IDX)%
    SIF LOCALS == ""
        RETURN -1
    RETURN TOINT(LOCALS)
ENDIF

;モジュールIDからモジュール情報定義を取得
@HO_GET_MODULE_DATA(MODULE_ID, DATANAME)
#DIM MODULE_ID
#DIMS DATANAME
#DIMS _DIC_MODULE_DATA
#DIMS STR_DATA

TRYCCALLFORM HO_MODULE_DATA_{MODULE_ID}
    _DIC_MODULE_DATA = %RESULTS%
CATCH
    ;THROW MODULE_ID{MODULE_ID}に該当するモジュールデータが存在しません
    RETURN -1
ENDCATCH

STR_DATA = %DIC_GET(_DIC_MODULE_DATA, DATANAME)%
ISNUMERIC STR_DATA
IF RESULT
    RETURN TOINT(STR_DATA)
ELSE
    RESULTS = %STR_DATA%
    RETURN
ENDIF

;モジュール属性を取得
@HO_CHECK_MODULE_ELEMENT(ROOM_IDX, MODULE_IDX, ELEMENT_NAME)
#DIM  ROOM_IDX
#DIM  MODULE_IDX
#DIM  MODULE_ID
#DIMS ELEMENT_NAME

CALL HO_GET_MODULE_ID(ROOM_IDX, MODULE_IDX)
MODULE_ID  = RESULT
SIF RESULT == -1
    RETURN 0

CALL HO_GET_MODULE_DATA(MODULE_ID, "属性")
IF LIST_INDEXOF(RESULTS, ELEMENT_NAME) != -1
    RETURN 1
ENDIF

RETURN 0

;キャラが使っているモジュール情報を取得する
@HO_GET_USE_MODULE_INFO(CHARA_ID)
#DIM DYNAMIC CHARA_ID
#DIM DYNAMIC CHARA_IDX
#DIM DYNAMIC ROOM_IDX
#DIM DYNAMIC MODULE_IDX
#DIM DYNAMIC MODULE_ID

VARSET RESULTS
IF CHARA_ID != MASTER
    CALL HO_GET_CHARAIDX(CHARA_ID)
    CHARA_IDX = RESULT
    CALL HO_GET_CHARADATA(CHARA_IDX, "ROOM_IDX")
    ROOM_IDX = RESULT
    CALL HO_GET_CHARADATA(CHARA_IDX, "MODULE_USAGE")
    MODULE_IDX = RESULT
    SIF RESULT == -1 
        RETURN -1
ELSE
    ROOM_IDX = HO_MASTER現在地
    CALL HO_GET_MASTER_DATA("MODULE_USAGE")
    MODULE_IDX = RESULT
    SIF RESULT == -1 
        RETURN -1
ENDIF

CALL HO_GET_MODULE_ID(ROOM_IDX, MODULE_IDX)
MODULE_ID = RESULT
CALL HO_GET_MODULE_DATA(MODULE_ID, "MODULE_NAME")
RETURN MODULE_ID

;対象キャラクターが使っているモジュールの用途が引数と合致してるか確認
@HO_CHECK_USE_MODULE_USAGE(CHARA_ID, USAGE)
#DIM CHARA_ID
#DIMS USAGE
#DIM DYNAMIC MODULE_ID

CALL HO_GET_USE_MODULE_INFO(CHARA_ID)
MODULE_ID = RESULT
SIF MODULE_ID == -1
    RETURN 0
CALL HO_GET_MODULE_DATA(MODULE_ID, "用途")
IF LIST_INDEXOF(RESULTS, USAGE) != -1
    RETURN 1
ELSE
    RETURN 0
ENDIF

;対象キャラクターが使っているモジュールの属性が引数と合致してるか確認
@HO_CHECK_USE_MODULE_ELEM(CHARA_ID, ELEMENT_NAME)
#DIM CHARA_ID
#DIMS ELEMENT_NAME
#DIM DYNAMIC MODULE_ID

CALL HO_GET_USE_MODULE_INFO(CHARA_ID)
MODULE_ID = RESULT
SIF MODULE_ID == -1
    RETURN 0
CALL HO_GET_MODULE_DATA(MODULE_ID, "属性")
IF LIST_INDEXOF(RESULTS, ELEMENT_NAME) != -1
    RETURN 1
ELSE
    RETURN 0
ENDIF
;-------------------------------------------------
;キャラデータに関する関数
;-------------------------------------------------
@HO_GET_CHARADATA(IDX, DATANAME)
#DIM IDX
#DIMS DATANAME
SIF DIC_GET(_DIC_HO_CHARALIST:IDX, DATANAME) == ""
    RETURN -1

ISNUMERIC DIC_GET(_DIC_HO_CHARALIST:IDX, DATANAME)
IF RESULT
    RETURN TOINT(DIC_GET(_DIC_HO_CHARALIST:IDX, DATANAME))
ELSE
    RESULTS = %DIC_GET(_DIC_HO_CHARALIST:IDX, DATANAME)%
    RETURN
ENDIF

@HO_SET_CHARADATA(CHARA_IDX, DATANAME, VALUES)
#DIM CHARA_IDX
#DIMS DATANAME
#DIMS VALUES
_DIC_HO_CHARALIST:CHARA_IDX = %DIC_SET(_DIC_HO_CHARALIST:CHARA_IDX, DATANAME, VALUES)%
RETURN

@HO_SET_CHARAACT(CHARA_ID, ACTION)
#DIM CHARA_ID
#DIMS ACTION
CALL HO_GET_CHARAIDX(CHARA_ID)
CALL HO_SET_CHARADATA(RESULT, "ACTION", ACTION)

@HO_GET_CHARAACT(CHARA_ID)
#DIM CHARA_ID
CALL HO_GET_CHARAIDX(CHARA_ID)
CALL HO_GET_CHARADATA(RESULT, "ACTION")

@HO_SET_CHARAPLACE(CHARA_ID, ROOM_IDX)
#DIM CHARA_ID
#DIM ROOM_IDX
CALL HO_GET_CHARAIDX(CHARA_ID)
CALL HO_SET_CHARADATA(RESULT, "ROOM_IDX", TOSTR(ROOM_IDX))

@HO_GET_CHARAPLACE(CHARA_ID)
#DIM CHARA_ID
CALL HO_GET_CHARAIDX(CHARA_ID)
CALL HO_GET_CHARADATA(RESULT, "ROOM_IDX")
RETURN RESULT

@HO_SET_MOVELIST(CHARA_ID, _LIST_MOVELIST)
#DIM CHARA_ID
#DIMS _LIST_MOVELIST
CALL HO_GET_CHARAIDX(CHARA_ID)
CALL HO_SET_CHARADATA(RESULT, "MOVELIST", _LIST_MOVELIST)

@HO_GET_MOVELIST(CHARA_ID)
#DIM CHARA_ID
CALL HO_GET_CHARAIDX(CHARA_ID)
CALL HO_GET_CHARADATA(RESULT, "MOVELIST")

@HO_GET_CHARAIDX(CHARA_ID)
#DIM CHARA_ID
#DIM DYNAMIC IDX
WHILE _DIC_HO_CHARALIST:IDX != "-1"
    CALL HO_GET_CHARADATA(IDX, "CHARA_ID")
    SIF CHARA_ID == RESULT
        RETURN IDX
    IDX ++
WEND
;キャラリストに存在しないIDなら-1を返す
RETURN -1

;-------------------------------------------------
;プレイヤーデータに関する関数
;-------------------------------------------------
@HO_GET_MASTER_DATA(DATANAME)
#DIMS DATANAME

VARSET RESULTS
SIF DIC_GET(_DIC_HO_MASTER_DATA, DATANAME) == ""
    RETURN -1

ISNUMERIC DIC_GET(_DIC_HO_MASTER_DATA, DATANAME)
IF RESULT
    RETURN TOINT(DIC_GET(_DIC_HO_MASTER_DATA, DATANAME))
ELSE
    RESULTS = %DIC_GET(_DIC_HO_MASTER_DATA, DATANAME)%
    RETURN
ENDIF

@HO_SET_MASTER_DATA(DATANAME, VALUES)
#DIMS DATANAME
#DIMS VALUES

_DIC_HO_MASTER_DATA = %DIC_SET(_DIC_HO_MASTER_DATA, DATANAME, VALUES)%
RETURN

;-------------------------------------------------
;汎用関数仮置
;-------------------------------------------------
;リスト型配列のシャッフル関数
@LIST_SHUFFLE(_LIST, 回数 = 1)
#DIMS REF _LIST
#DIM 回数
#DIM LIST_LENGTH
LIST_LENGTH = LIST_COUNT(_LIST)
FOR LOCAL:0, 0, 回数
    WHILE LIST_LENGTH > 1
        LIST_LENGTH --
        LOCAL:1 = RAND(0, LIST_LENGTH + 1)
        LOCALS:0 = %LIST_GET(_LIST, LOCAL:1)%
        _LIST = %LIST_SET(_LIST, LOCAL:1, LIST_GET(_LIST, LIST_LENGTH))%
        _LIST = %LIST_SET(_LIST, LIST_LENGTH, LOCALS:0)%
    WEND
NEXT
RETURN