;------------------------
;交易
;------------------------
@SET_TRADE_RULE(SHIP_ID)
#DIM TRADE_FROM_POS
#DIM TRADE_TO_POS
#DIM ITEM_ID, 2
#DIM SHIP_ID
#DIM ITEM_RM, 2
#DIM MEMO_POS
#DIM HAJIMETE
#DIM MEMO_FROM_POS

TRADE_FROM_POS = -1
TRADE_TO_POS = -1
ITEM_ID:0 = -1
ITEM_ID:1 = -1
IF HAJIMETE == 0
	ITEM_RM:0 = -1
	ITEM_RM:1 = -1
	MEMO_POS = -1
	MEMO_FROM_POS = -1
ENDIF

IF SHIP_CATEGORY:SHIP_ID != 輸送船
	PRINTFORML 輸送船でないとこの任務には付けません
	RETURN -1
ENDIF

$TRADE_LOOP

DRAWLINE
PRINTL ◆交易ルール設定
PRINTL 交易は指定の開始地点でアイテムを購入し、目的地で売却する。その後目的地でアイテムを購入し、出発地点に戻り売却する
DRAWLINE
CALL ID2POS(CHARACTER_POSITION)
;--------------------------------------------------
;出発位置決め
;--------------------------------------------------
PRINTL 出発地点
IF TRADE_FROM_POS == -1
	PRINTFORM 　%"未設定", 30, LEFT%
ELSE
	CALL ID2POS(TRADE_FROM_POS)
	PRINTFORM 　セクター＃{RESULT:0}, X: {RESULT:1}, Y: {RESULT:2} 
ENDIF
PRINTBUTTON "[ 5] 変更", 5
PRINTL
IF MEMO_FROM_POS == -1
	PRINTFORM 　%"未設定", 30, LEFT%
ELSE
	CALL ID2POS(MEMO_FROM_POS)
	PRINTFORM 　セクター＃{RESULT:0}, X: {RESULT:1}, Y: {RESULT:2} 
ENDIF
PRINTBUTTON "[21] 直前の目的地", 21
PRINTL
PRINTL
;--------------------------------------------------
;買い付け（出発地点）
;--------------------------------------------------
PRINTL 出発地点で買い付けるアイテム
IF ITEM_ID:0 == -1
	PRINTFORM 　%NO_ITEM, 30, LEFT%
ELSE
	CALL GET_ITEM_NAME(ITEM_ID)
	PRINTFORM 　%RESULTS, 30, LEFT%
ENDIF
PRINTBUTTON "[ 0] 変更", 0
PRINTL
IF ITEM_RM:0 == -1
	PRINTFORM 　%NO_ITEM, 30, LEFT%
ELSE
	CALL GET_ITEM_NAME(ITEM_RM)
	PRINTFORM 　%RESULTS, 30, LEFT%
	PRINTBUTTON "[10] 直前の品目", 10
ENDIF
PRINTL
PRINTL
;--------------------------------------------------
;目艇位置決め
;--------------------------------------------------
PRINTL 目的地点
IF TRADE_TO_POS == -1
	PRINTFORM 　%"未設定", 30, LEFT%
ELSE
	CALL ID2POS(TRADE_TO_POS)
	PRINTFORM 　セクター＃{RESULT:0}, X: {RESULT:1}, Y: {RESULT:2} 
ENDIF
PRINTBUTTON "[ 1] 変更", 1
PRINTL
IF MEMO_POS == -1
	PRINTFORM 　%"未設定", 30, LEFT%
ELSE
	CALL ID2POS(MEMO_POS)
	PRINTFORM 　セクター＃{RESULT:0}, X: {RESULT:1}, Y: {RESULT:2} 
ENDIF
PRINTBUTTON "[11] 直前の目的地", 11
PRINTL
PRINTL
;--------------------------------------------------
;買い付け（目的地）
;--------------------------------------------------
PRINTL 目的地点で買い付けるアイテム
IF ITEM_ID:1 == -1
	PRINTFORM 　%NO_ITEM, 30, LEFT%
ELSE
	CALL GET_ITEM_NAME(ITEM_ID:1)
	PRINTFORM 　%RESULTS, 30, LEFT%
ENDIF
PRINTBUTTON "[ 2] 変更", 2
PRINTL
IF ITEM_RM:1 == -1
	PRINTFORM 　%NO_ITEM, 30, LEFT%
ELSE
	CALL GET_ITEM_NAME(ITEM_RM:1)
	PRINTFORM 　%RESULTS, 30, LEFT%
	PRINTBUTTON "[12] 直前の品目", 12
ENDIF
PRINTL
PRINTL
PRINTBUTTON "[3] 決定", 3
PRINT  
PRINTBUTTON "[4] 戻る", 4

;--------------------------------------------------
;選択処理開始
;--------------------------------------------------
INPUT
IF RESULT == 0
	CALL SELECT_ITEM_LIST(TRADE_FROM_POS)
	IF RESULT != -1
		ITEM_ID:0 = RESULT
		ITEM_RM:0 = RESULT
	ENDIF
	GOTO TRADE_LOOP
ELSEIF RESULT == 1
	CALL SELECT_POS_FROM_MAP
	IF RESULT != -1
		TRADE_TO_POS = RESULT
		MEMO_POS = RESULT
	ENDIF
	GOTO TRADE_LOOP
ELSEIF RESULT == 2
	CALL SELECT_ITEM_LIST(TRADE_TO_POS)
	IF RESULT != -1
		ITEM_ID:1 = RESULT
		ITEM_RM:1 = RESULT
	ENDIF
	GOTO TRADE_LOOP
ELSEIF RESULT == 10
	SIF ITEM_RM:0 != -1
		ITEM_ID:0 = ITEM_RM:0
	GOTO TRADE_LOOP
ELSEIF RESULT == 11
	SIF MEMO_POS != -1
		TRADE_TO_POS = MEMO_POS
	GOTO TRADE_LOOP
ELSEIF RESULT == 12
	SIF ITEM_RM:1 != -1
		ITEM_ID:1 = ITEM_RM:1
	GOTO TRADE_LOOP
ELSEIF RESULT == 3
	IF TRADE_FROM_POS == -1
		PRINTW 交易出発地点が設定されていません
		GOTO TRADE_LOOP
	ELSEIF TRADE_TO_POS == -1
		PRINTW 交易先が設定されていません
		GOTO TRADE_LOOP
	ELSEIF ITEM_ID:0 == -1
		PRINTW 出発地点で買い付ける品物が設定されていません
		GOTO TRADE_LOOP
	ELSEIF ITEM_ID:1 == -1
		PRINTW 到着地点で買い付ける品物が設定されていません
		GOTO TRADE_LOOP
	ENDIF
	SIF (ITEM_RM:0 != -1 && ITEM_RM:0 != -1 && MEMO_POS != -1)
		HAJIMETE = 1
	SHIP_MISSION:SHIP_ID = 交易
	FROM_POS:SHIP_ID = TRADE_FROM_POS
	MOVING_POS:SHIP_ID = TRADE_TO_POS
	TRADE_ITEM:0:SHIP_ID = ITEM_ID:0
	TRADE_ITEM:1:SHIP_ID = ITEM_ID:1
	RETURN
ELSEIF RESULT == 4
	RETURN
ELSEIF RESULT == 5
	CALL SELECT_POS_FROM_MAP
	IF RESULT != -1
		TRADE_FROM_POS = RESULT
		MEMO_FROM_POS = RESULT
	ENDIF
	GOTO TRADE_LOOP
ELSEIF RESULT == 21
	SIF MEMO_FROM_POS != -1
		TRADE_FROM_POS = MEMO_FROM_POS
	GOTO TRADE_LOOP
ENDIF
GOTO TRADE_LOOP

;--------------------------------------------------
; アイテムの選択
;--------------------------------------------------
@SELECT_ITEM_LIST(POS)
#DIM POS
#DIM ITEM_ID
#DIMS ITEM_NAME
#DIM PORT_ID
#DIM COUNTRY_ID
#DIM DYNAMIC SELECTABLE_ITEM, ITEM_LENGTH

COUNTRY_ID = -1

FOR PORT_ID, 0, 星系数
	SIF 星系座標ID:PORT_ID == POS
		COUNTRY_ID = STAR_OWNER:PORT_ID
NEXT
IF COUNTRY_ID == -1
	FOR PORT_ID, 0, MAX_PORT
		SIF PORT_POSITION_ID:PORT_ID == POS
			COUNTRY_ID = PORT_OWNER:PORT_ID
	NEXT
ENDIF

IF COUNTRY_ID != -1
	FOR ITEM_ID, 0, ITEM_LENGTH
		SIF !GET_RESOURCE_NUM(POS, COUNTRY_ID, ITEM_ID)
			CONTINUE
		CALL GET_ITEM_NAME(ITEM_ID)
		SIF RESULT == -1
			CONTINUE
		ITEM_NAME = %RESULTS%
		SELECTABLE_ITEM:ITEM_ID = 1
		PRINTBUTTON @"[{ITEM_ID, 2, RIGHT}] %ITEM_NAME%", ITEM_ID
		PRINTL
	NEXT
ENDIF
PRINTBUTTON "[99] 戻る", 99
$INPUT_LOOP

INPUT
IF RESULT >= 0 && RESULT < ITEM_LENGTH
	SIF SELECTABLE_ITEM:RESULT != 1
		GOTO INPUT_LOOP
	SIF !GET_RESOURCE_NUM(POS, COUNTRY_ID, RESULT)
		GOTO INPUT_LOOP
	RETURN RESULT
ELSEIF RESULT == 99
	RETURN -1
ELSE
	GOTO INPUT_LOOP
ENDIF

;--------------------------------------------------
;座標指定
;--------------------------------------------------
@SELECT_POS_FROM_MAP
#DIM SECTOR_ID
#DIM X_POS
#DIM Y_POS
#DIM PORT_ID
#DIM TARGET_POS
#DIM SLOT_ID
#DIM CAN_SALE

TARGET_POS = -1
CAN_SALE = 0
DRAWLINE
PRINTL 移動させる座標を選択
CALL ID2POS(CHARACTER_POSITION)
SECTOR_ID = RESULT:0
$MAP_LOOP
CALL DRAW_MAP(SECTOR_ID)
INPUT
IF RESULT < 0
	RESULT += 1000
	RESULT *= -1
	SECTOR_ID = RESULT
	GOTO MAP_LOOP
ENDIF

;--------------------------------------------------
; 星系港
;--------------------------------------------------
FOR PORT_ID, 0, 星系数
	SIF 星系座標ID:PORT_ID != RESULT
		CONTINUE
	TARGET_POS = RESULT
NEXT

;--------------------------------------------------
; 独立港
;--------------------------------------------------
IF TARGET_POS != -1
	FOR PORT_ID, 0, MAX_PORT
		SIF PORT_POSITION_ID:PORT_ID != RESULT
			CONTINUE
		CAN_SALE = 0
		FOR SLOT_ID, 0, STAR_PORT_SLOT_NUM
			SIF PORT_SLOT:PORT_ID:SLOT_ID != コンテナ
				CONTINUE
			CAN_SALE = 1
			BREAK
		NEXT
		SIF CAN_SALE != 1
			CONTINUE
		TARGET_POS = RESULT
		BREAK
	NEXT
ENDIF
SIF TARGET_POS == -1
	GOTO MAP_LOOP

CALL ID2POS(TARGET_POS)
SECTOR_ID = RESULT:0
X_POS = RESULT:1
Y_POS = RESULT:2
PRINTFORML セクター＃{SECTOR_ID}, X: {X_POS}, Y: {Y_POS}でよろしいですか？
PRINTBUTTON "[0] はい", 0
PRINTL
PRINTBUTTON "[1] いいえ", 1
PRINTL
PRINTBUTTON "[2] キャンセル", 2
PRINTL

INPUT
IF RESULT == 0
	RETURN TARGET_POS
ELSEIF RESULT == 1
	TARGET_POS = -1
	GOTO MAP_LOOP
ELSEIF RESULT == 2
	RETURN -1
ENDIF
GOTO MAP_LOOP


@TRADE(SHIP_ID)
#DIM SHIP_ID
#DIM SOLD_NUM
#DIM OWNER
#DIM PORT_ID
#DIM SHIP_STATUS, SHIP_STATUS_LENGTH
#DIM UNIT_PRICE

VARSET SHIP_STATUS, 0
OWNER = -1

;船の積載量と所持金から購入量を決定
CALL GET_SHIP_CAPACITY(SHIP_ID)
SOLD_NUM = RESULT
UNIT_PRICE = GET_RESOURCE_PRICE(SHIP_POSITION:SHIP_ID, TRADE_ITEM:0:SHIP_ID)
IF SHIP_COUNTRY:SHIP_ID == 国家ID_プレイヤー
	IF SOLD_NUM * UNIT_PRICE > MONEY
		SOLD_NUM = MONEY / UNIT_PRICE
	ENDIF
ELSE
	IF SOLD_NUM * UNIT_PRICE > MONEY:(SHIP_COUNTRY:SHIP_ID)
		SOLD_NUM = MONEY / UNIT_PRICE
	ENDIF
ENDIF

; 宇宙港の所有者を割り出す
FOR PORT_ID, 0, 星系数
	SIF 星系座標ID:PORT_ID != SHIP_POSITION:SHIP_ID
		CONTINUE
	OWNER = STAR_OWNER:PORT_ID
	BREAK
NEXT
IF OWNER == -1
	FOR PORT_ID, 0, MAX_PORT
		SIF PORT_POSITION_ID:PORT_ID != SHIP_POSITION:SHIP_ID
			CONTINUE
		OWNER = PORT_OWNER:PORT_ID
		BREAK
	NEXT
ENDIF

IF SHIP_POSITION:SHIP_ID == FROM_POS:SHIP_ID
	CALL TRADE_BUY(SHIP_ID, OWNER, SOLD_NUM, UNIT_PRICE)
ELSEIF OWNER != -1
	CALL TRADE_SELL(SHIP_ID, OWNER, UNIT_PRICE)
ENDIF

@TRADE_BUY(SHIP_ID, OWNER, SOLD_NUM, UNIT_PRICE)
#DIM SHIP_ID
#DIM SOLD_NUM
#DIM OWNER
#DIM UNIT_PRICE

; 出発地点で商品を買う
IF SHIP_COUNTRY:SHIP_ID == 国家ID_プレイヤー
	MONEY -= SOLD_NUM * UNIT_PRICE
	MONEY:OWNER += SOLD_NUM * UNIT_PRICE
ELSEIF OWNER == 国家ID_プレイヤー
	MONEY:(SHIP_COUNTRY:SHIP_ID) -= SOLD_NUM * UNIT_PRICE
	MONEY += SOLD_NUM * UNIT_PRICE
ELSE
	MONEY:(SHIP_COUNTRY:SHIP_ID) -= SOLD_NUM * UNIT_PRICE
	MONEY:OWNER += SOLD_NUM + UNIT_PRICE
ENDIF
LOCAL = REMOVE_RESOURCE(SHIP_POSITION:SHIP_ID, OWNER, TRADE_ITEM:0:SHIP_ID, SOLD_NUM)
CALL LOAD_TO_SHIP(SHIP_ID, TRADE_ITEM:0:SHIP_ID, SOLD_NUM - LOCAL)
RETURN

; 到着していたら商品の売買を行う
@TRADE_SELL(SHIP_ID, OWNER, UNIT_PRICE)
#DIM SHIP_ID
#DIM SOLD_NUM
#DIM OWNER
#DIM UNIT_PRICE

SOLD_NUM = GET_CARGO_ITEM_NUM(SHIP_ID, TRADE_ITEM:0:SHIP_ID)
; 売買
IF SHIP_COUNTRY:SHIP_ID == 国家ID_プレイヤー
	MONEY += SOLD_NUM * UNIT_PRICE
	MONEY:OWNER -= SOLD_NUM * UNIT_PRICE
ELSEIF OWNER == 国家ID_プレイヤー
	MONEY:(SHIP_COUNTRY:SHIP_ID) += SOLD_NUM * UNIT_PRICE
	MONEY -= SOLD_NUM * UNIT_PRICE
ELSE
	MONEY:(SHIP_COUNTRY:SHIP_ID) += SOLD_NUM * UNIT_PRICE
	MONEY:OWNER -= SOLD_NUM + UNIT_PRICE
ENDIF
CALLF UNLOAD_FROM_SHIP(SHIP_ID, TRADE_ITEM:0:SHIP_ID, SOLD_NUM)
CALL ADD_RESOURCE(SHIP_POSITION:SHIP_ID, OWNER, TRADE_ITEM:0:SHIP_ID, SOLD_NUM)
CALL TRADE_SWAP_POSITION(SHIP_ID)
RETURN

; 出発地点と到着地点を交換
@TRADE_SWAP_POSITION(SHIP_ID)
#DIM SHIP_ID

LOCAL = TRADE_ITEM:0:SHIP_ID
TRADE_ITEM:0:SHIP_ID = TRADE_ITEM:1:SHIP_ID
TRADE_ITEM:1:SHIP_ID = LOCAL

LOCAL = MOVING_POS:SHIP_ID
MOVING_POS:SHIP_ID = FROM_POS:SHIP_ID
FROM_POS:SHIP_ID = LOCAL

;------------------------
; 輸送
; 初期目的地で物資積載待ち。星などで買えるなら買う。最終的に次目的地で待機。売れるなら売って初期目的地へ
;------------------------
@SET_TRANSPORT_RULE(SHIP_ID)
#DIM SHIP_ID
#DIM SECTOR_ID
#DIM TRANS_POSID,2
#DIM tITEM_ID,2

tITEM_ID:0 = -1
IF SHIP_MISSION:SHIP_ID == 輸送
	;;現在値ロードつけるならここ
ELSE



ENDIF

IF SHIP_CATEGORY:SHIP_ID != 輸送船
	PRINTFORML 輸送船でないとこの任務には付けません
	RETURN -1
ENDIF


SECTOR_ID = SHIP_POSITION:SHIP_ID / 10000

$TRANSPORT_LOOP

DRAWLINE
PRINTL ◆輸送ルール設定
PRINTL 　調達地点がリソースの場合：積み込みを待つ / 交易可能な場合、船倉を全売却した後購入する
PRINTL 　配達地点に到着で待機する
DRAWLINE

;;調達地点
PRINTBUTTON "　[0] 調達地変更　", 0
CALL GET_PORT_NAME(TRANS_POSID:1)
IF RESULT == 1
	PRINTFORM 惑星 %RESULTS:0, 25, LEFT%
ELSEIF RESULT == 2
	PRINTFORM %RESULTS:0, 30, LEFT% 
ELSE
	PRINTFORM %"調達地", 30, LEFT%
ENDIF
;PRINTBUTTON "　[1] 調達品変更　", 1
PRINT 　　　調達品
PRINTL 
PRINTFORM %"",18, %
IF TRANS_POSID:1 == -1
	PRINTFORM %"未設定", 30, LEFT%
ELSE
	CALL ID2POS(TRANS_POSID:1)
	PRINTFORM セクター＃{RESULT:0,2,RIGHT} X:{RESULT:1,2,RIGHT} Y:{RESULT:2,2,RIGHT} 
	PRINTFORM %"",7, %
ENDIF
IF tITEM_ID:1 == -1
	PRINTFORM %"積み込み待機", 20, LEFT%
ELSE
	PRINTFORM %GET_RESOURCE_NAME(tITEM_ID:1), 20, LEFT%
ENDIF
PRINTL
PRINTL

;配達先
PRINTBUTTON "　[2] 配達先変更　", 2
CALL GET_PORT_NAME(TRANS_POSID:0)
IF RESULT == 1
	PRINTFORM 惑星 %RESULTS:0, 25, LEFT%
ELSEIF RESULT == 2
	PRINTFORM %RESULTS:0, 30, LEFT% 
ELSE
	PRINTFORM %"　　目的地", 30, LEFT%
ENDIF
PRINTL 
PRINTFORM %"",18, %
IF TRANS_POSID:0 == -1
	PRINTFORM %"未設定", 30, LEFT%
ELSE
	CALL ID2POS(TRANS_POSID:0)
	PRINTFORM セクター＃{RESULT:0,2,RIGHT} X:{RESULT:1,2,RIGHT} Y:{RESULT:2,2,RIGHT} 
	PRINTFORM %"",7, %
ENDIF
PRINTL
PRINTL
PRINTFORML 　　　　[3] 決定 　　　[4] 戻る

INPUT

IF RESULT == 0
	DRAWLINE
	CALL SELECT_POINT_byMAP(-1, SHIP_ID , "調達地点を選択" , )
	TRANS_POSID:1 = RESULT
	CALL GET_PORT_NAME(TRANS_POSID:1)
	IF RESULT == 1 || RESULT == 2 
		CALL SELECT_ITEM_LIST
		SIF RESULT != -1
			tITEM_ID:1 = RESULT
		GOTO TRANSPORT_LOOP
	ELSE
		;TRANS_POSID:1 = TRANS_POSID:1
		tITEM_ID:1 = -1
		GOTO TRANSPORT_LOOP
	ENDIF

ELSEIF RESULT == 2
	DRAWLINE
	CALL SELECT_POINT_byMAP(-1, SHIP_ID , "配達先を選択" , )
	TRANS_POSID:0 = RESULT
	CALL GET_PORT_NAME(TRANS_POSID:0)
	IF RESULT == 1 || RESULT == 2 

		GOTO TRANSPORT_LOOP
	ELSE
		;TRANS_POSID:0 = TRANS_POSID:0
		;tITEM_ID:0 = -1
		GOTO TRANSPORT_LOOP
	ENDIF

ELSEIF RESULT == 3
	IF TRANS_POSID:0 == -1 || TRANS_POSID:1 == -1
		PRINTW 目的地先が設定されていません
		GOTO TRANSPORT_LOOP
	;ELSEIF tITEM_ID:0 == -1
	;	PRINTW 出発地点で買い付ける品物が設定されていません
	;	GOTO TRADE_LOOP
	;ELSEIF tITEM_ID:1 == -1
	;	PRINTW 到着地点で買い付ける品物が設定されていません
	;	GOTO TRADE_LOOP
	ENDIF
	SHIP_MISSION:SHIP_ID = 輸送
	FROM_POS:SHIP_ID = TRANS_POSID:0

	MOVING_POS:SHIP_ID = TRANS_POSID:0
	;TRADE_ITEM:0:SHIP_ID = tITEM_ID:0
	TRADE_ITEM:1:SHIP_ID = tITEM_ID:1
	RETURN
ELSEIF RESULT == 4
	RETURN
ENDIF
GOTO TRANSPORT_LOOP

;------------------------
; 輸送
; 引数１：船ID
; 地点１で「惑星から購入」or「採掘船から積み込み」をうける
; 地点２で「惑星に売却」or「自勢力宇宙港に搬入」or何もない宙域で待機　する
; 荷下ろし・積み込みを関数化しないと煩雑でかなわん
; 船→惑星 / 船→宇宙港 / 惑星→船 自動でするトレード荷の移動はこのぐらい？
;------------------------
@TRANSPORT(SHIP_ID)
#DIM SHIP_ID
#DIM inPORT
#DIM OWNER
#DIM PORT_ID
#DIM UNIT_PRICE
#DIM SOLD_NUM
#DIM ITEM_ID
#DIM TOTAL_CONTAINER_CAPACITY
#DIM CURRENT_STORED_ITEM_NUM
#DIM TOTAL_STORED_RESOURCE_NUM
#DIM STORED_RESOURCE_NUM, ITEM_LENGTH
#DIM UNLOADABLE_NUM
#DIM QTOTAL_STORED_RESOURCE_NUM

CALL GET_PORT_NAME(SHIP_POSITION:SHIP_ID)
inPORT = RESULT:0	; 0= なし / 1= 惑星 / 2= 宇宙港
OWNER = RESULT:1
PORT_ID = RESULT:2

;;反転直後の出港前
IF SHIP_POSITION:SHIP_ID == FROM_POS:SHIP_ID && TRADE_ITEM:0:SHIP_ID != -1
	IF inPORT == 1	;惑星
	;;入港拒否判定・・・まあいいか
	;;出発前の購入
		;船の積載量と所持金から購入量を決定
		SOLD_NUM = SHIP_CARGO:SHIP_ID:(TRADE_ITEM:0:SHIP_ID)

		UNIT_PRICE = GET_RESOURCE_PRICE(SHIP_POSITION:SHIP_ID, TRADE_ITEM:0:SHIP_ID)
		IF SHIP_COUNTRY:SHIP_ID == 国家ID_プレイヤー
			IF SOLD_NUM * UNIT_PRICE > MONEY
				SOLD_NUM = MONEY / UNIT_PRICE
			ENDIF
		ELSE
			IF SOLD_NUM * UNIT_PRICE > MONEY:(SHIP_COUNTRY:SHIP_ID)
				SOLD_NUM = MONEY / UNIT_PRICE
			ENDIF
		ENDIF

		LOCAL = REMOVE_RESOURCE(SHIP_POSITION:SHIP_ID, OWNER, TRADE_ITEM:0:SHIP_ID, SOLD_NUM)
		CALL LOAD_TO_SHIP(SHIP_ID, TRADE_ITEM:0:SHIP_ID, SOLD_NUM - LOCAL)

	;	PRINTFORML SHIP%SHIP_NAME:SHIP_ID%  {TRADE_ITEM:0:SHIP_ID}  {SOLD_NUM}-{LOCAL}個購入

	ENDIF
ENDIF

; 移動実行。未着だったら交易目標まで移動
IF SHIP_POSITION:SHIP_ID != MOVING_POS:SHIP_ID
	CALL MOVE_SHIP(MOVING_POS:SHIP_ID, SHIP_ID)
	IF FLAG:600 != 1 && SHIP_POSITION:SHIP_ID == MOVING_POS:SHIP_ID
		SETCOLOR 0xFFFF00
		PRINTFORML [INFO] %SHIP_NAME:SHIP_ID% 輸送タスク 移動完了 タスク実行中
		RESETCOLOR
	ENDIF
	RETURN	;移動したら終わり
ENDIF

; 目的地点に到着
IF SHIP_POSITION:SHIP_ID == MOVING_POS:SHIP_ID
	IF inPORT	;惑星か港
		SELECTCASE CHECK_COUNTRY_RELATION_F( (SHIP_COUNTRY:SHIP_ID) , OWNER)
			CASE -1
			;敵対=とりあえず拒否
				SHIP_MISSION:SHIP_ID = 待機
				SETCOLOR 0xFFCC00
				PRINTFORML [INFO] %SHIP_NAME:SHIP_ID% 入港を拒否されました タスクを中断します
				RESETCOLOR
				RETURN
			CASE 0, 1
			;中立or友好
		ENDSELECT

		;積み荷があれば、積載品を全部売却しとく / 宇宙港だとコンテナ移譲になる
		CALL GET_CARGO_ITEM_INFO(SHIP_ID, 0)
		IF RESULT:1 > 0 

			;積み荷あり。自勢力宇宙港の場合、荷をコンテナに移す
			;なんか変だよ？とりあえず使っとく portとSTARの区分もあるし後回し
			IF inPORT == 2 && OWNER == SHIP_COUNTRY:SHIP_ID
				TOTAL_CONTAINER_CAPACITY = GET_MAX_PORT_CARGO_CAPACITY(PORT_ID)
				CURRENT_STORED_ITEM_NUM = GET_TOTAL_ITEM_NUM_IN_PORT(PORT_ID)
				IF CURRENT_STORED_ITEM_NUM >= TOTAL_CONTAINER_CAPACITY
				;	PRINTL コンテナが一杯で収容キャパシティが不足しています
					IF TOTAL_STORED_RESOURCE_NUM > 0
				;		PRINTL 作業ロボットが適当に入れられるだけコンテナに貨物を入れました。輸送船に残ったリソースを確認してください
				;		PRINTL 以下の貨物をコンテナに収めました
				;		PRINTL 
						FOR ITEM_ID, 0, ITEM_LENGTH
							SIF STORED_RESOURCE_NUM:ITEM_ID == -1
								CONTINUE
				;			CALL GET_ITEM_NAME(ITEM_ID)
				;			PRINTFORML %RESULTS% x %TOSTR(STORED_RESOURCE_NUM:ITEM_ID, "##,###"), 5, RIGHT%
						NEXT
				;		PRINTL
				;		PRINTW 以上
					ENDIF
					;;積み荷残りあり終了
					SHIP_MISSION:SHIP_ID = 待機
					SETCOLOR 0xFFCC00
					PRINTFORML [INFO] %SHIP_NAME:SHIP_ID% 積み荷を降ろせません タスクを中断します
					RESETCOLOR
					RETURN

				ELSE
					WHILE 1
						CALL GET_CARGO_ITEM_INFO(SHIP_ID, 0)
						;@UNLOAD_FROM_SHIPでSHIP_CARGO_ITEM_ID配列が詰められるので、常に先頭を見る
						ITEM_ID = RESULT:0
						SIF ITEM_ID == -1
							BREAK
						UNLOADABLE_NUM  = MIN(RESULT:1, (TOTAL_CONTAINER_CAPACITY - CURRENT_STORED_ITEM_NUM))

						CALLF UNLOAD_FROM_SHIP(SHIP_ID, ITEM_ID, UNLOADABLE_NUM)
						CALL STORE_ITEM_TO_PORT(PORT_ID, ITEM_ID, UNLOADABLE_NUM)
						CURRENT_STORED_ITEM_NUM += UNLOADABLE_NUM
						STORED_RESOURCE_NUM:ITEM_ID += UNLOADABLE_NUM
						QTOTAL_STORED_RESOURCE_NUM += UNLOADABLE_NUM
					WEND

					CALL GET_CARGO_ITEM_INFO(SHIP_ID, 0)
					IF RESULT:0 != -1 	;;積み荷残りあり終了 来ることがない
						SHIP_MISSION:SHIP_ID = 待機
						SETCOLOR 0xFFCC00
						PRINTFORML [INFO] %SHIP_NAME:SHIP_ID% 積み荷を降ろせません タスクを中断します
						RESETCOLOR
						RETURN
					ELSE	;全卸完了
						SETCOLOR 0xFFFF00
						PRINTFORML [INFO] %SHIP_NAME:SHIP_ID% 宇宙港に配達完了
						RESETCOLOR

					ENDIF
				ENDIF;;宇宙港への荷下ろしｺｺﾏﾃﾞ

			; 積み荷あり、惑星着
			ELSEIF inPORT == 1
			;;	CALL AUTO_SALE(SHIP_POSITION:SHIP_ID, SHIP_COUNTRY:SHIP_ID, あああああかんやん
			;	SHIP_MISSION:SHIP_ID = 待機
			;	SETCOLOR 0xFFCC00
			;	PRINTFORML [INFO] %SHIP_NAME:SHIP_ID% 目的地到着 タスクを中断します
			;	RESETCOLOR
			;	RETURN

			;;全部売らせる
				WHILE (1)
					CALL GET_CARGO_ITEM_INFO(SHIP_ID, 0)
					IF RESULT:1 <= 0
						BREAK
					ELSE
						ITEM_ID = RESULT:0
						SOLD_NUM = RESULT:1
						UNIT_PRICE = GET_RESOURCE_PRICE(SHIP_POSITION:SHIP_ID, ITEM_ID )
						; 売買
						IF SHIP_COUNTRY:SHIP_ID == 国家ID_プレイヤー	;これちょっとまずいね 国家ID_プレイヤーは1なんだ
							MONEY += SOLD_NUM * UNIT_PRICE
							MONEY:OWNER -= SOLD_NUM * UNIT_PRICE
						ELSEIF OWNER == 国家ID_プレイヤー
							MONEY:(SHIP_COUNTRY:SHIP_ID) += SOLD_NUM * UNIT_PRICE
							MONEY -= SOLD_NUM * UNIT_PRICE
						ELSE
							MONEY:(SHIP_COUNTRY:SHIP_ID) += SOLD_NUM * UNIT_PRICE
							MONEY:OWNER -= SOLD_NUM + UNIT_PRICE
						ENDIF
						CALLF UNLOAD_FROM_SHIP(SHIP_ID, ITEM_ID, SOLD_NUM)
						CALL ADD_RESOURCE(SHIP_POSITION:SHIP_ID, OWNER, ITEM_ID, SOLD_NUM)
					ENDIF
				WEND
			; 積み荷がある 自勢力でない宇宙港=放置
			ELSE
				SHIP_MISSION:SHIP_ID = 待機
				SETCOLOR 0xFFCC00
				PRINTFORML [INFO] %SHIP_NAME:SHIP_ID% 自勢力でない宇宙港に到着 タスクを中断します
				RESETCOLOR
				RETURN
			ENDIF
		;惑星・港に着いたが積み荷がない＝ 前のターンで着いてた。このターンで反転処理。次で積んで出港
		ELSE

		ENDIF
	;; 惑星か港 ここまで
	ELSE	;採掘ポイントor何もない宙域（宇宙港建設地点を想定）
		CALL ID2POS(SHIP_POSITION:SHIP_ID)
		;採掘ポイントではない
		IF MAP:(RESULT:0):(RESULT:1):(RESULT:2) != 資源
			SHIP_MISSION:SHIP_ID = 待機
			SETCOLOR 0xFFFF00
			PRINTFORML [INFO] %SHIP_NAME:SHIP_ID% 目的地に到着　タスク完了
			RESETCOLOR
			RETURN
		ELSE	;採掘ポイントである
			CALL GET_VACANT_CARGO_SIZE(SHIP_ID)
			IF RESULT > 0	;船倉に積み込み余地がある
			;	SETCOLOR 0xFFFF00
			;	PRINTFORML [INFO] %SHIP_NAME:SHIP_ID% 積み込み待機中 CARGO残 {RESULT:0}
			;	PRINTFORML [INFO] %SHIP_NAME:SHIP_ID% 積み込み待機中
			;	RESETCOLOR
				RETURN
			ELSE	;カーゴ満載なら次の目的地へ
				; ほかの船の処理で積み込むため１手伸びてしまう。ココで移動まで組む
				LOCAL = TRADE_ITEM:0:SHIP_ID
				TRADE_ITEM:0:SHIP_ID = TRADE_ITEM:1:SHIP_ID
				TRADE_ITEM:1:SHIP_ID = LOCAL
				LOCAL = MOVING_POS:SHIP_ID
				MOVING_POS:SHIP_ID = FROM_POS:SHIP_ID
				FROM_POS:SHIP_ID = LOCAL

				SIF SHIP_POSITION:SHIP_ID != MOVING_POS:SHIP_ID
					CALL MOVE_SHIP(MOVING_POS:SHIP_ID, SHIP_ID)

				RETURN
			ENDIF
		ENDIF
	ENDIF

; 出発地点と到着地点を交換
	LOCAL = TRADE_ITEM:0:SHIP_ID
	TRADE_ITEM:0:SHIP_ID = TRADE_ITEM:1:SHIP_ID
	TRADE_ITEM:1:SHIP_ID = LOCAL

	LOCAL = MOVING_POS:SHIP_ID
	MOVING_POS:SHIP_ID = FROM_POS:SHIP_ID
	FROM_POS:SHIP_ID = LOCAL

ENDIF

