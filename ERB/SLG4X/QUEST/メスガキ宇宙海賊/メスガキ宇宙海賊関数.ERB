;--------------------------
;対空迎撃処理(迎撃を受けて残った飛翔物数を返す)
;--------------------------
@MESUGAKI_PIRATES_AA(飛翔物_個別HP, 飛翔物_回避, 飛翔物_命中回数, 迎撃艦)
#DIM 飛翔物_個別HP
#DIM 飛翔物_回避
#DIM 飛翔物_命中回数

#DIM 迎撃艦

#DIM 船ステータス, SHIP_STATUS_LENGTH
#DIM 副砲ステータス, STATUS_LENGTH

#DIM 武器数カウンター
#DIM 対空_攻撃カウンター

#DIM 累計対空ダメージ

#DIM 飛翔物_残存HP
#DIM 飛翔物_残存数



累計対空ダメージ = 0

TRYCALLFORM GET_SHIP_STATUS_{SHIP_MODEL:迎撃艦}(船ステータス)

PRINTFORML %SHIP_NAME:迎撃艦%の迎撃行動！
;副砲の数だけ迎撃処理
FOR 武器数カウンター, 0, 船ステータス:SHIP_SUB_WEAPON_SLOT
	TRYCCALLFORM GET_SUB_WEAPON_STATUS_{SHIP_EQUIP:副砲:武器数カウンター:迎撃艦}(副砲ステータス)
	;スキル補正はとりあえず乗せない

	; 迎撃能力のない武器は飛ばす
	IF 副砲ステータス:ANTI_AIR == 0 || 副砲ステータス:FIRE_RATE == 0
		CONTINUE
	ENDIF
	TRYCALLFORM GET_SUB_WEAPON_NAME_{SHIP_EQUIP:副砲:武器数カウンター:迎撃艦}
	PRINTFORML %RESULTS%による迎撃！
	RESULTS '= "[FCS_LOGS]"
	;副砲の攻撃判定(攻撃回数分回す)
	FOR 対空_攻撃カウンター, 0, 副砲ステータス:FIRE_RATE
		RESULTS += "FIRE..."
		;対空砲火が飛翔物に命中しなかった場合
		IF MIN(副砲ステータス:HIT_RATE, MAX_PARAM_HIT_RATE) > RAND:100
			RESULTS += "MISS. "
			CONTINUE
		ENDIF
		;対空砲火を飛翔物が回避した場合
		IF MIN(飛翔物_回避, MAX_PARAM_AVOID) > RAND:100
			RESULTS += "AVOID. "
			CONTINUE
		ENDIF
		; 当たった時の処理
		累計対空ダメージ += 副砲ステータス:ANTI_AIR
		RESULTS += "HIT! "
	NEXT
	CALL TYPING_LIKE_PRINTL(RESULTS, (30 / 副砲ステータス:FIRE_RATE), 1,)
	CATCH
	ENDCATCH
	PRINTL
NEXT

飛翔物_残存HP = (飛翔物_個別HP * 飛翔物_命中回数) - 累計対空ダメージ

IF 飛翔物_残存HP < 0
	;全部撃墜
	飛翔物_残存数 = 0
ELSE
	飛翔物_残存数 = 飛翔物_残存HP / 飛翔物_個別HP
	;(正の)余り(=1発分に満たないHP)があるなら1発増やす
	IF 飛翔物_残存HP % 飛翔物_個別HP > 0
		飛翔物_残存数 += 1
	ENDIF		
ENDIF

RETURN 飛翔物_残存数


;--------------------------
;被移乗戦闘メンバー選出
;--------------------------
@DEFENSIVE_BOARDING_CC_MEMBER_SET(TARGET_SHIP)

#DIM TARGET_SHIP
#DIM MEMBER_LIST, MAX_CHARANUM
#DIM MEMBER_COUNT

#DIM ADDCHARA_LISTNUM

#DIM FOR_COUNT

VARSET MEMBER_LIST
MEMBER_COUNT = 0

;白兵戦参加メンバーの初期化
CALL CC_INIT_MEMBER()

CALL ONE_SHIP_MEMBER_LIST(MEMBER_LIST, TARGET_SHIP)
MEMBER_COUNT = RESULT
SELECTCASE MEMBER_COUNT

;白兵戦メンバーセット
CASE 0
	CALL CC_ADDMOB("DEFENDER", "防衛ドローン", 2000, 2000, RAND(40, 50))
CASE IS <= 6
	FOR FOR_COUNT, 0, MEMBER_COUNT
		CALL CC_ADDCHARA("DEFENDER", MEMBER_LIST:FOR_COUNT)
	NEXT
CASE IS > 6
	FOR FOR_COUNT, 0, 6
		ADDCHARA_LISTNUM = RAND:MEMBER_COUNT
		CALL CC_ADDCHARA("DEFENDER", MEMBER_LIST:ADDCHARA_LISTNUM)	
		ARRAYREMOVE MEMBER_LIST, ADDCHARA_LISTNUM, 1
		MEMBER_COUNT--		
	NEXT
ENDSELECT

;--------------------------
;船長・船員としてその船に乗船中のキャラを返す関数
;LISTはMAX_CHARANUMと同じ数の要素数の一次元配列があれば安全(作成時点では乗員200人が最大っぽいのでMAX_CHARANUMを使うとだいぶ大きめ)
;--------------------------
@ONE_SHIP_MEMBER_LIST(MEMBER_LIST, SHIP_ID, MEMBER_COUNT = 0)
#DIM REF MEMBER_LIST
#DIM SHIP_ID

#DIM CHECK_ID
#DIM MEMBER_COUNT

FOR CHECK_ID, 0, CHARANUM
	;艦長かどうか
	IF BOARDING_SHIP_ID:CHECK_ID == SHIP_ID
		MEMBER_LIST:MEMBER_COUNT = CHECK_ID
		MEMBER_COUNT++
	;船員かどうか
	ELSEIF RIDING_WITH:CHECK_ID == SHIP_ID
		MEMBER_LIST:MEMBER_COUNT = CHECK_ID
		MEMBER_COUNT++
	ENDIF
NEXT
RETURN MEMBER_COUNT

;--------------------------
;船長・船員として乗船中のキャラ全てを1つのリストに入れて返す関数
;LISTの要素数を 「,MAX_SHIP ,MAX_CHARANUM」は無理(盛大に要素数が溢れる)ので適度な大きさで(MAX_SHIP=1500 の現状で666が上限→200人乗りのタイタン級があるのでMAX_SHIP=5000以上になった時には正常動作しないリスクが?)
;MEMBER_COUNTは「,MAX_SHIP」の要素数が必要
;--------------------------
@ALL_SHIP_MEMBER_LIST(MEMBER_LIST, MEMBER_COUNT)
#DIM REF MEMBER_LIST
#DIM REF MEMBER_COUNT
#DIM SHIP_ID
#DIM CHECK_ID

FOR CHECK_ID, 0, CHARANUM
	;艦長かどうか
	IF BOARDING_SHIP_ID:CHECK_ID != -1
		MEMBER_LIST:(MEMBER_COUNT:(BOARDING_SHIP_ID:CHECK_ID)) = CHECK_ID
		MEMBER_COUNT:(BOARDING_SHIP_ID:CHECK_ID)++
	;船員かどうか
	ELSEIF RIDING_WITH:CHECK_ID != -1
		MEMBER_LIST:(MEMBER_COUNT:(RIDING_WITH:CHECK_ID)) = CHECK_ID
		MEMBER_COUNT:(RIDING_WITH:CHECK_ID)++
	ENDIF
NEXT
;--------------------------
;白兵戦・連戦用の部分初期化関数(防戦)
;--------------------------
@CC_DEFENDER_CONTINUED_COMBAT
VARSET CC_ATTACKER_LIST, "-1"
FOR LOCAL, 0, FINDELEMENT(CC_DEFENDER_LIST, "-1")
	IF DIC_GET(CC_DEFENDER_LIST:LOCAL, "状態") != "戦闘不能"
		CC_DEFENDER_LIST:LOCAL = %DIC_SET(CC_DEFENDER_LIST:LOCAL, "状態", "待機")%
	ENDIF
NEXT

;--------------------------
;白兵戦・連戦用の部分初期化関数(攻撃戦)
;--------------------------
@CC_ATTACKER_CONTINUED_COMBAT
VARSET CC_DEFENDER_LIST, "-1"
FOR LOCAL, 0, FINDELEMENT(CC_ATTACKER_LIST, "-1")
	IF DIC_GET(CC_ATTACKER_LIST:LOCAL, "状態") != "戦闘不能"
		CC_ATTACKER_LIST:LOCAL = %DIC_SET(CC_ATTACKER_LIST:LOCAL, "状態", "待機")%
	ENDIF
NEXT

;---------------------------------
; キャラクター一覧取得
; 第一引数に渡したリストにキャラIDを、RESULT:0にリストの総数(第四引数に今回の一覧取得で追加した人数を足した値)を入れて返す
;---------------------------------
@GET_CHARACTER_LIST(RESULT_LIST, POS_ID = -1, COUNTRY_ID = -1, LIST_COUNT = 0)
#DIM REF RESULT_LIST
#DIM POS_ID
#DIM COUNTRY_ID

#DIM CHARA_ID
#DIM LIST_COUNT

FOR CHARA_ID, 0, MAX_CHARA_NUM
	; 指定地点に居る指定勢力のキャラをリストに入れる(指定地点が-1の時には地点に関係なく指定勢力のキャラ全てを・勢力が-1の時には勢力に関係なく指定地点にいるキャラ全てを取得する)
	IF (CHARACTER_POSITION:CHARA_ID == POS_ID || POS_ID == -1) && (CFLAG:CHARA_ID:所属 == COUNTRY_ID || COUNTRY_ID == -1)
		RESULT_LIST:LIST_COUNT = CHARA_ID
		LIST_COUNT++
	ENDIF
NEXT

RETURN LIST_COUNT


;--------------------------
;目星の達成値を返す
;--------------------------
@MESUGAKI_PIRATES_MEBOSHI_ACHIEVEMENT(CHARA_ID)
#DIM CHARA_ID
#DIM MEBOSHI_ACHIEVEMENT

MEBOSHI_ACHIEVEMENT = RAND(MAX(ABL:CHARA_ID:目星, 1))
PRINTFORML 目星達成値：{MEBOSHI_ACHIEVEMENT}
CALL PRINT_ADD_EXP(CHARA_ID, EXPNAME:(GET_EXP(GETNUM(ABL, "目星"))), 5, 1)
CALL TRAIN_AUTO_ABLUP(CHARA_ID)
RETURN MEBOSHI_ACHIEVEMENT

;--------------------------
;目星の担当者を返す
;--------------------------
@MESUGAKI_PIRATES_MEBOSHI_MANAGER
#DIM DYNAMIC CHARA_LIST, MAX_CHARA_NUM

CALL SELECT_CHARA_ANOMALY_6_MEBOSHI(CHARA_LIST)
RETURN RESULT

;--------------------------
; マップに設定したクエストのイベントフラグを解除する
; 特定セクターに限定して複数のポイントにクエストフラグを撒く際に不都合があった時の後始末用の機能限定化版
; @QUEST_RELEASE_POINT(QUEST_ID, SECTOR_ID )
; 	引数１： クエスト番号
; 	引数２： セクター番号
;--------------------------
@QUEST_RELEASE_SECTOR(QUEST_ID, SECTOR_ID)
#DIM QUEST_ID
#DIM SECTOR_ID
#DIM X_POS
#DIM Y_POS

COUNT = 0

FOR Y_POS, 0, MAP_HEIGHT
	FOR X_POS, 0, MAP_WIDTH
		IF QUESTMAP:SECTOR_ID:X_POS:Y_POS == QUEST_ID
			QUESTMAP:SECTOR_ID:X_POS:Y_POS = 0
		;; MAP上が空白セクターであれば戻す。
			SIF MAP:SECTOR_ID:X_POS:Y_POS == 11
				MAP:SECTOR_ID:X_POS:Y_POS = 1

			COUNT ++
		ENDIF
	NEXT
NEXT

;--------------------------
; 選択肢の総数を入れて呼ぶ事で範囲内の値が入力されるまでループさせる関数。
; 選択肢を選んで入力される数値が0からの連番である必要がある
; 選択肢ボタンの後ろで改行してないとボタンが削れるので注意
;--------------------------
@SERIAL_NUM_CHOICE_LOOPER(選択肢数)
#DIM 選択肢数
#DIM 入力前行数


$INPUT_LOOP
入力前行数 = LINECOUNT
INPUT
IF RESULT < 選択肢数
	RETURN RESULT
ENDIF
CLEARLINE LINECOUNT - 入力前行数
GOTO INPUT_LOOP

;--------------------------
; 白兵戦で変動したHPを(戦闘不能の場合は0を)キャラクターの体力に入れる関数
;--------------------------
@MESUGAKI_PIRATES_SET_CC_HP_FOR_BASE(VANGUARD_LIST)
#DIM REF VANGUARD_LIST
#DIM VANGUARD_NUM

FOR VANGUARD_NUM, 0, 6

	IF MESUGAKI_PIRATES_RELIGION_CC_MODE() == "DEFENDER"
		IF DIC_GET(CC_ATTACKER_LIST:VANGUARD_NUM, "状態") != "戦闘不能"
			BASE:(VANGUARD_LIST:VANGUARD_NUM):体力 = TOINT(DIC_GET(CC_ATTACKER_LIST:VANGUARD_NUM, "体力"))
		ELSE
			BASE:(VANGUARD_LIST:VANGUARD_NUM):体力 = 0
		ENDIF
	ELSE
		IF DIC_GET(CC_DEFENDER_LIST:VANGUARD_NUM, "状態") != "戦闘不能"
			BASE:(VANGUARD_LIST:VANGUARD_NUM):体力 = TOINT(DIC_GET(CC_DEFENDER_LIST:VANGUARD_NUM, "体力"))
		ELSE
			BASE:(VANGUARD_LIST:VANGUARD_NUM):体力 = 0
		ENDIF

	ENDIF
NEXT

;--------------------------
; キャラリスト表示(白兵値および現体力表示、戦闘不能キャラ非表示・登録済みキャラ色変え機能付き)
;--------------------------
@MESUGAKI_PIRATES_CC_CHARA_LIST_DISPLAY(CHARA_LIST, VANGUARD_LIST, LIST_SIZE, V_LIST_COUNT)
#DIM REF CHARA_LIST
#DIM REF VANGUARD_LIST
#DIM LIST_SIZE
#DIM REF V_LIST_COUNT

#DIM CHARA_NUM

;PRINTFORM V_LIST_COUNT{V_LIST_COUNT} VANGUARD_LIST
;FOR COUNT, 0, 6
;	PRINTFORM {VANGUARD_LIST:COUNT}　
;NEXT
;PRINTL

FOR CHARA_NUM, 0, LIST_SIZE
	IF BASE:(CHARA_LIST:CHARA_NUM):体力 > 0 || FINDELEMENT(VANGUARD_LIST, CHARA_LIST:CHARA_NUM) > -1
		IF FINDELEMENT(VANGUARD_LIST, CHARA_LIST:CHARA_NUM) > -1
			SETCOLOR カラー_選択中
		ELSEIF V_LIST_COUNT == 6
			SETCOLOR カラー_選択不可
		ENDIF
		PRINTBUTTON "[" + TOSTR(CHARA_NUM) + "]" + CALLNAME:(CHARA_LIST:CHARA_NUM) + " 白兵:" + TOSTR(ABL:(CHARA_LIST:CHARA_NUM):白兵) + " 残体力:" + TOSTR(BASE:(CHARA_LIST:CHARA_NUM):体力),CHARA_NUM
		PRINTL
		RESETCOLOR
	ENDIF

NEXT

PRINTL
PRINTBUTTON "[全解除]",9998
PRINTL
PRINTBUTTON "[決定]",9999
PRINTL

;--------------------------
;前衛リストへの登録・同リストからの削除
;--------------------------
@MESUGAKI_PIRATES_VANGUARD_LIST_CHOICE_PROCESSING(VANGUARD_LIST, CHARA_LIST, V_LIST_COUNT)
#DIM REF VANGUARD_LIST
#DIM REF CHARA_LIST
#DIM REF V_LIST_COUNT
#DIM 入力前行数

入力前行数 = LINECOUNT
WHILE 1
INPUT
	SELECTCASE RESULT
		CASE 9998
		;リストのリセット
			VARSET VANGUARD_LIST, -1
			V_LIST_COUNT = 0
			RETURN 1
		CASE 9999
		; リスト編成完了
			IF V_LIST_COUNT == 0
				PRINTW 前衛を設定してください。
				RETURN 1
			ENDIF
			FOR COUNT, 0, V_LIST_COUNT
				IF BASE:(VANGUARD_LIST:COUNT):体力 > 0
					RETURN 9999
				ENDIF
			NEXT
			PRINTW 前衛全員に体力がありません。
			RETURN 1
		CASE IS < 0
			; キャラの範囲外
			CLEARLINE LINECOUNT - 入力前行数
			CONTINUE
		CASE IS >= CHARANUM
			; キャラの範囲外
			CLEARLINE LINECOUNT - 入力前行数
			CONTINUE
		CASEELSE
			IF FINDELEMENT(VANGUARD_LIST, CHARA_LIST:RESULT) > -1
				; 登録済みならリストから消す
				FOR COUNT, 0, 6
					IF VANGUARD_LIST:COUNT == CHARA_LIST:RESULT
						ARRAYREMOVE VANGUARD_LIST, COUNT, 1
						VANGUARD_LIST:5 = -1
						V_LIST_COUNT--
						BREAK
						ENDIF
				NEXT

			ELSEIF BASE:(CHARA_LIST:RESULT):体力 <= 0
				;体力不足
				CLEARLINE LINECOUNT - 入力前行数
				CONTINUE
			ELSE
				; リストにないならリストに追加する
				IF V_LIST_COUNT < 6
					VANGUARD_LIST:V_LIST_COUNT == CHARA_LIST:RESULT
					V_LIST_COUNT++
				ENDIF
			ENDIF
			RETURN 1
	ENDSELECT
WEND

;--------------------------
; 脱出シーンの描写
;--------------------------
@MESUGAKI_PIRATES_BASE_ESCAPE
#DIM P_SHIP_LIST,MAX_SHIP
#DIM SHIP_COUNT
#DIM SHIP_ID

#DIM WEAPON_STATUS,STATUS_LENGTH


VARSET P_SHIP_LIST, -1

CALL GET_SHIP_LIST(P_SHIP_LIST, CHARACTER_POSITION:MASTER, 国家ID_プレイヤー)
SHIP_COUNT = RESULT

CALL NUM_ARRAY_SHUFFLE(P_SHIP_LIST, SHIP_COUNT - 1)

RESULTS '= SHIP_NAME:(SHIP_LIST:0) + "による体当たり"

;プレイヤー船の主砲スロット0の武器が攻撃能力を持っていたらフレーバーにそれを入れる
FOR COUNT, 0, SHIP_COUNT
	VARSET WEAPON_STATUS, -1
	TRYCCALLFORM GET_MAIN_WEAPON_STATUS_{SHIP_EQUIP:主砲:0:(P_SHIP_LIST:COUNT)}(WEAPON_STATUS)
		IF WEAPON_STATUS:DAMAGE > 0
			TRYCALLFORM GET_MAIN_WEAPON_NAME_{SHIP_EQUIP:主砲:0:(P_SHIP_LIST:COUNT)}
			RESULTS '= SHIP_NAME:(P_SHIP_LIST:COUNT) + "の" + RESULTS
			SELECTCASE WEAPON_STATUS:WEAPON_TYPE
				CASE 艦載機
					RESULTS '= RESULTS + "による航空攻撃"
				CASE ミサイル
					RESULTS '= RESULTS + "によるミサイル爆撃"
				CASE 魚雷
					RESULTS '= RESULTS + "による雷撃"

				CASE 実体弾_自爆, レーザー_自爆, ミサイル_自爆, 艦載機_自爆, 魚雷_自爆, ビーム_自爆
					; (自爆武器を使える様になったとしても)フレーバーメッセージで自爆武器を使った扱いで自爆させる(orメッセージと違って自爆してない)のは難なので無かった事に
					RESULTS '= SHIP_NAME:(P_SHIP_LIST:0) + "による体当たり"
					CONTINUE
				CASEELSE
					RESULTS '= RESULTS + "による砲撃"
			ENDSELECT
			BREAK
		ENDIF
	CATCH
	ENDCATCH
NEXT

PRINTFORM %CALLNAME:MASTER%は

PRINTDATA
	DATA 高速垂直マスドライバー射出される事で
	DATA メスガキ短艇を用いて
	DATAFORM %RESULTS%で外壁に穴を開けて

ENDDATA

PRINTW メスガキ基地から脱出した

;--------------------------
; リストと人数を貰ってきて白兵戦用にキャラを登録する関数
;--------------------------
@MESUGAKI_PIRATES_RELIGION_CC_P_CHARA_INPUT(VANGUARD_LIST, V_LIST_COUNT)
#DIM REF VANGUARD_LIST
#DIM V_LIST_COUNT

IF MESUGAKI_PIRATES_RELIGION_CC_MODE() == "DEFENDER"
		FOR COUNT, 0, V_LIST_COUNT
		IF BASE:(VANGUARD_LIST:COUNT):体力 == 0
			CONTINUE
		ENDIF
		CALL CC_ADDCHARA("ATTACKER", VANGUARD_LIST:COUNT)
	NEXT
ELSE
	FOR COUNT, 0, V_LIST_COUNT
		IF BASE:(VANGUARD_LIST:COUNT):体力 == 0
			CONTINUE
		ENDIF
		CALL CC_ADDCHARA("DEFENDER", VANGUARD_LIST:COUNT)
	NEXT
ENDIF

;--------------------------
;タイピングしてるみたいに文字を連続的に表示するやつ
;--------------------------
@TYPING_LIKE_PRINTL(DISPLAY_TEXT, DISPLAY_MS = 30, DISPLAY_ALIGN = 0, WORDBOX_DIGIT = 0)
#DIMS DISPLAY_TEXT
#DIMS SUBS_TEXT

#DIM DISPLAY_MS
#DIM WORDBOX_DIGIT
#DIM DISPLAY_COUNTER
#DIM BASE_LINE

#DIM DISPLAY_ALIGN

BASE_LINE = LINECOUNT

;SUBS_TEXT '=""

DISPLAY_COUNTER = 1

IF DISPLAY_ALIGN == 0
	DO
		CLEARLINE LINECOUNT - BASE_LINE
		SUBS_TEXT '= SUBSTRINGU(DISPLAY_TEXT, 0, DISPLAY_COUNTER)
		PRINTFORML %SUBS_TEXT,WORDBOX_DIGIT,RIGHT%
		TWAIT DISPLAY_MS, 1
		DISPLAY_COUNTER++
	LOOP DISPLAY_TEXT != SUBS_TEXT
ELSE
	DO
		CLEARLINE LINECOUNT - BASE_LINE
		SUBS_TEXT '= SUBSTRINGU(DISPLAY_TEXT, 0, DISPLAY_COUNTER)
		PRINTFORML %SUBS_TEXT,WORDBOX_DIGIT,LEFT%
		TWAIT DISPLAY_MS, 1
		DISPLAY_COUNTER++
	LOOP DISPLAY_TEXT != SUBS_TEXT

ENDIF


;--------------------------
;指定した座標に居る指定勢力の船全てに指定IDのドクトリンを設定する
;--------------------------
@SET_DOCTRINE_FOR_POS(SET_POSITION, COUNTRY_ID, DOCTRINE_ID)
#DIM SET_POSITION
#DIM COUNTRY_ID
#DIM DOCTRINE_ID
#DIM LIST_COUNT

#DIM SUBJECT_SHIP_LIST, MAX_SHIP

VARSET SUBJECT_SHIP_LIST, -1

CALL GET_SHIP_LIST(SUBJECT_SHIP_LIST, SET_POSITION, COUNTRY_ID)
LIST_COUNT = RESULT

CALL SET_DOCTRINE_FOR_LIST(SUBJECT_SHIP_LIST, LIST_COUNT, DOCTRINE_ID)

RETURN

;--------------------------
;渡されたリストの船全てに指定IDのドクトリンを設定する
; (リスト全てが埋まっているとは限らない(むしろどちらかで言えば例外的な)のでLIST_COUNTで有効リスト長を貰う)
;--------------------------
@SET_DOCTRINE_FOR_LIST(SUBJECT_LIST, LIST_COUNT, DOCTRINE_ID)
#DIM REF SUBJECT_LIST
#DIM LIST_COUNT
#DIM DOCTRINE_ID

FOR COUNT, 0, LIST_COUNT
	RECIEVED_DOCTRINE:(SUBJECT_LIST:COUNT) = DOCTRINE_ID
NEXT

RETURN
