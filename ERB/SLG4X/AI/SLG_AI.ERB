;--------------------------
; AI
;--------------------------
@SLG_AI
#DIM SECTOR_ID
#DIM POS_X
#DIM POS_Y
#DIM ITER
#DIM CHECKED_MAP, MAX_SECTOR, MAP_WIDTH, MAP_HEIGHT
#DIM SHIP_ID

; 各国の挙動
FOR ITER, 1, MAX_COUNTRY
    SELECTCASE ITER
        CASE 1
            CALL SLG_AI_ACTION_1
        CASE 2
            CALL SLG_AI_ACTION_2
        CASE 3
            CALL SLG_AI_ACTION_3
        CASE 4
            CALL SLG_AI_ACTION_4
        CASE 5
            CALL SLG_AI_ACTION_5
        CASE 6
            CALL SLG_AI_ACTION_6
        CASE 10
            CALL SLG_AI_ACTION_10
        CASE 11
            CALL SLG_AI_ACTION_11
        CASE 12
            CALL SLG_AI_ACTION_12
    ENDSELECT
NEXT

CALL COMMON_AI_ACTION

VARSET CHECKED_MAP
; 交戦
FOR ITER, 0, MAX_SHIP
    SIF SHIP_COUNTRY:ITER == 0
        CONTINUE
    CALL ID2POS(SHIP_POSITION:ITER)
    SECTOR_ID = RESULT:0
    POS_X = RESULT:1
    POS_Y = RESULT:2
    ; ここに他マス攻撃処理を入れる
    ;GETBIT OTHER_GRID_ATTACK_FLAG:SECTOR_ID:POS_X:POS_Y, SHIP_COUNTRY:ITER
    ;PRINTFORML OTHER_GRID_ATTACK_FLAG:{SECTOR_ID}:{POS_X}:{POS_Y}の{SHIP_COUNTRY:ITER}番勢力のフラグは{RESULT}です
    IF GETBIT(OTHER_GRID_ATTACK_FLAG:SECTOR_ID:POS_X:POS_Y, SHIP_COUNTRY:ITER) == 1
        PRINTL 他マス攻撃処理中です
        ; フラグが立ってる勢力だったらフラグを消しつつ、他マス攻撃対象を探して攻撃
        CLEARBIT OTHER_GRID_ATTACK_FLAG:SECTOR_ID:POS_X:POS_Y, SHIP_COUNTRY:ITER
        CALL ENEMY_COUNTRY_BITWISE_OPERATION(SHIP_COUNTRY:ITER)
        ; 敵対勢力にフラグを立てる関数のリザルトで敵対勢力の1マス以遠の近傍船を出す
        CALL SHIP_SECTOR_CACHED_NEAREST_SHIP_CHECK(SHIP_POSITION:ITER, RESULT, 1)
        SHIP_ID = RESULT
        ;攻撃が成立するかを確認
        CALL IS_OTHER_GRID_ATTACK_GOING(SHIP_POSITION:ITER, SHIP_POSITION:SHIP_ID, SHIP_COUNTRY:ITER)
        IF RESULT >= 4
            CALL OTHER_GRID_TARGETING(SHIP_POSITION:ITER,  SHIP_POSITION:SHIP_ID, SHIP_COUNTRY:ITER, RESULT)
        ENDIF
    ENDIF
    ; ここまで他マス攻撃処理を入れる
    ; チェック済みのエリアは弾く
    SIF CHECKED_MAP:SECTOR_ID:POS_X:POS_Y == 1
        CONTINUE
    CALL COMBAT(SHIP_POSITION:ITER)
    CHECKED_MAP:SECTOR_ID:POS_X:POS_Y = 1
NEXT
CALL RETIRE_BROKEN_SHIP

;--------------------------
; AI ACTION プレイヤー勢力
;--------------------------
@SLG_AI_ACTION_1
#DIM STAR_ID
#DIM SHIP_ID
#DIM ITER, 2
#DIM FOLLOWING_SHIPS, MAX_SHIP
#DIM CONST COUNTRY_ID = 1
#DIM SECTOR_ID
#DIM X_POS
#DIM Y_POS
#DIM ITEM_COUNT

;--------------------------
; AIの共通処理
;--------------------------
@COMMON_AI_ACTION
#DIM CONST MISSION_INCOMPLETE = 0
#DIM CONST MISSION_COMPLETED = 1

#DIM COUNTRY_ID
#DIM ITER
#DIM STAR_ID
#DIM SHIP_ID, MAX_SHIP
#DIM NEW_SHIP_LIST, MAX_SHIP
#DIM SHIP_CATEGORY_ITER
#DIM SHIP_CHECK_LIST, MAX_SHIP
#DIM パトロール中, MAX_STAR
#DIM DUMMY
#DIM ITEM_ID
#DIM ITEM_COUNT
#DIM FOLLOW_SHIP_ID


VARSET パトロール中, 0
VARSET SHIP_CHECK_LIST, MISSION_INCOMPLETE
FOR SHIP_ID, 0, MAX_SHIP
    SIF SHIP_CHECK_LIST:SHIP_ID == MISSION_COMPLETED
        CONTINUE
    SIF SHIP_CATEGORY:SHIP_ID == 建造物 && (SHIP_MISSION:SHIP_ID == 移動 || SHIP_MISSION:SHIP_ID == パトロール || SHIP_MISSION:SHIP_ID == 追従 || SHIP_MISSION:SHIP_ID == 交易 || SHIP_MISSION:SHIP_ID == 輸送 || SHIP_MISSION:SHIP_ID == 採掘)
        SHIP_MISSION:SHIP_ID = 待機
    IF SHIP_MISSION:SHIP_ID == 待機
        SHIP_CHECK_LIST:SHIP_ID = MISSION_COMPLETED
        CONTINUE
    ENDIF
    ; 旗艦のタスクが未完了の場合、旗艦の行動を優先する
    FOLLOW_SHIP_ID = SHIP_FOLLOW:SHIP_ID
    IF SHIP_MISSION:SHIP_ID == 追従 && SHIP_CHECK_LIST:FOLLOW_SHIP_ID == MISSION_INCOMPLETE
        CALL DO_SELF_MISSION(FOLLOW_SHIP_ID)
        SHIP_CHECK_LIST:FOLLOW_SHIP_ID = MISSION_COMPLETED
    ENDIF
    CALL DO_SELF_MISSION(SHIP_ID)
    SHIP_CHECK_LIST:SHIP_ID = MISSION_COMPLETED
NEXT

; 星単位の処理(一週間に一回)
IF DAY % ONE_WEEK == 0
; 星ごとの民需生産と消費(一週間単位で実施)
    FOR STAR_ID, 0, MAX_STAR
        CALL PRICATE_PRODUCTION(STAR_ID)
        CALL PRIVATE_DEMAND(STAR_ID)
        ; 加工品のリソースを見て必要量より不足していたら工場経由で補給を試みる
        COUNTRY_ID = STAR_OWNER:STAR_ID
        FOR ITEM_ID, 10, 22
            LOCAL = STOCK_TARGET - GET_RESOURCE_NUM(STAR_POSITION_ID:STAR_ID, COUNTRY_ID, ITEM_ID)
            SIF LOCAL > 0
                CALL AUTO_PROCESSING(STAR_ID, COUNTRY_ID, ITEM_ID, LOCAL)
        NEXT
        ;採掘 三週間に一度判定と実行を行う
        SIF DAY % (ONE_WEEK * 3) == 0
            CALL AI_AUTO_MINING(STAR_ID)
    NEXT
    ; 装備更新は8週に1度,1惑星ずつ実施。一括処理に比べ負荷分散できるが公平性が損なわれる
    ; プレイヤーが複数の惑星を保有し、プレイヤー保有惑星にもなんらかの処理を加える場合は
    ; 国家ID_プレイヤーの惑星だけは例外的に一括処理したほうがよいと思われる
    IF DAY % (ONE_WEEK * 8) == 0
        CALL AI_ARMED_BUILDUP(BUILDUP_TARGET_STAR_ID)
        BUILDUP_TARGET_STAR_ID ++
        SIF BUILDUP_TARGET_STAR_ID >= MAX_STAR
            BUILDUP_TARGET_STAR_ID = 0
    ENDIF
ENDIF
;CALL AI_AUTO_MINING(COUNTRY_ID)

;--------------------------
; 割り振られたタスクの実行
;--------------------------
@DO_SELF_MISSION(SHIP_ID)
#DIM SHIP_ID
#DIM ITEM_COUNT
#DIM ITEM_ID

SELECTCASE SHIP_MISSION:SHIP_ID
    CASE パトロール
        CALL PATROL(SHIP_ID)
    CASE 追従
        CALL MOVE_SHIP(SHIP_POSITION:(SHIP_FOLLOW:SHIP_ID), SHIP_ID)
    CASE 移動
        CALL MOVE_SHIP(MOVING_POS:SHIP_ID, SHIP_ID)
        IF RESULT == 1
            SHIP_MISSION:SHIP_ID = 待機
            IF SHIP_COUNTRY:SHIP_ID == 国家ID_プレイヤー
                CALL ID2POS(MOVING_POS:SHIP_ID)
                SETCOLOR 0XFFFF00
                PRINTFORML [INFO] %SHIP_NAME:SHIP_ID%の移動任務完了(X: {RESULT:1}, Y: {RESULT:2})
                RESETCOLOR
            ENDIF
            SIF SHIP_ID == BOARDING_SHIP_ID:MASTER
                FORCEWAIT
        ENDIF
    CASE 採掘
        IF MOVING_POS:SHIP_ID == SHIP_POSITION:SHIP_ID
            CALL ID2POS(SHIP_POSITION:SHIP_ID)
            IF MAP:RESULT:(RESULT:1):(RESULT:2) == 資源
                CALL MINING(MOVING_POS:SHIP_ID, SHIP_COUNTRY:SHIP_ID)
                SIF RESULT != 1
                    SWAP MOVING_POS:SHIP_ID, FROM_POS:SHIP_ID
            ELSE
                IF FINDELEMENT(STAR_POSITION_ID, SHIP_POSITION:SHIP_ID) != -1
                    FOR ITEM_ID, 0, ITEM_LENGTH
                        ITEM_COUNT = GET_RESOURCE_NUM_FROM_CARGO_SHIP(SHIP_POSITION:SHIP_ID, SHIP_COUNTRY:SHIP_ID, ITEM_ID)
                        SIF ITEM_COUNT > 0
                            CALL AUTO_SALE(SHIP_POSITION:SHIP_ID, SHIP_COUNTRY:SHIP_ID, STAR_OWNER:LOCAL, ITEM_ID, ITEM_COUNT)
                    NEXT
                    SWAP MOVING_POS:SHIP_ID, FROM_POS:SHIP_ID
                ELSEIF FINDELEMENT(PORT_POSITION_ID, SHIP_POSITION:SHIP_ID) != -1
                    FOR ITEM_ID, 0, ITEM_LENGTH
                        ITEM_COUNT = GET_RESOURCE_NUM_FROM_CARGO_SHIP(MOVING_POS:SHIP_ID, SHIP_COUNTRY:SHIP_ID, ITEM_ID)
                        SIF ITEM_COUNT > 0
                            CALL AUTO_SALE(MOVING_POS:SHIP_ID, SHIP_COUNTRY:SHIP_ID, PORT_OWNER:LOCAL, ITEM_ID, ITEM_COUNT)
                    NEXT
                    SWAP MOVING_POS:SHIP_ID, FROM_POS:SHIP_ID
                ENDIF
            ENDIF
        ELSE
            CALL MOVE_SHIP(MOVING_POS:SHIP_ID, SHIP_ID)
        ENDIF
    CASE 交易
        IF MOVING_POS:SHIP_ID == SHIP_POSITION:SHIP_ID
            CALL TRADE(SHIP_ID)
        ELSE
            CALL MOVE_SHIP(MOVING_POS:SHIP_ID, SHIP_ID)
        ENDIF
    CASE 遠隔攻撃
        ; SHIP_POSITION:SHIP_IDの地点に・SHIP_COUNTRY:SHIP_IDの勢力の遠隔攻撃フラグ実行フラグをを立てる
        CALL ID2POS(SHIP_POSITION:SHIP_ID)
        SETBIT OTHER_GRID_ATTACK_FLAG:(RESULT:0):(RESULT:1):(RESULT:2), SHIP_COUNTRY:SHIP_ID
    CASE 子機射出, 子機継続射出
        TRYCCALLFORM CHILD_DEVICE_DETAIL_{SHIP_COUNTRY:SHIP_ID}(SHIP_ID)
        CATCH
            RESULT = -1
        ENDCATCH
    ;射出成功かつ連続射出ではないのなら待機へ
        SIF SHIP_MISSION:SHIP_ID == 子機射出 && RESULT == 1
            SHIP_MISSION:SHIP_ID = 待機
ENDSELECT


;--------------------------
; 自拠点の周りにパトロール軍を出す
;--------------------------
@PATROL(SHIP_ID)
#DIM SHIP_ID
#DIM SECTOR_ID
#DIM CENTER_POS_X
#DIM CENTER_POS_Y
#DIM SHIP_POS_X
#DIM SHIP_POS_Y

; もし対象惑星あるいは対象宇宙港が見つからなかった場合エラー
IF FINDELEMENT(STAR_POSITION_ID, SHIP_PATROL:SHIP_ID) == -1 && FINDELEMENT(PORT_POSITION_ID, SHIP_PATROL:SHIP_ID) == -1
    IF SHIP_COUNTRY:SHIP_ID == 国家ID_プレイヤー
        SETCOLOR 0XFF0000
        PRINTFORML [%SHIP_NAME:SHIP_ID%:AI] 異常事態を検知 パトロール対象の惑星反応をロストしました
        PRINTFORMW [%SHIP_NAME:SHIP_ID%:AI] 安全を考慮しパトロール任務を終了 待機モードに移行します
        RESETCOLOR
    ENDIF
    SHIP_MISSION:SHIP_ID = 待機
    RETURN
ENDIF

CALL ID2POS(SHIP_PATROL:SHIP_ID)
SECTOR_ID = RESULT:0
CENTER_POS_X = RESULT:1
CENTER_POS_Y = RESULT:2

CALL ID2POS(SHIP_POSITION:SHIP_ID)
SHIP_POS_X = RESULT:1
SHIP_POS_Y = RESULT:2
IF CENTER_POS_X == SHIP_POS_X && CENTER_POS_Y == SHIP_POS_Y
    CALL POS2ID(SECTOR_ID, CENTER_POS_X, CENTER_POS_Y - 1)
    CALL MOVE2POS(RESULT, SHIP_ID)
ELSEIF CENTER_POS_X == SHIP_POS_X && CENTER_POS_Y - 1 == SHIP_POS_Y
    CALL POS2ID(SECTOR_ID, CENTER_POS_X + 1, CENTER_POS_Y - 1)
    CALL MOVE2POS(RESULT , SHIP_ID)
ELSEIF CENTER_POS_X + 1 == SHIP_POS_X && CENTER_POS_Y - 1 == SHIP_POS_Y
    CALL POS2ID(SECTOR_ID, CENTER_POS_X + 1, CENTER_POS_Y)
    CALL MOVE2POS(RESULT, SHIP_ID)
ELSEIF CENTER_POS_X + 1 == SHIP_POS_X && CENTER_POS_Y == SHIP_POS_Y
    CALL POS2ID(SECTOR_ID, CENTER_POS_X + 1, CENTER_POS_Y + 1)
    CALL MOVE2POS(RESULT, SHIP_ID)
ELSEIF CENTER_POS_X + 1 == SHIP_POS_X && CENTER_POS_Y + 1 == SHIP_POS_Y
    CALL POS2ID(SECTOR_ID, CENTER_POS_X, CENTER_POS_Y + 1)
    CALL MOVE2POS(RESULT, SHIP_ID)
ELSEIF CENTER_POS_X == SHIP_POS_X && CENTER_POS_Y + 1 == SHIP_POS_Y
    CALL POS2ID(SECTOR_ID, CENTER_POS_X - 1, CENTER_POS_Y + 1)
    CALL MOVE2POS(RESULT, SHIP_ID)
ELSEIF CENTER_POS_X - 1 == SHIP_POS_X && CENTER_POS_Y + 1 == SHIP_POS_Y
    CALL POS2ID(SECTOR_ID, CENTER_POS_X - 1, CENTER_POS_Y)
    CALL MOVE2POS(RESULT, SHIP_ID)
ELSEIF CENTER_POS_X - 1 == SHIP_POS_X && CENTER_POS_Y == SHIP_POS_Y
    CALL POS2ID(SECTOR_ID, CENTER_POS_X - 1, CENTER_POS_Y - 1)
    CALL MOVE2POS(RESULT, SHIP_ID)
ELSEIF CENTER_POS_X - 1 == SHIP_POS_X && CENTER_POS_Y - 1 == SHIP_POS_Y
    CALL POS2ID(SECTOR_ID, CENTER_POS_X, CENTER_POS_Y - 1)
    CALL MOVE2POS(RESULT, SHIP_ID)
ENDIF
;--------------------------
; 移動
;--------------------------
@MOVE2POS(POSID, SHIP_ID)
#DIM POSID
#DIM SECTOR_ID
#DIM POS_X
#DIM POS_Y
#DIM SHIP_ID
#DIM X_DIFF
#DIM Y_DIFF
CALL ID2POS(POSID)
SECTOR_ID = RESULT:0
POS_X = RESULT:1
POS_Y = RESULT:2

CALL ID2POS(SHIP_POSITION:SHIP_ID)
X_DIFF = RESULT:1
Y_DIFF = RESULT:2

ABS (X_DIFF - POS_X)
X_DIFF = RESULT

ABS (Y_DIFF - POS_Y)
Y_DIFF = RESULT

IF X_DIFF + Y_DIFF > 1
    THROW 移動可能距離を超えて移動しようとしました
ELSE
    CALL POS2ID(SECTOR_ID, POS_X, POS_Y)
    SHIP_POSITION:SHIP_ID = RESULT
ENDIF

;--------------------------
; 海賊の攻撃判定
;--------------------------
@IS_PIRATE_ATTACK(ARG:0, ARG:1, ARG:2)
#DIM SHIP_LIST_SIZE
#DIM POSID
#DIM 艦種
#DIM ITER

SHIP_LIST_SIZE = 0

CALL POS2ID(ARG:0, ARG:1, ARG:2)
POSID = RESULT

FOR ITER, 0, MAX_SHIP
    SIF SHIP_COUNTRY:ITER == 国家ID_一般海賊
        CONTINUE
    IF SHIP_POSITION:ITER == POSID && SHIP_COUNTRY:ITER > 0
        SHIP_LIST:SHIP_LIST_SIZE = ITER
        SHIP_LIST_SIZE += 1
    ENDIF
NEXT

SIF SHIP_LIST_SIZE == 0
    RETURN 0
; 敵に戦闘艦が含まれていなければ襲う
FOR ITER, 0, SHIP_LIST_SIZE
    艦種 = SHIP_CATEGORY:(SHIP_LIST:ITER)
    SIF 艦種 == フリゲート || 艦種 == コルベット || 艦種 == 駆逐艦 || 艦種 == 巡洋艦 || 艦種 == 戦艦 || 艦種 == 空母
        RETURN 0
NEXT
RETURN 1

; 海賊の撤退
@ESCAPE_PIRATE
#DIM SHIP_ID
FOR SHIP_ID, 0, MAX_SHIP
    SIF SHIP_COUNTRY:SHIP_ID != 国家ID_一般海賊
        CONTINUE
    CALL GET_SHIP_TOTAL_HP(SHIP_ID)
    SIF RESULT < SHIP_DAMAGE:SHIP_ID / 2 * 3
        SHIP_DAMAGE:SHIP_ID = RESULT
NEXT

;--------------------------
; 自動採掘
;--------------------------
@AI_AUTO_MINING(PORT_ID)
#DIM COUNTRY_ID
#DIM PORT_ID
#DIM ITEM_ID
#DIM SHIP_ID
#DIM SECTOR_ID
#DIM X_POS
#DIM Y_POS
#DIM NEW_ID
#DIM 作業船ID
#DIM 輸送船ID
#DIM DYNAMIC 採掘ポイント
#DIM DUMMY
#DIM STAR_POS_ID

COUNTRY_ID = STAR_OWNER:PORT_ID
STAR_POS_ID = STAR_POSITION_ID:PORT_ID
; 採掘地点を探す
FOR ITEM_ID, 0, 9
    ; リソースが十分な時
    IF GET_RESOURCE_NUM(STAR_POS_ID, STAR_OWNER:PORT_ID, ITEM_ID) >= STOCK_TARGET
        ; まだ採掘していたら自動採掘解除
        IF (MINING_SHIP_ID:PORT_ID:ITEM_ID:0) >= 0 && SHIP_MISSION:(MINING_SHIP_ID:PORT_ID:ITEM_ID:0) == 採掘
            SHIP_MISSION:(MINING_SHIP_ID:PORT_ID:ITEM_ID:0) = 移動
            MOVING_POS:(MINING_SHIP_ID:PORT_ID:ITEM_ID:0) = STAR_POS_ID
            SHIP_MISSION:(MINING_SHIP_ID:PORT_ID:ITEM_ID:1) = 移動
            MOVING_POS:(MINING_SHIP_ID:PORT_ID:ITEM_ID:1) = STAR_POS_ID
        ENDIF
        CONTINUE
    ENDIF
    ; リソース不足の時
    ; 採掘中だったら
    IF (MINING_SHIP_ID:PORT_ID:ITEM_ID:0) >= 0 && SHIP_MISSION:(MINING_SHIP_ID:PORT_ID:ITEM_ID:0) != 待機
        CONTINUE
    ; 採掘してなかったら
    ELSE
        CALL ID2POS(STAR_POS_ID)
        SECTOR_ID = RESULT:0
        ; 最寄りの採掘ポイント取得
        CALL GET_NEAREST_MINING_POINT(SECTOR_ID, ITEM_ID)
        採掘ポイント = RESULT

        ; 空いている輸送船と作業船を探索
        輸送船ID = -1
        作業船ID = -1
        FOR SHIP_ID, 0, MAX_SHIP
            SIF SHIP_COUNTRY:SHIP_ID != COUNTRY_ID
                CONTINUE
            IF SHIP_CATEGORY:SHIP_ID == 作業船 && SHIP_MISSION:SHIP_ID == 待機
                作業船ID = SHIP_ID
                CONTINUE
            ELSEIF SHIP_CATEGORY:SHIP_ID == 輸送船 && SHIP_MISSION:SHIP_ID == 待機
                輸送船ID = SHIP_ID
                CONTINUE
            ENDIF
        NEXT
        ; 空いている輸送船がいない場合は、輸送船建造を試みる
        IF 輸送船ID == -1
            CALL BUILD_SHIP(STAR_POS_ID, COUNTRY_ID, COUNTRY_ID, 汎用輸送船, "汎用輸送船", DUMMY)
            CONTINUE
        ENDIF
        ; 空いている作業船がいない場合は、作業船建造を試みる
        IF 作業船ID == -1
            CALL BUILD_SHIP(STAR_POS_ID, COUNTRY_ID, COUNTRY_ID, 汎用作業船, "汎用作業船", DUMMY)
            CONTINUE
        ENDIF
        ; 両方とも揃っているなら、採掘タスクを割り振る
        SHIP_MISSION:作業船ID = 採掘
        MOVING_POS:作業船ID = 採掘ポイント
        FROM_POS:作業船ID = STAR_POS_ID
        SHIP_MISSION:輸送船ID = 追従
        SHIP_FOLLOW:輸送船ID = 作業船ID
        MINING_SHIP_ID:PORT_ID:ITEM_ID:0 = 作業船ID
        MINING_SHIP_ID:PORT_ID:ITEM_ID:0 = 輸送船ID
    ENDIF
NEXT

;--------------------------
; 軍備増強
;--------------------------
@AI_ARMED_BUILDUP(STAR_ID)
#DIM STAR_ID

TRYCALLFORM AI_ARMED_BUILDUP_{STAR_OWNER:STAR_ID}(STAR_ID)
