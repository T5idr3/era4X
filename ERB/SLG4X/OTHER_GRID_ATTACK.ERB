;---------------------------------
; SLG COMBAT改造・他マス攻撃
;---------------------------------

;---------------------------------
; 他マス攻撃準備
;---------------------------------
; 複数のマスが関わるのでIDを2つにする
; 明確に攻撃側・防御側が出来るのでBATTLE_COUNTRYの(:0)と(:1)をATTACK_SIDEとDEFENSE_SIDEに置き換え
; マスを跨いでの移動・反撃はSLGターンを使ってやるべき行動なので他マス攻撃は一方的な攻撃に
@OTHER_GRID_TARGETING(ID_1, ID_2, ATTACK_SIDE, POS_RANGE)
#DIM ID_1
#DIM ID_2
#DIM COUNTRY_LIST, MAX_COUNTRY
#DIM COUNTRY_LIST_SUB, MAX_COUNTRY
#DIM COUNTRY_LIST_LENGTH
#DIM ATTACK_SIDE
#DIM DEFENSE_SIDE
#DIM POS_RANGE

VARSET COUNTRY_LIST
VARSET COUNTRY_LIST_SUB
COUNTRY_LIST_LENGTH = 0

; 攻撃目標が1隻以上居ないなら戦闘の余地無しで終わらせる(攻撃側は攻撃能力の確認とかを別途受けさせてからこれを呼ぶものとする)
CALL GET_SHIP_LIST_FROM_POS(ID_2)
SIF SHIP_LIST_LENGTH < 1
	RETURN -1

; 参加国の設定(防御側)
; ID_2で探した船のリストは健在(のはず)なのでそれを利用する
FOR LOCAL, 0, SHIP_LIST_LENGTH
	COUNTRY_LIST_SUB:(SHIP_COUNTRY:(SHIP_LIST:LOCAL)) = SHIP_COUNTRY:(SHIP_LIST:LOCAL)
NEXT
FOR LOCAL, 0, MAX_COUNTRY
	SIF COUNTRY_LIST_SUB:LOCAL == 0
		CONTINUE
	; 攻撃側勢力なら次周へ
	SIF COUNTRY_LIST_SUB:LOCAL == ATTACK_SIDE
		CONTINUE
	COUNTRY_LIST:COUNTRY_LIST_LENGTH = COUNTRY_LIST_SUB:LOCAL
	COUNTRY_LIST_LENGTH += 1
NEXT

; 防御側が1ヵ国未満なら終了
SIF COUNTRY_LIST_LENGTH < 1
	RETURN -1

; 互いの好感度を見て交戦判定
; 同勢力での戦闘が無いと想定
FOR DEFENSE_SIDE, 0, COUNTRY_LIST_LENGTH
	;ATTACK_SIDE: 勢力A, DEFENSE_SIDE: 勢力B
	IF REL_LIKE_COUNTRY:ATTACK_SIDE:(COUNTRY_LIST:DEFENSE_SIDE) <= -1000 || REL_LIKE_COUNTRY:(COUNTRY_LIST:DEFENSE_SIDE):ATTACK_SIDE <= -1000
		CALL OTHER_GRID_ATTACK(ATTACK_SIDE, COUNTRY_LIST:DEFENSE_SIDE, ID_1, ID_2, POS_RANGE)
		SIF COUNTRY_LIST:DEFENSE_SIDE == 10
			CALL ESCAPE_PIRATE
	ELSE
		RETURN -1		
	ENDIF
NEXT

;他マス攻撃を終えたので1を返す(プレイヤー時のターン終了等に必要)
RETURN 1

@OTHER_GRID_ATTACK(COUNTRY_1, COUNTRY_2, POSID_1, POSID_2, ATTACK_RANGE, ATTACK_TRUN_LENGTH = 3, WATCH = 0)
#DIM COUNTRY_1
#DIM COUNTRY_2
#DIM POSID_1
#DIM POSID_2
#DIM SHIP_LIST1, MAX_SHIP
#DIM SHIP_LIST2, MAX_SHIP
#DIM SHIP_LIST1_COUNT
#DIM SHIP_LIST2_COUNT
#DIM DISPLAY_UI
#DIM DISTANCE, MAX_SHIP
#DIM SHIP_ACTION, MAX_SHIP
#DIM ATTACK_TARGET, MAX_SHIP
#DIM SHIP_ID
#DIM BROKEN_BY, MAX_SHIP
#DIM SETTLEMENT
#DIM WATCH

#DIM DUMMY_DISTANCE, MAX_SHIP

#DIM ATTACK_TRUN_LENGTH
#DIM ATTACK_TRUN_NOW
#DIM ATTACK_RANGE

#DIM BATTLE_SHIP_LIST, MAX_SHIP
#DIM BATTLE_SHIP_COUNT
#DIM COUNTER
#DIM BATTLE_SPEEDS, MAX_SHIP

; 変数初期化
DISPLAY_UI = 0
COMBAT_UI_DISPLAY_LOG = 0
VARSET SHIP_ACTION, 0
VARSET ATTACK_TARGET, -1
VARSET BROKEN_BY, -1
VARSET COMMANDER, -1
SETTLEMENT = 0
ATTACK_TRUN_NOW = 0

VARSET BATTLE_SHIP_LIST, -1
VARSET SHIP_LIST1, -1
VARSET SHIP_LIST2, -1

; 射程5武器でのみ2マス先に攻撃とかもシステム的には可能に(暫定的な処置です)
VARSET DISTANCE, ATTACK_RANGE

; とりあえず通常戦闘以遠なので最大値で返しておく
VARSET DUMMY_DISTANCE, 6

; 艦隊リスト取得
CALL GET_SHIP_LIST(BATTLE_SHIP_LIST, POSID_1, COUNTRY_1)
SIF RESULT == 0
	RETURN
CALL GET_SHIP_LIST(BATTLE_SHIP_LIST, POSID_2, COUNTRY_2, RESULT)
SIF RESULT == 0
	RETURN
BATTLE_SHIP_COUNT = RESULT

; 所属別リスト作成
CALL CREAT_TEAMED_LIST(SHIP_LIST1, SHIP_LIST2, BATTLE_SHIP_LIST, BATTLE_SHIP_COUNT, COUNTRY_1, COUNTRY_2)

; 移動順を戦闘速度でそーと
FOR COUNTER, 0, BATTLE_SHIP_COUNT
	BATTLE_SPEEDS:COUNTER = GET_BATTLE_SPEED(BATTLE_SHIP_LIST:COUNTER)
NEXT

; プレイヤーサイドの指揮官選出と演出
IF COUNTRY_1 == 国家ID_プレイヤー
	PRINTL
	DRAWLINE
	SETCOLOR 0XFF0000
	PRINTL AI「遠隔目標発見」
	RESETCOLOR
	PRINTL AI「各艦攻撃態勢へ移行中。急な揺れに注意してください」
	PRINTL AI「指揮官は長距離攻撃マネジメントを開始してください」
	PRINTL AI「繰り返します。各艦攻撃態勢へ移行中...」
	DRAWLINE
	;CALL COMMANDER_ELECTION(SHIP_LIST1)
	CALL OLD_COMMANDER_ELECTION(SHIP_LIST1)
	IF RESULT != -1
		COMMANDER:0 = RESULT
		DRAWLINE
		; 厳密には野戦(イベント口上300番)に対する301・302番みたいな別口上50X番にした方がよさげ(501番のイベント口上はまだ作られてないっぽい)
		CALLFORM KOJO_EVENT(COMMANDER:0, 501)
		PRINTFORMW 指揮官に%NAME:(COMMANDER:0)%が選ばれました
	ELSE
		PRINTW AIによる指揮が行われます
	ENDIF
	PRINTL
ELSEIF  COUNTRY_2 == 国家ID_プレイヤー
	PRINTL
	DRAWLINE
	SETCOLOR 0XFF0000
	PRINTL AI「長距離攻撃飛来中」
	RESETCOLOR
	PRINTL AI「各艦防衛態勢へ移行中。急な揺れに注意してください」
	PRINTL AI「指揮官は防衛マネジメントを開始してください」
	PRINTL AI「繰り返します。各艦防衛態勢へ移行中...」
	DRAWLINE
	;CALL COMMANDER_ELECTION(SHIP_LIST2)
	CALL OLD_COMMANDER_ELECTION(SHIP_LIST2)
	IF RESULT != -1
		COMMANDER:1 = RESULT
		DRAWLINE
		; 厳密には野戦(イベント口上300番)に対する301・302番みたいな別口上50X+1番にした方がよさげ
		CALLFORM KOJO_EVENT(COMMANDER:1, 501)
		PRINTFORMW 指揮官に%NAME:(COMMANDER:1)%が選ばれました
	ELSE
		PRINTW AIによる指揮が行われます
	ENDIF
	PRINTL
ENDIF

; UI表示判定
SIF WATCH
	DISPLAY_UI = 1
IF GROUPMATCH(国家ID_プレイヤー, COUNTRY_1, COUNTRY_2)
	DISPLAY_UI = 1
	COMBAT_UI_DISPLAY_LOG = 1
ENDIF

; 戦いの規模と場所から会戦の名称を生成する
CALL GENERATE_BATTLEFIELD_NAME(POSID_1, SHIP_LIST1, SHIP_LIST2)

WHILE SETTLEMENT == 0
	ATTACK_TRUN_NOW ++
	; 行動決定
	FOR COUNTER, 0, BATTLE_SHIP_COUNT
		SHIP_ID = BATTLE_SHIP_LIST:COUNTER
		IF SHIP_ACTION:SHIP_ID != 大破
			CALL GET_OTHER_GRID_ACTION(SHIP_ID, DISTANCE:SHIP_ID)
			SHIP_ACTION:SHIP_ID = RESULT
			IF SHIP_COUNTRY:SHIP_ID == COUNTRY_2 && SHIP_ACTION:SHIP_ID == 攻撃
				SHIP_ACTION:SHIP_ID =攻撃不能
				CONTINUE
			ENDIF
			SIF SHIP_ACTION:SHIP_ID != 攻撃
				CONTINUE
			IF SHIP_COUNTRY:SHIP_ID == COUNTRY_1
				CALL GET_OTHER_GRID_ATTACK_TARGET(SHIP_LIST2, DISTANCE, SHIP_ACTION)
			ELSE
			ENDIF
			SIF RESULT == -1
				THROW 攻撃対象が見つかりませんでした
			ATTACK_TARGET:SHIP_ID = RESULT
		ENDIF
	NEXT

	; スキル発動
	VARSET SKILL_EFFECT_PERCENTAGE, 100
	CALL SKILL_ACTIVATION(BATTLE_SHIP_LIST ,BATTLE_SHIP_COUNT, COUNTRY_1, COUNTRY_2)

	; UI表示
	SIF DISPLAY_UI
		CALL DISPLAY_UI(SHIP_LIST1, SHIP_LIST2, SHIP_ACTION, ATTACK_TARGET, DUMMY_DISTANCE, BROKEN_BY)

	; 行動
	;CALL EXECUTE_ACTION(SHIP_LIST1, SHIP_LIST2, SHIP_ACTION, ATTACK_TARGET, DISTANCE, BROKEN_BY)
	CALL EXECUTE_ACTION(BATTLE_SHIP_LIST, BATTLE_SHIP_COUNT, SHIP_ACTION, ATTACK_TARGET, DISTANCE, BROKEN_BY)

	; 決着判定
	CALL CHECK_ENDED(SHIP_LIST1, SHIP_LIST2, SHIP_ACTION)
	SETTLEMENT = RESULT
	;時間切れでも終了(念の為に戦闘ターン数より大きな値になった際には終了する様に)
	IF ATTACK_TRUN_NOW >= ATTACK_TRUN_LENGTH && SETTLEMENT == 0
		SETTLEMENT = 3
		SETCOLOR 0XFF0000
		PRINTW 攻撃が中断します。最終状況を表示します。
		RESETCOLOR
		CALL DISPLAY_UI(SHIP_LIST1, SHIP_LIST2, SHIP_ACTION, ATTACK_TARGET, DUMMY_DISTANCE, BROKEN_BY)
	ENDIF
WEND
IF DISPLAY_UI
	PRINTL ◆戦果
	IF SETTLEMENT == 1
		PRINTFORML %COUNTRY_NAME:COUNTRY_2%の勝利
		PRINTFORMW %COUNTRY_NAME:COUNTRY_1%は敗走しました
		IF COUNTRY_2 == 国家ID_プレイヤー
			;CALL COMBAT_REWARD(SHIP_LIST1, SHIP_ACTION)
			CALL COMBAT_SET_SHIP_CONDITION(SHIP_LIST2, SHIP_ACTION)
		ELSEIF COUNTRY_1 == 国家ID_プレイヤー
			CALL COMBAT_SET_SHIP_CONDITION(SHIP_LIST1, SHIP_ACTION)
		ENDIF
		RETURN 1
	ELSEIF SETTLEMENT == 2
		PRINTFORML %COUNTRY_NAME:COUNTRY_1%の勝利
		PRINTFORMW %COUNTRY_NAME:COUNTRY_2%は敗走しました
		IF COUNTRY_1 == 国家ID_プレイヤー
			;CALL COMBAT_REWARD(SHIP_LIST2, SHIP_ACTION)
			CALL COMBAT_SET_SHIP_CONDITION(SHIP_LIST1, SHIP_ACTION)
		ELSEIF COUNTRY_2 == 国家ID_プレイヤー
			CALL COMBAT_SET_SHIP_CONDITION(SHIP_LIST2, SHIP_ACTION)
		ENDIF
		RETURN 0
	ELSEIF SETTLEMENT == 3
		PRINTFORML %COUNTRY_NAME:COUNTRY_1%の攻撃中断
		PRINTFORMW %COUNTRY_NAME:COUNTRY_2%は未だ健在です
		IF COUNTRY_1 == 国家ID_プレイヤー
			CALL COMBAT_SET_SHIP_CONDITION(SHIP_LIST1, SHIP_ACTION)
		ELSEIF COUNTRY_2 == 国家ID_プレイヤー
			CALL COMBAT_SET_SHIP_CONDITION(SHIP_LIST2, SHIP_ACTION)
		ENDIF
		IF COUNTRY_2 != 国家ID_プレイヤー
			; 非プレイヤー艦が遠隔攻撃を受けたら反撃or退避をさせる

			FOR COUNTER, 0, BATTLE_SHIP_COUNT
				SHIP_ID = BATTLE_SHIP_LIST:COUNTER
				IF SHIP_ACTION:SHIP_ID != 大破 && SHIP_COUNTRY:SHIP_ID == COUNTRY_2 && SHIP_MISSION:SHIP_ID == 待機
					;攻撃対象艦隊で大破してなくて、何らかの行動中でなければ行動を決める
					CALL GET_OTHER_GRID_ACTION(SHIP_ID, DISTANCE:SHIP_ID)
					SELECTCASE RESULT
						CASE 攻撃
							;とりあえず(対象指定はできないけど)遠隔攻撃を試みる様に
							SHIP_MISSION:SHIP_ID = 遠隔攻撃
						CASE 攻撃不能
							;POSID_1に移動させる
							SHIP_MISSION:SHIP_ID = 移動
							MOVING_POS:SHIP_ID = POSID_1
						CASE 撤退
							;POSID_1とは別方向に移動させる
					ENDSELECT
				ENDIF
			NEXT
			;とりあえず行動決定と同じ方法を使いつつSELECTCASE
		ENDIF
		RETURN 2
	ENDIF
ENDIF


;---------------------------------
; アクション取得(他マス攻撃版)
;---------------------------------
; 戦闘中の移動の概念が無い(距離4からの移動にはSLGターンを使う必要があるだけの距離が掛かる)ので一部省略+攻撃不能に変更
@GET_OTHER_GRID_ACTION(SHIP_ID, DISTANCE)
#DIM SHIP_ID
#DIM DISTANCE
#DIM RANGE
#DIM CURRENT_SHIP_HP
#DIM MAX_SHIP_HP


IF GROUPMATCH(SHIP_CATEGORY:SHIP_ID, 調査船, 輸送船, 作業船) || SHIP_CONDITION:SHIP_ID == 艦船状態_大破
	RETURN 撤退
ELSE
	CALL GET_SHIP_TOTAL_HP(SHIP_ID)
	MAX_SHIP_HP = RESULT
	CALL GET_SHIP_HP(SHIP_ID)
	CURRENT_SHIP_HP = RESULT
	; HPが1/3切ったら撤退
	IF MAX_SHIP_HP > CURRENT_SHIP_HP * 3
			RETURN 撤退
	; 攻撃
	ELSE
		CALL GET_MAIN_WEAPON_RANGE(SHIP_ID)
		RANGE = RESULT
		IF RANGE < DISTANCE
			RETURN 攻撃不能
		ELSE
			RETURN 攻撃
		ENDIF
	ENDIF
ENDIF

;---------------------------------
; 攻撃対象取得(他マス攻撃版)
;---------------------------------
; 戦闘中の移動の概念が無い(距離4からの移動にはSLGターンを使う必要があるだけの距離が掛かる)のでリストは純粋に大破じゃない艦だけをリストアップすればOK
@GET_OTHER_GRID_ATTACK_TARGET(LIST, DISTANCE, SHIP_ACTION)
#DIM REF LIST
#DIM REF DISTANCE
#DIM REF SHIP_ACTION
#DIM ATTACKABLE_LIST, MAX_SHIP
#DIM ATTACKABLE_COUNTER
#DIM LIST_ITER

VARSET ATTACKABLE_COUNTER, 0
FINDELEMENT LIST, -1
FOR LIST_ITER, 0, RESULT
	SIF SHIP_ACTION:(LIST:LIST_ITER) == 大破
		CONTINUE
	;_DISTANCE = DISTANCE - 1
	ATTACKABLE_LIST:ATTACKABLE_COUNTER = LIST:LIST_ITER
	ATTACKABLE_COUNTER ++
NEXT

SIF ATTACKABLE_COUNTER > 0
	RETURN ATTACKABLE_LIST:(RAND:ATTACKABLE_COUNTER)

RETURN -1


;---------------------------------
; 他マス攻撃実行判定
;---------------------------------
@IS_OTHER_GRID_ATTACK_GOING(ATTACKER_POS, TARGET_POS, CHECK_COUNTRY)
#DIM ATTACKER_POS
#DIM TARGET_POS
#DIM CHECK_COUNTRY

#DIM POS_RANGE
#DIM MAX_RANGE

CALL SELECT_POS_RANGE_CHECK(ATTACKER_POS, TARGET_POS)
SIF RESULT == -1
	RETURN -1

POS_RANGE = RESULT

CALL IS_OTHER_GRID_ATTACK_CHECK(ATTACKER_POS, CHECK_COUNTRY)
MAX_RANGE = RESULT

SIF MAX_RANGE >= POS_RANGE
	RETURN POS_RANGE
RETURN 0

;---------------------------------
;必要射程計算
;---------------------------------
@SELECT_POS_RANGE_CHECK(ATTACKER_POS, TARGET_POS)
#DIM ATTACKER_POS
#DIM ATTACKER_SECTOR_ID
#DIM ATTACKER_X_POS
#DIM ATTACKER_Y_POS

#DIM TARGET_POS
#DIM TARGET_SECTOR_ID
#DIM TARGET_X_POS
#DIM TARGET_Y_POS

#DIM POS_RANGE

CALL ID2POS(ATTACKER_POS)
ATTACKER_SECTOR_ID = RESULT:0
ATTACKER_X_POS = RESULT:1
ATTACKER_Y_POS = RESULT:2

CALL ID2POS(TARGET_POS)
TARGET_SECTOR_ID = RESULT:0
TARGET_X_POS = RESULT:1
TARGET_Y_POS = RESULT:2

POS_RANGE = ABS(ATTACKER_X_POS - TARGET_X_POS) + ABS(ATTACKER_Y_POS - TARGET_Y_POS)

; 他セクター攻撃はとりあえず未実装
SIF ATTACKER_SECTOR_ID != TARGET_SECTOR_ID
	RETURN 0

; 離れているマスとは別に1マス内での通常戦闘時の射程分を追加して返す(射程4以降に関しては暫定的な処理)
RETURN POS_RANGE + 3

;---------------------------------
; 他マス攻撃能力判定
; GET_MAIN_WEAPON_MAX_RANGE_AND_DAMAGE_CHECKを利用して攻撃能力のある射程4武器があるかを確認する、IS_BUILDINGをベースにした関数
; 艦隊の最大射程を返す
;---------------------------------
@IS_OTHER_GRID_ATTACK_CHECK(POSID, CHECK_COUNTRY)
#DIM POSID
#DIM CHECK_COUNTRY
#DIM SECTOR_ID
#DIM X_POS
#DIM Y_POS
#DIM SHIP_ID
#DIM MAX_RANGE

MAX_RANGE = 0


FOR SHIP_ID, 0, MAX_SHIP
	; 他勢力にも隣接マス攻撃させたいので勢力部分は変数
	SIF SHIP_COUNTRY:SHIP_ID != CHECK_COUNTRY
		CONTINUE
	SIF POSID != SHIP_POSITION:SHIP_ID
		CONTINUE
	CALL GET_MAIN_WEAPON_MAX_RANGE_AND_DAMAGE_CHECK(SHIP_ID)
	SIF MAX_RANGE < RESULT
		MAX_RANGE = RESULT
NEXT

RETURN MAX_RANGE

;---------------------------------
;ダメージ有り主砲の最大射程判定
; GET_MAIN_WEAPON_RANGEをベースにしたダメージが0よりも大きい主砲の最大射程を確認する関数
; ここでのダメージ確認は「空きスロット」の様な『船の最短射程を変動させない・攻撃能力の無い主砲』を弾く事が目的(「空きスロットだけで隣接マスに攻撃」とかはやれる意味が無いので)
;---------------------------------
@GET_MAIN_WEAPON_MAX_RANGE_AND_DAMAGE_CHECK(SHIP_ID)
#DIM SHIP_ID
#DIM STATUS, STATUS_LENGTH
#DIM SHIP_STATUS, SHIP_STATUS_LENGTH
#DIM SLOT_ID
#DIM CURRENT_RANGE

VARSET STATUS, 0
VARSET SHIP_STATUS, 0
CURRENT_RANGE = 0

TRYCALLFORM GET_SHIP_STATUS_{SHIP_MODEL:SHIP_ID}(SHIP_STATUS)
FOR SLOT_ID, 0, SHIP_STATUS:SHIP_MAIN_WEAPON_SLOT
	TRYCALLFORM GET_MAIN_WEAPON_STATUS_{SHIP_EQUIP:主砲:SLOT_ID:SHIP_ID}(STATUS)
	SIF CURRENT_RANGE < STATUS:FIRE_RANGE && STATUS:DAMAGE > 0
		CURRENT_RANGE = STATUS:FIRE_RANGE
NEXT

RETURN CURRENT_RANGE



;暫定処理用指揮官選択(旧版)
@OLD_COMMANDER_ELECTION(LIST)
#DIM REF LIST

$INPUT_LOOP
PRINTL 
PRINTL ◆指揮官を選出してください
PRINTL
CALL COMMANDER_CANDIDATE_LIST(LIST)
PRINTBUTTON "[100] 指定しない", 100 
INPUT

SIF RESULT == 100
	RETURN -1

IF INRANGE(RESULT, 101, 101 + CHARANUM - 1) == 1
	CALL SHOW_SKILLS(RESULT - 101)
	WAIT
	GOTO INPUT_LOOP
ENDIF

IF INRANGE(RESULT, 0, CHARANUM - 1) == 1
	CALL IS_SELECTBLE_NUM_OF_COMMANDER(RESULTS, RESULT)
	SIF RESULT == -1
		GOTO INPUT_LOOP
ELSE
	GOTO INPUT_LOOP
ENDIF

RETURN RESULT