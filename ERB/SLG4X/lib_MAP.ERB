;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;@SELECT_POINT_byMAP(POSID, SHIP_ID, MESSAGE, ARG:0)
;;;		引数１：POSID		メインで表示する座標の指示 -1 で船中心かMASTER中心
;;;		引数２：SHIP_ID		左上に船名出す時は船ID。 -1でなし
;;; 	引数３：MESSAGE		入力枠付近に出す文字列。　「星を選択」とかださせて
;;;		引数４：キャンセルした際のリターン値 デフォ-1
;;; マップを描画し、一点選択させるUIをだす
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
@SELECT_POINT_byMAP(POSID = -1, SHIP_ID = -1, MESSAGE, ARG:0 = -1 )
#DIM POSID
#DIM SHIP_ID
#DIMS MESSAGE
#DIM SELECTED
#DIM SECTOR_ID
#DIM X_POS
#DIM Y_POS

IF POSID < 0
	IF SHIP_ID >= 0 && SHIP_ID <= MAX_SHIP
		SELECTED = SHIP_POSITION:SHIP_ID
	ELSE
		SELECTED = CHARACTER_POSITION:MASTER
	ENDIF
ELSE
	SELECTED = POSID
ENDIF
SECTOR_ID = SELECTED /10000

$INPUT_LOOP

DRAWLINE

CALL DRAW_WINDOW( SECTOR_ID , SELECTED , SHIP_ID, 0)
CALL ID2POS(SELECTED)

PRINTFORML 　　　　%MESSAGE%
PRINTL

IF SELECTED>= 0
	PRINTFORML 　　　　選択中 #{RESULT:0,2,RIGHT} X:{RESULT:1,2,RIGHT} Y:{RESULT:2,2,RIGHT}
ELSE
	PRINTL
ENDIF

PRINTL
PRINT 　　　　　　　　　
IF SELECTED >= 0
	PRINTBUTTON "[ 　決　定　 ]", -1
ELSE
	SETCOLOR 0x666666
	PRINT [ 　決　定　 ]
	RESETCOLOR
ENDIF
PRINTBUTTON " 　　　　[ キャンセル ]", -10
PRINTL
PRINTL
DRAWLINE

INPUT

IF RESULT == -10	;;キャンセル。上位メニューへ戻る
	RETURN ARG:0
ELSEIF RESULT == -1	;;選択中座標で決定
	RETURN SELECTED
ELSEIF  RESULT % 10000 == 9999 	;下4ケタ9999なら表示セクターの切り替え
	SECTOR_ID = RESULT /10000
	SELECTED = -2
	GOTO INPUT_LOOP
ELSEIF RESULT >= 0
	CALL ID2POS(RESULT)
	SECTOR_ID = RESULT:0
	X_POS = RESULT:1
	Y_POS = RESULT:2

			;有効なポイント指定 POSIDに格納してマップ描画更新
	IF ( X_POS >= 0 && X_POS < MAP_WIDTH ) && ( Y_POS >= 0 && Y_POS < MAP_HEIGHT )
		SELECTED = SECTOR_ID * 10000 + 100 * X_POS + Y_POS
		GOTO INPUT_LOOP
			;無効
	ELSE	;有効でないポイント指定は　POSID無効化して返す　(-1だと情報窓がプレイヤーを追尾）
		POSID = -2
		GOTO INPUT_LOOP
	ENDIF
ELSE	;そのほか
	GOTO INPUT_LOOP
ENDIF



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;@GET_PORT_NAME(POSID)
;;;	引数１：POSID 	座標ＩＤ
;;;	RESULT:0	0: 該当なし / 1: 惑星 / 2:宇宙港
;;; RESULT:1	惑星もしくは宇宙港の保有者　国ID
;;; RESULT:2	惑星もしくは宇宙港のPORT_ID		;惑星と港で意味が変わるので注意
;;; RESULTS:0	惑星名　もしくは "宇宙港"
;;; RESULTS:1	保有者名国名
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
@GET_PORT_NAME(POSID)
#DIM POSID
#DIM PORT_ID
#DIMS PORT_NAME

RESULTS:0 '=""
SIF POSID < 0
	RETURN 0, 0

FOR PORT_ID, 0, MAX_STAR
	IF STAR_POSITION_ID:PORT_ID == POSID
		RESULTS:0 = %STAR_NAME:PORT_ID%
		RESULTS:1 = %COUNTRY_NAME:(STAR_OWNER:PORT_ID)%
		RETURN 1, (STAR_OWNER:PORT_ID), PORT_ID
	ENDIF
NEXT

FOR PORT_ID, 0, MAX_PORT
	IF PORT_POSITION_ID:PORT_ID == POSID
		RESULTS:0 '="宇宙港"
		RESULTS:1 = %COUNTRY_NAME:(PORT_OWNER:PORT_ID)%
		RETURN 2, (PORT_OWNER:PORT_ID), PORT_ID
	ENDIF
NEXT

RETURN 0, 0, -1


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;@GET_PORT_fromSECTOR(SECTOR_ID)
;;;		引数１： SECTOR_ID	調査対象セクター
;;;  RETURN:0 ： 0= なし / 1= 惑星のみ / 2= 宇宙港のみ / 3= 惑星＋宇宙港
;;;  RETURN:1 ： -1= なし / 星のPOSID座標
;;;  RETURN:2 ： -1= なし / 宇宙港のPOSID座標 ※複数あっても一つだけ
;;; 調査対象セクターに 惑星・宇宙港が存在するか返す
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
@GET_PORT_fromSECTOR(SECTOR_ID)
#DIM SECTOR_ID
#DIM X_POS
#DIM Y_POS
#DIM DYNAMIC gFLAG,3 = 0, -1, -1

FOR Y_POS, 0, MAP_HEIGHT
	FOR X_POS, 0, MAP_WIDTH

		SELECTCASE MAP:SECTOR_ID:X_POS:Y_POS 
			CASE 星
				SETBIT gFLAG:0, 0
				CALL POS2ID(SECTOR_ID, X_POS, Y_POS)
				gFLAG:1 = RESULT
			CASE 宇宙港
				SETBIT gFLAG:0, 1
				CALL POS2ID(SECTOR_ID, X_POS, Y_POS)
				gFLAG:2 = RESULT
		ENDSELECT
	NEXT
NEXT
RETURN gFLAG:0, gFLAG:1, gFLAG:2

;------------------------------------------------
; @CHECK_COUNTRY_RELATION
;
;------------------------------------------------
@CHECK_COUNTRY_RELATION(COUNTRY_A, COUNTRY_B)
#FUNCTION
#DIM COUNTRY_A
#DIM COUNTRY_B


SELECTCASE REL_LIKE:COUNTRY_A:COUNTRY_B
	CASE IS <= -1000
		RETURNF -1 
	CASE IS >= 1000
		RETURNF 1
	CASEELSE
		RETURNF 0
ENDSELECT

;-------------------------------------------------
; @GET_SHIP_STATUS_BY_DIC
;	引数:SHIP_ID
;	RESULTS:0 
;	艦船の諸元データを取得し連想配列([キー:値])形式で返却する
;-------------------------------------------------
@GET_SHIP_STATUS_BY_DIC(SHIP_ID)
#DIM DYNAMIC SHIP_ID
#DIM DYNAMIC FIREPOWER_LIST, 6
#DIMS 艦船データ

CALL GET_TOTAL_FIREPOWER(SHIP_ID, FIREPOWER_LIST)

艦船データ '= DIC_SET(艦船データ, "ID", TOSTR(SHIP_ID))
艦船データ '= DIC_SET(艦船データ, "艦名", SHIP_NAME:SHIP_ID)
艦船データ '= DIC_SET(艦船データ, "艦種", TOSTR(SHIP_CATEGORY:SHIP_ID))
艦船データ '= DIC_SET(艦船データ, "艦種名", SHIP_CATEGORY_NAME:(SHIP_CATEGORY:SHIP_ID))
CALL GET_SHIP_HP(SHIP_ID)
艦船データ '= DIC_SET(艦船データ, "現HP", TOSTR(RESULT))
CALL GET_SHIP_TOTAL_HP(SHIP_ID)
艦船データ '= DIC_SET(艦船データ, "最大HP", TOSTR(RESULT))
CALL GET_SHIP_SIELD(SHIP_ID)
艦船データ '= DIC_SET(艦船データ, "現シールド", TOSTR(RESULT))
CALL GET_SHIP_TOTAL_SIELD(SHIP_ID)
艦船データ '= DIC_SET(艦船データ, "最大シールド", TOSTR(RESULT))
艦船データ '= DIC_SET(艦船データ, "座標", TOSTR(SHIP_POSITION:SHIP_ID))
艦船データ '= DIC_SET(艦船データ, "任務", TOSTR(SHIP_MISSION:SHIP_ID))
艦船データ '= DIC_SET(艦船データ, "任務名", GET_SHIP_MISSION_STR(SHIP_ID))
VARSET LOCALS
FOR LOCAL, 0, VARSIZE("FIREPOWER_LIST")
	LOCALS '= LIST_ADD(LOCALS, TOSTR(FIREPOWER_LIST:LOCAL))
NEXT
艦船データ '= DIC_SET(艦船データ, "合計火力リスト", LOCALS)
艦船データ '= DIC_SET(艦船データ, "実体弾", LIST_GET(DIC_GET(艦船データ, "合計火力リスト"), 0))
艦船データ '= DIC_SET(艦船データ, "レーザー", LIST_GET(DIC_GET(艦船データ, "合計火力リスト"), 1))
艦船データ '= DIC_SET(艦船データ, "ミサイル", LIST_GET(DIC_GET(艦船データ, "合計火力リスト"), 2))
艦船データ '= DIC_SET(艦船データ, "航空", LIST_GET(DIC_GET(艦船データ, "合計火力リスト"), 3))
艦船データ '= DIC_SET(艦船データ, "雷撃", LIST_GET(DIC_GET(艦船データ, "合計火力リスト"), 4))
艦船データ '= DIC_SET(艦船データ, "ビーム", LIST_GET(DIC_GET(艦船データ, "合計火力リスト"), 5))
CALL GET_SUB_ANTI_AIR(SHIP_ID)
艦船データ '= DIC_SET(艦船データ, "対空", TOSTR(RESULT))
CALL GET_AVOID(SHIP_ID)
艦船データ '= DIC_SET(艦船データ, "回避", TOSTR(RESULT))
CALL GET_CRITICAL_RISK(SHIP_ID)
艦船データ '= DIC_SET(艦船データ, "被クリティカル", TOSTR(RESULT, "##0,.0%"))

RESULTS = %艦船データ%
RETURN 

;-------------------------------------------------
; @ARRAYSORT_DIC
;	連想配列を持つ一次元配列を指定したキーで昇順または降順で挿入ソートする
;	指定するデータは数値型に変換可能であること
;	　※一次元配列に-1が格納されていた場合はデータの末尾とみなす
;	引数:1 連想配列を持つ文字列型一次元配列
;	引数:2 ソート対象のキー値
;	引数:3 0 = 昇順, 1 = 降順
;-------------------------------------------------
@ARRAYSORT_DIC(DIC, KEY, IS_DESCEND)
#DIMS REF DIC
#DIMS DYNAMIC KEY
#DIM DYNAMIC IS_DESCEND
#DIM DYNAMIC ELEMENT_COUNT

ELEMENT_COUNT = VARSIZE("DIC")
FINDELEMENT DIC, "-1"
IF RESULT != -1
	ELEMENT_COUNT = RESULT
ENDIF

FOR LOCAL:0, 1, ELEMENT_COUNT
	LOCAL:1 = LOCAL:0
	IF IS_DESCEND == 0
		WHILE (LOCAL:1 > 0) && (TOINT(DIC_GET(DIC:(LOCAL:1 - 1), KEY))) > (TOINT(DIC_GET(DIC:(LOCAL:1), KEY)))
			SWAP DIC:(LOCAL:1 - 1), DIC:(LOCAL:1)
			LOCAL:1 --
		WEND
	ELSE
		WHILE (LOCAL:1 > 0) && (TOINT(DIC_GET(DIC:(LOCAL:1 - 1), KEY))) < (TOINT(DIC_GET(DIC:(LOCAL:1), KEY)))
			SWAP DIC:(LOCAL:1 - 1), DIC:(LOCAL:1)
			LOCAL:1 --
		WEND
	ENDIF
NEXT

;-------------------------------------------------
; @SWAP_SHIPDATA
;	※SHIP_IDに紐づくデータ項目を増やした場合、この関数も編集する必要がある
;	任意の２艦のSHIP_IDに紐づくデータを入れ替える
;-------------------------------------------------
@SWAP_SHIPDATA(SHIP_ID1, SHIP_ID2)
#DIM SHIP_ID1
#DIM SHIP_ID2

;艦船データ
SWAP SHIP_CATEGORY:SHIP_ID1, SHIP_CATEGORY:SHIP_ID2 
SWAP SHIP_NAME:SHIP_ID1, SHIP_NAME:SHIP_ID2 
SWAP SHIP_COUNTRY:SHIP_ID1, SHIP_COUNTRY:SHIP_ID2 
SWAP SHIP_POSITION:SHIP_ID1, SHIP_POSITION:SHIP_ID2 
SWAP MOVING_POS:SHIP_ID1, MOVING_POS:SHIP_ID2 
SWAP FROM_POS:SHIP_ID1, FROM_POS:SHIP_ID2 
SWAP SHIP_MODEL:SHIP_ID1, SHIP_MODEL:SHIP_ID2 
SWAP SHIP_CONDITION:SHIP_ID1, SHIP_CONDITION:SHIP_ID2 
SWAP SHIP_IDENTIFICATION_FLAG:SHIP_ID1, SHIP_IDENTIFICATION_FLAG:SHIP_ID2 

;搭乗キャラクター
FOR LOCAL, 0, MAX_CHARANUM
	IF BOARDING_SHIP_ID:LOCAL == SHIP_ID1
		BOARDING_SHIP_ID:LOCAL = SHIP_ID2
	ELSEIF BOARDING_SHIP_ID:LOCAL == SHIP_ID2
		BOARDING_SHIP_ID:LOCAL = SHIP_ID1
	ENDIF
	IF RIDING_WITH:LOCAL == SHIP_ID1
		RIDING_WITH:LOCAL = SHIP_ID2
	ELSEIF RIDING_WITH:LOCAL == SHIP_ID2
		RIDING_WITH:LOCAL = SHIP_ID1
	ENDIF
NEXT

;艦船装備
FOR LOCAL:0, 0, EQUIP_TYPE_LENGTH
	FOR LOCAL:1, 0, MAX_SLOT
		SWAP SHIP_EQUIP:(LOCAL:0):(LOCAL:1):SHIP_ID1, SHIP_EQUIP:(LOCAL:0):(LOCAL:1):SHIP_ID2 
	NEXT
NEXT

;艦船ミッション
SWAP SHIP_MISSION:SHIP_ID1, SHIP_MISSION:SHIP_ID2
SWAP SHIP_FOLLOW:SHIP_ID1, SHIP_FOLLOW:SHIP_ID2
;各艦の追従対象も併せて入れ替える必要がある
FOR LOCAL, 0, MAX_SHIP
	IF SHIP_FOLLOW:LOCAL == SHIP_ID1
		SHIP_FOLLOW:LOCAL = SHIP_ID2
	ELSEIF SHIP_FOLLOW:LOCAL == SHIP_ID2
		SHIP_FOLLOW:LOCAL = SHIP_ID1
	ENDIF
NEXT
SWAP SHIP_PATROL:SHIP_ID1, SHIP_PATROL:SHIP_ID2
SWAP TRADE_ITEM:0:SHIP_ID1, TRADE_ITEM:0:SHIP_ID2
SWAP TRADE_ITEM:1:SHIP_ID1, TRADE_ITEM:1:SHIP_ID2

;船体ダメージ
SWAP SIELD_DAMAGE:SHIP_ID1, SIELD_DAMAGE:SHIP_ID2
SWAP SHIP_DAMAGE:SHIP_ID1, SHIP_DAMAGE:SHIP_ID2

FOR LOCAL, 0, MAX_SLOT + MAX_SLOT
	SWAP AIR_SHIP_DAMAGE:SHIP_ID1:LOCAL, AIR_SHIP_DAMAGE:SHIP_ID2:LOCAL
NEXT

;輸送船の積載物内訳
FOR LOCAL, 0, ITEM_LENGTH
	SWAP SHIP_CARGO:SHIP_ID1:LOCAL, SHIP_CARGO:SHIP_ID2:LOCAL
NEXT
SWAP RECIEVED_DOCTRINE:SHIP_ID1, RECIEVED_DOCTRINE:SHIP_ID2

RETURN


;-------------------------------------------------
; @NEAREST_STAR(POSID)
; 渡されたPOSIDに最も近い星系港を求める
; MODE
; "未発見"	…　未発見の惑星のみ
; "発見" 	…　発見済み惑星のみ
; 指定なし 	…　全生成惑星
;  POSID:基準となるPOSID
;  RESULT:0 最も近い星系港のPOSID
;-------------------------------------------------
@NEAREST_STAR(POSID, MODE)
#DIM POSID
#DIMS MODE
#DIMS DYNAMIC POSID_LIST
SELECTCASE MODE
	CASE "未発見"
		FOR LOCAL, 0, MAX_STAR
			IF CLEARMAP: (STAR_POSITION_ID:LOCAL / 10000) : 7: 7 == 0 
				POSID_LIST = %LIST_ADD(POSID_LIST, TOSTR(STAR_POSITION_ID:LOCAL))%
			ENDIF
		NEXT
		CALL NEAREST_SECTOR_ID(POSID, POSID_LIST)
	CASE "発見"
		FOR LOCAL, 0, MAX_STAR
			IF CLEARMAP: (STAR_POSITION_ID:LOCAL / 10000) : 7: 7 == 1
				POSID_LIST = %LIST_ADD(POSID_LIST, TOSTR(STAR_POSITION_ID:LOCAL))%
			ENDIF
		NEXT
		CALL NEAREST_SECTOR_ID(POSID, POSID_LIST)	
	CASEELSE
		FOR LOCAL, 0, MAX_STAR
			POSID_LIST = %LIST_ADD(POSID_LIST, TOSTR(STAR_POSITION_ID:LOCAL))%
		NEXT
		CALL NEAREST_SECTOR_ID(POSID, POSID_LIST)	
ENDSELECT
RETURN RESULT
;-------------------------------------------------
; @NEAREST_SECTOR_ID
; LIST型配列POSID_LISTに格納されたPOSIDのうち第一引数と最も近いSECTOR_IDを返す
; 候補が複数ある場合は格納順が若いIDの方が先に返る
;-------------------------------------------------
@NEAREST_SECTOR_ID(POSID, POSID_LIST)
#DIM POSID
#DIMS POSID_LIST
#DIM DYNAMIC SECTOR_ID_O
#DIM DYNAMIC SECTOR_ID_OX
#DIM DYNAMIC SECTOR_ID_OY
#DIM DYNAMIC SECTOR_ID
#DIM DYNAMIC SECTOR_ID_X
#DIM DYNAMIC SECTOR_ID_Y
#DIM DYNAMIC DIST_X
#DIM DYNAMIC DIST_Y
#DIM DYNAMIC DIST2
#DIM DYNAMIC MIN_DIST2
#DIM DYNAMIC MIN_IDX

IF LIST_COUNT(POSID_LIST) == 0
	RETURN -1
ENDIF

;取り得る最大距離 + 1で初期化する
MIN_DIST2 = MAX_SECTOR_X * MAX_SECTOR_X + MAX_SECTOR_Y * MAX_SECTOR_Y + 1 

SECTOR_ID_O = POSID / 10000
SECTOR_ID_OX = SECTOR_ID_O % MAX_SECTOR_X
SECTOR_ID_OY = SECTOR_ID_O / MAX_SECTOR_X

FOR LOCAL, 0, LIST_COUNT(POSID_LIST)
	SECTOR_ID = TOINT(LIST_GET(POSID_LIST, LOCAL)) / 10000
	SECTOR_ID_X = SECTOR_ID % MAX_SECTOR_X
	SECTOR_ID_Y = SECTOR_ID / MAX_SECTOR_X
	DIST_X = SECTOR_ID_X - SECTOR_ID_OX
	DIST_Y = SECTOR_ID_Y - SECTOR_ID_OY
	DIST2 = DIST_X * DIST_X + DIST_Y * DIST_Y
	IF DIST2 < MIN_DIST2
		MIN_DIST2 = DIST2
		MIN_IDX = LOCAL
	ENDIF
NEXT

RETURN TOINT(LIST_GET(POSID_LIST, MIN_IDX))

;-------------------------------------------------
;CHARA_IDに指定したキャラクターと同じ艦に同乗しているクルーを取得しリスト形式で返却する
;CHARA_ID:艦長のキャラクターID(未指定でプレイヤー)
;RESULT:0  同乗しているキャラクターの数
;RESULTS:0 同乗しているキャラクターID(_LIST形式)
;-------------------------------------------------
@GET_BOARDING_MEMBER_LIST(CHARA_ID = -1)
#DIM CHARA_ID
#DIMS DYNAMIC _LIST_MEMBER
VARSET RESULTS
SIF CHARA_ID == -1
	CHARA_ID = MASTER
FOR LOCAL, 0, CHARANUM
	IF BOARDING_SHIP_ID:CHARA_ID == RIDING_WITH:LOCAL
		_LIST_MEMBER = %LIST_ADD(_LIST_MEMBER, TOSTR(LOCAL))%
	ENDIF
NEXT

RESULTS = %_LIST_MEMBER%
RETURN LIST_COUNT(_LIST_MEMBER)