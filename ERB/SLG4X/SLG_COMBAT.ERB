;---------------------------------
; SLG COMBAT
;---------------------------------

;---------------------------------
; 戦闘
;---------------------------------
@COMBAT(ID)
#DIM ID
#DIM COUNTRY_LIST, MAX_COUNTRY
#DIM COUNTRY_LIST_SUB, MAX_COUNTRY
#DIM COUNTRY_LIST_LENGTH
#DIM BATTLE_COUNTRY, 2

VARSET COUNTRY_LIST
VARSET COUNTRY_LIST_SUB
VARSET AVOID_DAMAGE
VARSET DAMAGE_TO_SIELD
VARSET DAMAGE_TO_ARMOR
VARSET SKILL_EFFECT_PERCENTAGE, 100

COUNTRY_LIST_LENGTH = 0

CALL GET_SHIP_LIST_FROM_POS(ID)
SIF SHIP_LIST_LENGTH < 2
	RETURN

; 参加国の設定
FOR LOCAL, 0, SHIP_LIST_LENGTH
	COUNTRY_LIST_SUB:(SHIP_COUNTRY:(SHIP_LIST:LOCAL)) = SHIP_COUNTRY:(SHIP_LIST:LOCAL)
NEXT
FOR LOCAL, 0, MAX_COUNTRY
	SIF COUNTRY_LIST_SUB:LOCAL == 0
		CONTINUE
	COUNTRY_LIST:COUNTRY_LIST_LENGTH = COUNTRY_LIST_SUB:LOCAL
	COUNTRY_LIST_LENGTH += 1
NEXT

SIF COUNTRY_LIST_LENGTH < 2
	RETURN

; 互いの好感度を見て交戦判定
; 同勢力での戦闘が無いと想定
FOR BATTLE_COUNTRY, 0, COUNTRY_LIST_LENGTH - 1
	FOR BATTLE_COUNTRY:1, BATTLE_COUNTRY + 1, COUNTRY_LIST_LENGTH
		;(BATTLE_COUNTRY:0): 勢力A, (BATTLE_COUNTRY:1): 勢力B
		IF REL_LIKE_COUNTRY:(COUNTRY_LIST:(BATTLE_COUNTRY:0)):(COUNTRY_LIST:(BATTLE_COUNTRY:1)) <= -1000 || REL_LIKE_COUNTRY:(COUNTRY_LIST:(BATTLE_COUNTRY:1)):(COUNTRY_LIST:(BATTLE_COUNTRY:0)) <= -1000
			CALL BATTLE(COUNTRY_LIST:(BATTLE_COUNTRY:0), COUNTRY_LIST:(BATTLE_COUNTRY:1), ID)
			SIF COUNTRY_LIST:(BATTLE_COUNTRY:1) == 国家ID_一般海賊
				CALL ESCAPE_PIRATE
		ENDIF
	NEXT
NEXT
VARSET SKILL_EFFECT_PERCENTAGE, 100


@BATTLE(COUNTRY_1, COUNTRY_2, POSID, WATCH = 0)
#DIM COUNTRY_1
#DIM COUNTRY_2
#DIM POSID
#DIM BATTLE_SHIP_LIST, MAX_SHIP
#DIM BATTLE_SHIP_COUNT
#DIM COUNTER
#DIM SHIP_LIST1, MAX_SHIP
#DIM SHIP_LIST2, MAX_SHIP
#DIM SHIP_LIST1_COUNT
#DIM SHIP_LIST2_COUNT
#DIM DISPLAY_UI
#DIM DISTANCE, MAX_SHIP
#DIM SHIP_ACTION, MAX_SHIP
#DIM ATTACK_TARGET, MAX_SHIP
#DIM BATTLE_SPEEDS, MAX_SHIP
#DIM SHIP_ID
#DIM BROKEN_BY, MAX_SHIP
#DIM ENDED
#DIM WATCH

; 変数初期化
VARSET BATTLE_SHIP_LIST, -1
VARSET SHIP_LIST1, -1
VARSET SHIP_LIST2, -1
VARSET SHIP_ACTION, 0
VARSET DISTANCE, COMMON_DISTANCE
VARSET ATTACK_TARGET, -1
VARSET BROKEN_BY, -1
VARSET COMMANDER, -1
VARSET BATTLE_SPEEDS, -1
DISPLAY_UI = 0
COMBAT_UI_DISPLAY_LOG = 0
ENDED = 0
GETMILLISECOND
RANDOMIZE RESULT


; 艦隊リスト取得
CALL GET_SHIP_LIST(BATTLE_SHIP_LIST, POSID, COUNTRY_1)
SIF RESULT == 0
	RETURN
CALL GET_SHIP_LIST(BATTLE_SHIP_LIST, POSID, COUNTRY_2, RESULT)
SIF RESULT == 0
	RETURN
BATTLE_SHIP_COUNT = RESULT

; 所属別リスト作成
CALL CREAT_TEAMED_LIST(SHIP_LIST1, SHIP_LIST2, BATTLE_SHIP_LIST, BATTLE_SHIP_COUNT, COUNTRY_1, COUNTRY_2)

; 移動順を戦闘速度でそーと
FOR COUNTER, 0, BATTLE_SHIP_COUNT
	BATTLE_SPEEDS:COUNTER = GET_BATTLE_SPEED(BATTLE_SHIP_LIST:COUNTER)
NEXT
CALL ARRAYMSORTREV(BATTLE_SPEEDS, BATTLE_SHIP_LIST)

; 指揮官選出と演出
IF COUNTRY_1 == 国家ID_プレイヤー
	CALL COMMANDER_ELECTION(SHIP_LIST1)
	COMMANDER:0 = RESULT
ELSE
	CALL NPC_COMMANDER_ELECTION(SHIP_LIST1)
	COMMANDER:0 = RESULT
ENDIF

IF COUNTRY_2 == 国家ID_プレイヤー
	CALL COMMANDER_ELECTION(SHIP_LIST2)
	COMMANDER:1 = RESULT
ELSE
	CALL NPC_COMMANDER_ELECTION(SHIP_LIST2)
	COMMANDER:1 = RESULT
ENDIF

CALL INIT_DAMAGE_MULTIPLIER(BATTLE_SHIP_LIST, BATTLE_SHIP_COUNT)

; UI表示判定
SIF WATCH
	DISPLAY_UI = 1
IF GROUPMATCH(国家ID_プレイヤー, COUNTRY_1, COUNTRY_2)
	DISPLAY_UI = 1
	COMBAT_UI_DISPLAY_LOG = 1
ENDIF

; 戦いの規模と場所から会戦の名称を生成する
CALL GENERATE_BATTLEFIELD_NAME(POSID, SHIP_LIST1, SHIP_LIST2)

WHILE ENDED == 0
	; 行動決定
	FOR COUNTER, 0, BATTLE_SHIP_COUNT
		SHIP_ID = BATTLE_SHIP_LIST:COUNTER
		SIF SHIP_ACTION:SHIP_ID == 大破
			CONTINUE
		IF SHIP_CATEGORY:SHIP_ID == 建造物
			CALL INIT_STRCTURE_BATTLE_SETTING(SHIP_ID, DISTANCE, BATTLE_SHIP_LIST, BATTLE_SHIP_COUNT, ATTACK_TARGET)
		ELSE
			CALL GET_ACTION(SHIP_ID, DISTANCE, BATTLE_SHIP_LIST, BATTLE_SHIP_COUNT, ATTACK_TARGET)
		ENDIF
		SHIP_ACTION:SHIP_ID = RESULT
	NEXT

	; スキル発動
	VARSET SKILL_EFFECT_PERCENTAGE, 100
	CALL SKILL_ACTIVATION(BATTLE_SHIP_LIST ,BATTLE_SHIP_COUNT, COUNTRY_1, COUNTRY_2)
	CALL ABL_ACTIVATION(BATTLE_SHIP_LIST ,BATTLE_SHIP_COUNT, COMMANDER)

	; UI表示
	SIF DISPLAY_UI
		CALL DISPLAY_UI(SHIP_LIST1, SHIP_LIST2, SHIP_ACTION, ATTACK_TARGET, DISTANCE, BROKEN_BY)

	; 行動
	CALL EXECUTE_ACTION(BATTLE_SHIP_LIST, BATTLE_SHIP_COUNT, SHIP_ACTION, ATTACK_TARGET, DISTANCE, BROKEN_BY)

	; 決着判定
	CALL CHECK_ENDED(SHIP_LIST1, SHIP_LIST2, SHIP_ACTION)
	ENDED = RESULT
WEND

IF DISPLAY_UI
	PRINTL ◆戦果
	IF ENDED == 1
		PRINTFORML %COUNTRY_NAME:COUNTRY_2%の勝利
		PRINTFORMW %COUNTRY_NAME:COUNTRY_1%は敗走しました
		IF COUNTRY_2 == 国家ID_プレイヤー
			CALL COMBAT_REWARD(SHIP_LIST1, SHIP_ACTION)
			CALL GET_COMBAT_EXP(COMMANDER:1, BATTLE_SHIP_COUNT, BROKEN_BY, SHIP_LIST2)
			CALL COMBAT_SET_SHIP_CONDITION(SHIP_LIST2, SHIP_ACTION)
		ELSEIF COUNTRY_1 == 国家ID_プレイヤー
			CALL COMBAT_SET_SHIP_CONDITION(SHIP_LIST1, SHIP_ACTION)
		ENDIF
		RETURN 1
	ELSEIF ENDED == 2
		PRINTFORML %COUNTRY_NAME:COUNTRY_1%の勝利
		PRINTFORMW %COUNTRY_NAME:COUNTRY_2%は敗走しました
		IF COUNTRY_1 == 国家ID_プレイヤー
			CALL COMBAT_REWARD(SHIP_LIST2, SHIP_ACTION)
			CALL GET_COMBAT_EXP(COMMANDER:0, BATTLE_SHIP_COUNT, BROKEN_BY, SHIP_LIST1)
			CALL COMBAT_SET_SHIP_CONDITION(SHIP_LIST1, SHIP_ACTION)
		ELSEIF COUNTRY_2 == 国家ID_プレイヤー
			CALL COMBAT_SET_SHIP_CONDITION(SHIP_LIST2, SHIP_ACTION)
		ENDIF
		RETURN 0
	ENDIF
ENDIF

;---------------------------------
; 指揮官決定
;---------------------------------
@COMMANDER_ELECTION(LIST)
#DIM REF LIST
#DIM INPUT_RESULT

PRINTL
DRAWLINE
SETCOLOR 0XFF0000
PRINTL AI「敵影発見」
RESETCOLOR
PRINTL AI「各艦戦闘態勢へ移行中。急な揺れに注意してください」
PRINTL AI「指揮官は交戦マネジメントを開始してください」
PRINTL AI「繰り返します。各艦戦闘態勢へ移行中...」
DRAWLINE

$INPUT_LOOP
PRINTL 
PRINTL ◆指揮官を選出してください
PRINTL
CALL COMMANDER_CANDIDATE_LIST(LIST)
PRINTBUTTON "[100] 指定しない", 100 
INPUT

INPUT_RESULT = RESULT

IF INPUT_RESULT == 100
	PRINTW AIによる指揮が行われます
	RETURN -1
ENDIF

IF INRANGE(RESULT, 101, 101 + CHARANUM - 1) == 1
	CALL SHOW_SKILLS(RESULT - 101)
	WAIT
	GOTO INPUT_LOOP
ENDIF

IF INRANGE(RESULT, 0, CHARANUM - 1) == 1
	CALL IS_SELECTBLE_NUM_OF_COMMANDER(RESULTS, RESULT)
	SIF RESULT == -1
		GOTO INPUT_LOOP
ELSE
	GOTO INPUT_LOOP
ENDIF

DRAWLINE
CALLFORM KOJO_EVENT(INPUT_RESULT, 501)
PRINTFORMW 指揮官に%NAME:(INPUT_RESULT)%が選ばれました
PRINTL
RETURN INPUT_RESULT

;---------------------------------
; 指揮官決定
;---------------------------------
@COMMANDER_CANDIDATE_LIST(LIST)
#DIM REF LIST
#DIM LENGTH
#DIM ID
#DIMS SHIP_MEM
#DIM CH_ID
#DIM COUNTER
#DIMS DYNAMIC _LIST_MEMBER
VARSET RESULTS

FINDELEMENT LIST, -1
LENGTH = RESULT

FOR ID, 0, LENGTH
	FINDELEMENT BOARDING_SHIP_ID, LIST:ID
	SIF RESULT == -1
		CONTINUE
	PRINT  
	PRINTBUTTON @"[{RESULT}] %NAME:RESULT, 20, LEFT%", RESULT
	PRINTBUTTON @"[詳細]", RESULT + 101
	_LIST_MEMBER = %LIST_ADD(_LIST_MEMBER, TOSTR(RESULT))%
	PRINTL
	CALL GET_BOARDING_MEMBER_LIST(RESULT)
	SHIP_MEM = %RESULTS%
	FOR COUNTER, 0, 100
		SIF LIST_GET(SHIP_MEM, COUNTER) == ""
			BREAK
		CH_ID = TOINT(LIST_GET(SHIP_MEM, COUNTER))
		PRINT  
		PRINTBUTTON @"[{CH_ID}] %NAME:CH_ID, 20, LEFT%", CH_ID
		PRINTBUTTON @"[詳細]", CH_ID + 101
		_LIST_MEMBER = %LIST_ADD(_LIST_MEMBER, TOSTR(CH_ID))%
		PRINTL
	NEXT
NEXT
RESULTS = %_LIST_MEMBER%
;---------------------------------
; この戦闘において選択可能な指揮官か
;---------------------------------
@IS_SELECTBLE_NUM_OF_COMMANDER(_LIST, ID)
#DIMS REF _LIST
#DIM ID
#DIM CH_ID
#DIM COUNTER

FOR COUNTER, 0, 100
	SIF LIST_GET(_LIST, COUNTER) == ""
		BREAK
	CH_ID = TOINT(LIST_GET(_LIST, COUNTER))
	SIF ID == CH_ID
		RETURN ID
NEXT
RETURN -1

;---------------------------------
;プレイヤー勢力以外の指揮官決定
;とりあえずは「クエスト旗艦の艦長のキャラが居たら」の処理のみ
;---------------------------------
@NPC_COMMANDER_ELECTION(LIST)
#DIM REF LIST
#DIM LENGTH
#DIM ID
#DIM CAPTAIN_ID

#DIM QUEST_NUM

VARSET RESULTS

FINDELEMENT LIST, -1
LENGTH = RESULT

FOR ID, 0, LENGTH
	;「BOARDING_SHIP_ID:(キャラID)」に「艦長として乗ってる船のID」が入ってるから、リストの船のIDとヒットした人をCAPTAIN_IDに入れる
	FINDELEMENT BOARDING_SHIP_ID, LIST:ID
	CAPTAIN_ID = RESULT
	SIF CAPTAIN_ID == -1
		CONTINUE

	; QUEST_PROGRESSが0ではないクエストの旗艦の艦長だったら艦長にする
	FOR QUEST_NUM, 0, QUEST_LENGTH
		IF QUEST_PROGRESS:QUEST_NUM != 0 && BOARDING_SHIP_ID:CAPTAIN_ID == QUEST_FLAG_SHIP_ID:QUEST_NUM
			RETURN CAPTAIN_ID
		ENDIF
	NEXT
NEXT

RETURN -1

;---------------------------------
; アクション取得
;---------------------------------
@GET_ACTION(_SHIP_ID, _DISTANCE, _BATTLE_SHIP_LIST, _BATTLE_SHIP_COUNT, _ATTACK_TARGET)
#DIM _SHIP_ID
#DIM REF _DISTANCE
#DIM REF _BATTLE_SHIP_LIST
#DIM REF _ATTACK_TARGET
#DIM _BATTLE_SHIP_COUNT
#DIM _ORDER_ID

;コマンドオーダー未設定
IF RECIEVED_DOCTRINE:_SHIP_ID == -1
	FOR _ORDER_ID, 0, MAX_ORDER
		IF GROUPMATCH(SHIP_CATEGORY:_SHIP_ID, 調査船, 輸送船, 作業船)
			CALL GET_COMMAND_DETAIL(NO_ATTACKER_DEFAULT_DOCTRINE:_ORDER_ID, _SHIP_ID, _DISTANCE:_SHIP_ID, _BATTLE_SHIP_LIST, _BATTLE_SHIP_COUNT, _ATTACK_TARGET)
			SIF RESULT == 0
				CONTINUE
			RETURN RESULT
		ELSEIF SHIP_CATEGORY:_SHIP_ID == 建造物
			CALL GET_COMMAND_DETAIL(STRCTURE_DEFAULT_DOCTRINE:_ORDER_ID, _SHIP_ID, _DISTANCE:_SHIP_ID, _BATTLE_SHIP_LIST, _BATTLE_SHIP_COUNT, _ATTACK_TARGET)
			SIF RESULT == 0
				CONTINUE
			RETURN RESULT
		ELSE
			CALL GET_COMMAND_DETAIL(DEFAULT_DOCTRINE:_ORDER_ID, _SHIP_ID, _DISTANCE:_SHIP_ID, _BATTLE_SHIP_LIST, _BATTLE_SHIP_COUNT, _ATTACK_TARGET)
			SIF RESULT == 0
				CONTINUE
			RETURN RESULT
		ENDIF
	NEXT
ELSE
	FOR _ORDER_ID, 0, MAX_ORDER
		CALL GET_COMMAND_DETAIL(DOCTRINE_COMPOSITION:(RECIEVED_DOCTRINE:_SHIP_ID):_ORDER_ID:(SHIP_COUNTRY:_SHIP_ID) , _SHIP_ID, _DISTANCE:_SHIP_ID, _BATTLE_SHIP_LIST, _BATTLE_SHIP_COUNT, _ATTACK_TARGET)
		SIF RESULT == 0
			CONTINUE
		RETURN RESULT
	NEXT
ENDIF


;---------------------------------
; アクション別の行動決定
;---------------------------------
@GET_COMMAND_DETAIL(_COMMAND_ID, _SHIP_ID, _DISTANCE, _BATTLE_SHIP_LIST, _BATTLE_SHIP_COUNT, _ATTACK_TARGET)
#DIM _COMMAND_ID
#DIM _SHIP_ID
#DIM REF _DISTANCE
#DIM REF _BATTLE_SHIP_LIST
#DIM REF _BATTLE_SHIP_COUNT
#DIM REF _ATTACK_TARGET
#DIM _RANGE
#DIM _WEAPON_STATUS, STATUS_LENGTH
#DIM _MAX_SHIP_HP
#DIM _CURRENT_SHIP_HP
#DIM _TARGET_SHIP_ID
#DIM _TARGET_CATEGORY
#DIM _IS_ATTACKABLE
#DIM DYNAMIC _TARGET_LIST = -1
#DIM DYNAMIC _TARGET_LIST_COUNT = 0
#DIM DYNAMIC _TARGET_VALUE = 0
#DIM DYNAMIC _TARGET_COUNT = 0
#DIM DYNAMIC _ATK_SHIP_STATUS, SHIP_STATUS_LENGTH

TRYCALLFORM GET_SHIP_STATUS_{SHIP_MODEL:_SHIP_ID}(_ATK_SHIP_STATUS)
SELECTCASE _COMMAND_ID
	CASE 0
		_RANGE = 0
		FOR LOCAL, 0, _ATK_SHIP_STATUS:SHIP_MAIN_WEAPON_SLOT
			CALL GET_SHIP_MAIN_WEAPON_STATUS(_SHIP_ID, LOCAL, _WEAPON_STATUS)
			IF _WEAPON_STATUS:FIRE_RANGE <= _DISTANCE:_SHIP_ID
				CALL GET_RANDOM_ATTACK_TARGET(_BATTLE_SHIP_LIST, _DISTANCE, _SHIP_ID)
				_ATTACK_TARGET:_SHIP_ID = RESULT
				RETURN 攻撃
			ENDIF
			CALL GET_SHIP_SUB_WEAPON_STATUS(_SHIP_ID, LOCAL, _WEAPON_STATUS)
			IF _WEAPON_STATUS:FIRE_RANGE <= _DISTANCE:_SHIP_ID
				CALL GET_RANDOM_ATTACK_TARGET(_BATTLE_SHIP_LIST, _DISTANCE, _SHIP_ID)
				_ATTACK_TARGET:_SHIP_ID = RESULT
				RETURN 攻撃
			ENDIF
		NEXT
		RETURN 0
	;主砲の最長有効射程まで移動 - 射程の違う主砲が複数ある場合、最長射程に合わせて移動
	CASE 1
		_RANGE = 0
		FOR LOCAL, 0, _ATK_SHIP_STATUS:SHIP_MAIN_WEAPON_SLOT
			CALL GET_SHIP_MAIN_WEAPON_STATUS(_SHIP_ID, LOCAL, _WEAPON_STATUS)
			SIF _RANGE == 0 || _WEAPON_STATUS:FIRE_RANGE > _RANGE
				_RANGE = _WEAPON_STATUS:FIRE_RANGE
		NEXT
		SIF _DISTANCE:_SHIP_ID > _RANGE
			RETURN 前進
		RETURN 0
	;主砲の最短有効距離まで移動 - 射程の違う主砲が複数ある場合、最短射程に合わせて移動
	CASE 2
		_RANGE = 0
		FOR LOCAL, 0, _ATK_SHIP_STATUS:SHIP_MAIN_WEAPON_SLOT
			CALL GET_SHIP_MAIN_WEAPON_STATUS(_SHIP_ID, LOCAL, _WEAPON_STATUS)
			SIF _RANGE == 0 || _WEAPON_STATUS:FIRE_RANGE < _RANGE
				_RANGE = _WEAPON_STATUS:FIRE_RANGE
		NEXT
		SIF _DISTANCE:_SHIP_ID > _RANGE
			RETURN 前進
		RETURN 0
	;副砲の最長有効射程まで移動 - 射程の違う副砲が複数ある場合、最長の副砲射程に合わせて移動
	CASE 3
		_RANGE = 0
		FOR LOCAL, 0, _ATK_SHIP_STATUS:SHIP_SUB_WEAPON_SLOT
			CALL GET_SHIP_SUB_WEAPON_STATUS(_SHIP_ID, LOCAL, _WEAPON_STATUS)
			SIF _RANGE == 0 || _WEAPON_STATUS:FIRE_RANGE > _RANGE
				_RANGE = _WEAPON_STATUS:FIRE_RANGE
		NEXT
		SIF _DISTANCE:_SHIP_ID > _RANGE
			RETURN 前進
		RETURN 0
	;副砲の最短有効距離まで移動 - 射程の違う副砲が複数ある場合、最短の副砲射程に合わせて移動
	CASE 4
		_RANGE = 0
		FOR LOCAL, 0, _ATK_SHIP_STATUS:SHIP_SUB_WEAPON_SLOT
			CALL GET_SHIP_SUB_WEAPON_STATUS(_SHIP_ID, LOCAL, _WEAPON_STATUS)
			SIF _RANGE == 0 || _WEAPON_STATUS:FIRE_RANGE < _RANGE
				_RANGE = _WEAPON_STATUS:FIRE_RANGE
		NEXT
		SIF _DISTANCE:_SHIP_ID > _RANGE
			RETURN 前進
		RETURN 0
	;最前線から距離0まで移動
	CASE 5
		SIF _DISTANCE:_SHIP_ID > 1
			RETURN 前進
		RETURN 0
	;最前線から距離1まで移動
	CASE 6
		SIF _DISTANCE:_SHIP_ID > 2
			RETURN 前進
		RETURN 0
	;最前線から距離2まで移動
	CASE 7
		SIF _DISTANCE:_SHIP_ID > 3
			RETURN 前進
		RETURN 0
	;最前線から距離3まで移動
	CASE 8
		SIF _DISTANCE:_SHIP_ID > 4
			RETURN 前進
		RETURN 0
	;最前線から距離4まで移動
	CASE 9
		SIF _DISTANCE:_SHIP_ID > 5
			RETURN 前進
		RETURN 0
	;常に撤退
	CASE 10
		RETURN 撤退
	;耐久が1/4を下回ったら撤退
	;耐久が1/3を下回ったら撤退
	;耐久が1/2を下回ったら撤退
	CASE 11 TO 13
		CALL GET_SHIP_TOTAL_HP(_SHIP_ID)
		_MAX_SHIP_HP = RESULT
		CALL GET_SHIP_HP(_SHIP_ID)
		SELECTCASE _COMMAND_ID
			CASE 11
				_CURRENT_SHIP_HP = RESULT * 4
			CASE 12
				_CURRENT_SHIP_HP = RESULT * 3
			CASE 13
				_CURRENT_SHIP_HP = RESULT * 2
		ENDSELECT
		IF _MAX_SHIP_HP > _CURRENT_SHIP_HP
			IF _DISTANCE:_SHIP_ID == COMMON_DISTANCE
				RETURN 撤退
			ELSE
				RETURN 後退
			ENDIF
		ENDIF
		RETURN 0
	;味方の駆逐艦が撤退線（距離5）まで下がったら撤退
	;味方の巡洋艦が撤退線（距離5）まで下がったら撤退
	;味方の戦艦が撤退線（距離5）まで下がったら撤退
	;味方の空母が撤退線（距離5）まで下がったら撤退
	CASE 14 TO 17
		SELECTCASE _COMMAND_ID
			CASE 14
				_TARGET_CATEGORY = 駆逐艦
			CASE 15
				_TARGET_CATEGORY = 巡洋艦
			CASE 16
				_TARGET_CATEGORY = 戦艦
			CASE 17
				_TARGET_CATEGORY = 空母
		ENDSELECT
		FOR LOCAL, 0, _BATTLE_SHIP_COUNT
			_TARGET_SHIP_ID = _BATTLE_SHIP_COUNT:LOCAL
			SIF SHIP_CATEGORY:_TARGET_SHIP_ID != _TARGET_CATEGORY
				CONTINUE
			SIF _DISTANCE:_TARGET_SHIP_ID != COMMON_DISTANCE
				RETURN 0
		NEXT
		RETURN 撤退
	;攻撃オーダー
	CASE 18 TO 24
		; 現在地から射撃できる武装が存在するか
		_IS_ATTACKABLE = 0
		FOR LOCAL, 0, MAX_SLOT
			IF _ATK_SHIP_STATUS:SHIP_MAIN_WEAPON_SLOT < LOCAL
				TRYCALLFORM GET_MAIN_WEAPON_STATUS_{SHIP_EQUIP:主砲:LOCAL:_SHIP_ID}(_WEAPON_STATUS)
				SIF _WEAPON_STATUS:FIRE_RANGE >= _DISTANCE:_SHIP_ID
					_IS_ATTACKABLE++
			ENDIF
			IF _ATK_SHIP_STATUS:SHIP_SUB_WEAPON_SLOT < LOCAL
				TRYCALLFORM GET_SUB_WEAPON_STATUS_{SHIP_EQUIP:副砲:LOCAL:_SHIP_ID}(_WEAPON_STATUS)
				SIF _WEAPON_STATUS:FIRE_RANGE >= _DISTANCE:_SHIP_ID
					_IS_ATTACKABLE++
			ENDIF
		NEXT
		SIF _IS_ATTACKABLE == 0
			RETURN 0
		; 対象一覧を作成
		SELECTCASE _COMMAND_ID
			;耐久が一番低い敵から攻撃
			CASE 18
				FOR LOCAL, 0, _BATTLE_SHIP_COUNT
					CALL GET_SHIP_HP(_BATTLE_SHIP_LIST:LOCAL)
					;条件に一致しない艦船は弾く
					SIF RESULT == 0 || SHIP_COUNTRY:(_BATTLE_SHIP_LIST:LOCAL) == SHIP_COUNTRY:_SHIP_ID
						CONTINUE
					SIF _TARGET_VALUE != 0 || RESULT > _TARGET_VALUE
						CONTINUE
					;条件に一致する艦船をカウント
					IF _TARGET_VALUE == RESULT
						_TARGET_COUNT ++
					ELSE
						_TARGET_COUNT = 1
					ENDIF
				NEXT
				FOR LOCAL, 0, _BATTLE_SHIP_COUNT
					CALL GET_SHIP_HP(_BATTLE_SHIP_LIST:LOCAL)
					;条件に一致しない艦船は弾く
					SIF RESULT == 0 || SHIP_COUNTRY:(_BATTLE_SHIP_LIST:LOCAL) == SHIP_COUNTRY:_SHIP_ID
						CONTINUE
					SIF _TARGET_VALUE != 0 || RESULT > _TARGET_VALUE
						CONTINUE
					; 条件に合う艦船からランダムに選択
					IF _TARGET_COUNT != 0 && RAND:_TARGET_COUNT != 0
						_TARGET_COUNT --
						CONTINUE
					ENDIF
					_ATTACK_TARGET:_SHIP_ID = _BATTLE_SHIP_LIST:LOCAL
				NEXT
			;耐久が一番高い敵から攻撃
			CASE 19
				FOR LOCAL, 0, _BATTLE_SHIP_COUNT
					CALL GET_SHIP_HP(_BATTLE_SHIP_LIST:LOCAL)
					;条件に一致しない艦船は弾く
					SIF RESULT == 0 || SHIP_COUNTRY:(_BATTLE_SHIP_LIST:LOCAL) == SHIP_COUNTRY:_SHIP_ID
						CONTINUE
					SIF _TARGET_VALUE != 0 || RESULT < _TARGET_VALUE
						CONTINUE
					IF RESULT == _TARGET_VALUE
						_TARGET_COUNT ++
					ELSE
						_TARGET_COUNT = 1
					ENDIF
				NEXT
				FOR LOCAL, 0, _BATTLE_SHIP_COUNT
					CALL GET_SHIP_HP(_BATTLE_SHIP_LIST:LOCAL)
					;条件に一致しない艦船は弾く
					SIF RESULT == 0 || SHIP_COUNTRY:(_BATTLE_SHIP_LIST:LOCAL) == SHIP_COUNTRY:_SHIP_ID
						CONTINUE
					SIF _TARGET_VALUE != 0 || RESULT < _TARGET_VALUE
						CONTINUE
					IF _TARGET_COUNT != 0 && RAND:_TARGET_COUNT != 0
						_TARGET_COUNT --
						CONTINUE
					ENDIF
					_ATTACK_TARGET:_SHIP_ID = _BATTLE_SHIP_LIST:LOCAL
				NEXT
			;高DPSの敵から攻撃 - 最も近い距離に複数の敵がいた場合、最もDPSが高い敵を攻撃する
			CASE 20
				FOR LOCAL, 0, _BATTLE_SHIP_COUNT
					;条件に一致しない艦船は弾く
					CALL GET_SHIP_HP(_BATTLE_SHIP_LIST:LOCAL)
					SIF RESULT == 0 || SHIP_COUNTRY:(_BATTLE_SHIP_LIST:LOCAL) == SHIP_COUNTRY:_SHIP_ID
						CONTINUE
					CALL GET_SHIP_DPS(_BATTLE_SHIP_LIST:LOCAL)
					SIF RESULT != 0 && RESULT < _TARGET_VALUE
						CONTINUE
					_TARGET_VALUE = RESULT
					_TARGET_COUNT ++
				NEXT
				FOR LOCAL, 0, _BATTLE_SHIP_COUNT
					;条件に一致しない艦船は弾く
					CALL GET_SHIP_HP(_BATTLE_SHIP_LIST:LOCAL)
					SIF RESULT == 0 || SHIP_COUNTRY:(_BATTLE_SHIP_LIST:LOCAL) == SHIP_COUNTRY:_SHIP_ID
						CONTINUE
					CALL GET_SHIP_DPS(_BATTLE_SHIP_LIST:LOCAL)
					SIF RESULT != 0 && RESULT < _TARGET_VALUE
						CONTINUE
					IF _TARGET_COUNT != 0 && RAND:_TARGET_COUNT != 0
						_TARGET_COUNT --
						CONTINUE
					ENDIF
					_ATTACK_TARGET:_SHIP_ID = _BATTLE_SHIP_LIST:LOCAL
				NEXT
			;高火力の敵から攻撃 - 最も近い距離に複数の敵がいた場合、命中時の火力が高い敵を攻撃する
			CASE 21
				FOR LOCAL, 0, _BATTLE_SHIP_COUNT
					;条件に一致しない艦船は弾く
					CALL GET_SHIP_HP(_BATTLE_SHIP_LIST:LOCAL)
					SIF RESULT == 0 || SHIP_COUNTRY:(_BATTLE_SHIP_LIST:LOCAL) == SHIP_COUNTRY:_SHIP_ID
						CONTINUE
					CALL GET_SHIP_DPS(_BATTLE_SHIP_LIST:LOCAL)
					SIF RESULT != 0 && RESULT < _TARGET_VALUE
						CONTINUE
					_TARGET_VALUE = RESULT
					_TARGET_COUNT ++
				NEXT
				FOR LOCAL, 0, _BATTLE_SHIP_COUNT
					;条件に一致しない艦船は弾く
					CALL GET_SHIP_HP(_BATTLE_SHIP_LIST:LOCAL)
					SIF RESULT == 0 || SHIP_COUNTRY:(_BATTLE_SHIP_LIST:LOCAL) == SHIP_COUNTRY:_SHIP_ID
						CONTINUE
					CALL GET_SHIP_TOTAL_DAMAGE(_BATTLE_SHIP_LIST:LOCAL)
					SIF RESULT != 0 && RESULT < _TARGET_VALUE
						CONTINUE
					IF _TARGET_COUNT != 0 && RAND:_TARGET_COUNT != 0
						_TARGET_COUNT --
						CONTINUE
					ENDIF
					_ATTACK_TARGET:_SHIP_ID = _BATTLE_SHIP_LIST:LOCAL
					BREAK
				NEXT
			;小型艦から攻撃 - 最も近い距離に複数の敵がいた場合、コルベット/フリゲートを優先して攻撃する
			CASE 22
				FOR LOCAL, 0, _BATTLE_SHIP_COUNT
					;条件に一致しない艦船は弾く
					CALL GET_SHIP_HP(_BATTLE_SHIP_LIST:LOCAL)
					SIF RESULT == 0 || SHIP_COUNTRY:(_BATTLE_SHIP_LIST:LOCAL) == SHIP_COUNTRY:_SHIP_ID
						CONTINUE
					SIF GROUPMATCH(SHIP_CATEGORY:(_BATTLE_SHIP_LIST:LOCAL), コルベット, フリゲート) == 0
						CONTINUE
					_TARGET_COUNT ++
				NEXT
				FOR LOCAL, 0, _BATTLE_SHIP_COUNT
					;条件に一致しない艦船は弾く
					CALL GET_SHIP_HP(_BATTLE_SHIP_LIST:LOCAL)
					SIF RESULT == 0 || SHIP_COUNTRY:(_BATTLE_SHIP_LIST:LOCAL) == SHIP_COUNTRY:_SHIP_ID
						CONTINUE
					SIF GROUPMATCH(SHIP_CATEGORY:(_BATTLE_SHIP_LIST:LOCAL), コルベット, フリゲート) == 0
						CONTINUE
					IF _TARGET_COUNT != 0 && RAND:_TARGET_COUNT != 0
						_TARGET_COUNT --
						CONTINUE
					ENDIF
					_ATTACK_TARGET:_SHIP_ID = _BATTLE_SHIP_LIST:LOCAL
				NEXT
			;中型艦から攻撃 - 最も近い距離に複数の敵がいた場合、駆逐艦/巡洋艦を優先して攻撃する
			CASE 23
				FOR LOCAL, 0, _BATTLE_SHIP_COUNT
					;条件に一致しない艦船は弾く
					CALL GET_SHIP_HP(_BATTLE_SHIP_LIST:LOCAL)
					SIF RESULT == 0 || SHIP_COUNTRY:(_BATTLE_SHIP_LIST:LOCAL) == SHIP_COUNTRY:_SHIP_ID
						CONTINUE
					SIF GROUPMATCH(SHIP_CATEGORY:(_BATTLE_SHIP_LIST:LOCAL), 駆逐艦, 巡洋艦) == 0
						CONTINUE
					_TARGET_COUNT ++
				NEXT
				FOR LOCAL, 0, _BATTLE_SHIP_COUNT
					;条件に一致しない艦船は弾く
					CALL GET_SHIP_HP(_BATTLE_SHIP_LIST:LOCAL)
					SIF RESULT == 0 || SHIP_COUNTRY:(_BATTLE_SHIP_LIST:LOCAL) == SHIP_COUNTRY:_SHIP_ID
						CONTINUE
					SIF GROUPMATCH(SHIP_CATEGORY:(_BATTLE_SHIP_LIST:LOCAL), 駆逐艦, 巡洋艦) == 0
						CONTINUE
					IF _TARGET_COUNT != 0 && RAND:_TARGET_COUNT != 0
						_TARGET_COUNT --
						CONTINUE
					ENDIF
					_ATTACK_TARGET:_SHIP_ID = _BATTLE_SHIP_LIST:LOCAL
				NEXT
			;大型艦から攻撃 - 最も近い距離に複数の敵がいた場合、戦艦/空母を優先して攻撃する
			CASE 24
				FOR LOCAL, 0, _BATTLE_SHIP_COUNT
					;条件に一致しない艦船は弾く
					CALL GET_SHIP_HP(_BATTLE_SHIP_LIST:LOCAL)
					SIF RESULT == 0 || SHIP_COUNTRY:(_BATTLE_SHIP_LIST:LOCAL) == SHIP_COUNTRY:_SHIP_ID
						CONTINUE
					SIF GROUPMATCH(SHIP_CATEGORY:(_BATTLE_SHIP_LIST:LOCAL), 戦艦, 空母) == 0
						CONTINUE
					_TARGET_COUNT ++
				NEXT
				FOR LOCAL, 0, _BATTLE_SHIP_COUNT
					;条件に一致しない艦船は弾く
					CALL GET_SHIP_HP(_BATTLE_SHIP_LIST:LOCAL)
					SIF RESULT == 0 || SHIP_COUNTRY:(_BATTLE_SHIP_LIST:LOCAL) == SHIP_COUNTRY:_SHIP_ID
						CONTINUE
					SIF GROUPMATCH(SHIP_CATEGORY:(_BATTLE_SHIP_LIST:LOCAL), 戦艦, 空母) == 0
						CONTINUE
					IF _TARGET_COUNT != 0 && RAND:_TARGET_COUNT != 0
						_TARGET_COUNT --
						CONTINUE
					ENDIF
					_ATTACK_TARGET:_SHIP_ID = _BATTLE_SHIP_LIST:LOCAL
				NEXT
		ENDSELECT
		IF _ATTACK_TARGET:_SHIP_ID == -1
			CALL GET_RANDOM_ATTACK_TARGET(_BATTLE_SHIP_LIST, _DISTANCE, _SHIP_ID)
			_ATTACK_TARGET:_SHIP_ID = RESULT
		ENDIF
		RETURN 攻撃
	CASEELSE
		THROW "定義されていないオーダーが指定されました"
ENDSELECT


;---------------------------------
; 攻撃対象取得
; 第二引数 DISTANCE: 距離一覧
; 第三引数 SHIP_ID: 攻撃する艦のID
; 攻撃する艦船の有効射程が足りているかは判断しない
;---------------------------------
@GET_RANDOM_ATTACK_TARGET(_BATTLE_SHIP_LIST, _DISTANCE, _SHIP_ID)
#DIM REF _BATTLE_SHIP_LIST
#DIM REF _DISTANCE
#DIM _SHIP_ID
#DIM _LIST_SIZE
#DIM DYNAMIC _TARGET_COUNT = 0

FINDELEMENT _BATTLE_SHIP_LIST, -1
_LIST_SIZE = RESULT
FOR LOCAL, 0, _LIST_SIZE
	;条件に一致しない艦船は弾く
	CALL GET_SHIP_HP(_BATTLE_SHIP_LIST:LOCAL)
	SIF RESULT == 0 || SHIP_COUNTRY:(_BATTLE_SHIP_LIST:LOCAL) == SHIP_COUNTRY:_SHIP_ID
		CONTINUE
	_TARGET_COUNT ++
NEXT
FOR LOCAL, 0, _LIST_SIZE
	;条件に一致しない艦船は弾く
	CALL GET_SHIP_HP(_BATTLE_SHIP_LIST:LOCAL)
	SIF RESULT == 0 || SHIP_COUNTRY:(_BATTLE_SHIP_LIST:LOCAL) == SHIP_COUNTRY:_SHIP_ID
		CONTINUE
	IF _TARGET_COUNT != 0 && RAND:_TARGET_COUNT != 0
		_TARGET_COUNT --
		CONTINUE
	ENDIF
	RETURN _BATTLE_SHIP_LIST:LOCAL
NEXT

;-------------------------------------------------
; スキル発火
;-------------------------------------------------
@SKILL_ACTIVATION(BATTLE_SHIP_LIST, BATTLE_SHIP_COUNT, COUNTRY1, COUNTRY2)
#DIM REF BATTLE_SHIP_LIST
#DIM BATTLE_SHIP_COUNT
#DIM COUNTRY1
#DIM COUNTRY2
#DIM OWN_COUNTRY
#DIM ENEMY_COUNTRY
#DIM ITER
#DIM BSITER
#DIM SHIP_ID
#DIM SKILL_ID
#DIM COMMANDER_ID
#DIM CAPTAIN_ID

;艦隊司令官スキル
FOR ITER, 0, 2
	SIF COMMANDER:ITER == -1
		CONTINUE
	FOR BSITER, 0, BATTLE_SHIP_COUNT
		SHIP_ID = BATTLE_SHIP_LIST:BSITER
		SIF SHIP_COUNTRY:SHIP_ID == -1
			CONTINUE
		COMMANDER_ID = COMMANDER:ITER
		OWN_COUNTRY = CFLAG:(COMMANDER:ITER):所属 == COUNTRY1 ? COUNTRY1 # COUNTRY2
		ENEMY_COUNTRY = OWN_COUNTRY == COUNTRY1 ? COUNTRY1 # COUNTRY2
		; 艦長から見た、味方のID, 敵のID, 艦のIDを渡す
		FOR SKILL_ID, 0, MAX_SKILL_SLOT
			SIF SKILL_ID_SLOT:COMMANDER_ID:スキル_ジャンル_TROOP:SKILL_ID != -1
				TRYCALLFORM SKILL_0_TROOP_{SKILL_ID_SLOT:COMMANDER_ID:スキル_ジャンル_TROOP:SKILL_ID}_EFFECT(OWN_COUNTRY, ENEMY_COUNTRY, SHIP_ID)
			SIF SKILL_ID_SLOT:COMMANDER_ID:スキル_ジャンル_UNIQUE:SKILL_ID != -1
				TRYCALLFORM SKILL_0_UNIQUE_{SKILL_ID_SLOT:COMMANDER_ID:スキル_ジャンル_UNIQUE:SKILL_ID}_EFFECT(OWN_COUNTRY, ENEMY_COUNTRY, SHIP_ID)
		NEXT
	NEXT
NEXT
;艦長スキル
FOR BSITER, 0, BATTLE_SHIP_COUNT
	SHIP_ID = BATTLE_SHIP_LIST:BSITER
	FINDELEMENT BOARDING_SHIP_ID, SHIP_ID
	SIF RESULT == -1
		CONTINUE
	CAPTAIN_ID = RESULT
	FOR SKILL_ID, 0, MAX_SKILL_SLOT
		SIF SKILL_ID_SLOT:CAPTAIN_ID:スキル_ジャンル_PERSONAL:SKILL_ID == -1
			CONTINUE
		PRINTFORML スキル発動
		TRYCALLFORM SKILL_0_PERSONAL_{SKILL_ID_SLOT:CAPTAIN_ID:スキル_ジャンル_PERSONAL:SKILL_ID}_EFFECT(SHIP_ID, CAPTAIN_ID)
	NEXT
NEXT


;-------------------------------------------------
; 指揮官/艦長の能力発動
;-------------------------------------------------
@ABL_ACTIVATION(_BATTLE_SHIP_LIST, _BATTLE_SHIP_COUNT, _COMMANDER)
#DIM REF _BATTLE_SHIP_LIST
#DIM _BATTLE_SHIP_COUNT
#DIM REF _COMMANDER

FOR LOCAL, 0, _BATTLE_SHIP_COUNT
	FINDELEMENT BOARDING_SHIP_ID, _BATTLE_SHIP_LIST:LOCAL
	SIF RESULT == -1
		CONTINUE
	FOR LOCAL:1, 0, MAX_TYPE
		SKILL_EFFECT_PERCENTAGE:(LOCAL:1):LOCAL = (SKILL_EFFECT_PERCENTAGE:(LOCAL:1):LOCAL * 10 + ABL:RESULT:操艦) / 10
		IF SHIP_COUNTRY:(_BATTLE_SHIP_LIST:LOCAL) == CFLAG:(_COMMANDER:0):所属
			SKILL_EFFECT_PERCENTAGE:(LOCAL:1):LOCAL = (SKILL_EFFECT_PERCENTAGE:(LOCAL:1):LOCAL * 10 + ABL:(_COMMANDER:0):知略 + ABL:(_COMMANDER:0):目星) / 11
		ELSE
			SKILL_EFFECT_PERCENTAGE:(LOCAL:1):LOCAL = (SKILL_EFFECT_PERCENTAGE:(LOCAL:1):LOCAL * 10 + ABL:(_COMMANDER:1):知略 + ABL:(_COMMANDER:0):目星) / 11
		ENDIF
	NEXT
NEXT

;-------------------------------------------------
; UI表示
;-------------------------------------------------
@DISPLAY_UI(LIST1, LIST2, SHIP_ACTION, ATTACK_TARGET, DISTANCE, BROKEN_BY)
#DIM REF LIST1
#DIM REF LIST2
#DIM REF SHIP_ACTION
#DIM REF ATTACK_TARGET
#DIM REF DISTANCE
#DIM REF BROKEN_BY
#DIM ITER
#DIM MAX_COUNT
#DIM COUNTER
#DIMS PRINT_SHIP_NAME 

#DIM SHIP_DISTANCE_MOVED
#DIM CONST MAX_DISTANCE_RANGE = COMMON_DISTANCE
#DIM CONST SHIP_NAMELIST_LENGTH = 22
#DIM CONST DIST_INDICATOR_LENGTH = COMMON_DISTANCE * 4

#DIM TOTAL_AVOID, 2
#DIM TOTAL_SIELD_DAMAGE, 2
#DIM TOTAL_ARMOR_DAMAGE, 2
VARSET TOTAL_AVOID, 0
VARSET TOTAL_SIELD_DAMAGE, 0
VARSET TOTAL_ARMOR_DAMAGE, 0

FINDELEMENT LIST1, -1
MAX_COUNT = RESULT
FINDELEMENT LIST2, -1
SIF MAX_COUNT < RESULT
	MAX_COUNT = RESULT

$MAIN_LOOP
CALL DRAW_COMBAT_HEADER
FOR COUNTER, 0, MAX_COUNT
	;左側リストの処理
	;ブランク行
	IF LIST1:COUNTER == -1 
		PRINTFORM [%"", DIST_INDICATOR_LENGTH + SHIP_NAMELIST_LENGTH - 4, LEFT%]
	ELSE
	;艦が存在する行
		;装甲インジケータ
		CALL PRINT_HP_INDICATOR(LIST1:COUNTER)
		PRINTFORM  
		;シールドインジケータ
		CALL PRINT_SHIELD_INDICATOR(LIST1:COUNTER)
		PRINTFORM  
		PRINT_SHIP_NAME = %SHIP_NAME:(LIST1:COUNTER)%
		;艦名が長い場合は半角に
		SIF STRLENS(PRINT_SHIP_NAME) >= SHIP_NAMELIST_LENGTH -2
			PRINT_SHIP_NAME = %TOHALF(SHIP_NAME:(LIST1:COUNTER))%
		SIF SHIP_ACTION:(LIST1:COUNTER) == 大破
			SETCOLOR カラー_選択不可
		PRINTBUTTON @"%PRINT_SHIP_NAME, SHIP_NAMELIST_LENGTH , LEFT%", LIST1:COUNTER
		RESETCOLOR
		PRINTFORM [
		FOR ITER, 0, DIST_INDICATOR_LENGTH - DISTANCE:(LIST1:COUNTER) * (DIST_INDICATOR_LENGTH / MAX_DISTANCE_RANGE)
			SETCOLOR カラー_選択不可
			PRINTFORM .
			RESETCOLOR
		NEXT
		SIF SHIP_ACTION:(LIST1:COUNTER) == 大破
			SETCOLOR カラー_選択不可
		FONTSTYLE 1
		PRINTFORM %GET_HULL_CODE(LIST1:COUNTER)%
		FONTSTYLE 0
		RESETCOLOR
		FOR ITER, 0, (DISTANCE:(LIST1:COUNTER)  - 1)* (DIST_INDICATOR_LENGTH / MAX_DISTANCE_RANGE)
			SETCOLOR カラー_選択不可
			PRINTFORM .
			RESETCOLOR
		NEXT
		PRINTFORM ]
		RESETCOLOR
		; 計算など
		TOTAL_AVOID:0 += AVOID_DAMAGE:(LIST1:COUNTER)
		TOTAL_SIELD_DAMAGE:0 += DAMAGE_TO_SIELD:(LIST1:COUNTER)
		TOTAL_ARMOR_DAMAGE:0 += DAMAGE_TO_ARMOR:(LIST1:COUNTER)
	ENDIF
	PRINTFORM  ｜ 
	;右側リストの処理
	;ブランク行
	IF LIST2:COUNTER == -1
		PRINTFORM [%"", DIST_INDICATOR_LENGTH + SHIP_NAMELIST_LENGTH - 4, RIGHT%]
	ELSE
		PRINT_SHIP_NAME = %SHIP_NAME:(LIST2:COUNTER)%
		;艦名が長い場合は半角に
		SIF STRLENS(PRINT_SHIP_NAME) >= SHIP_NAMELIST_LENGTH - 2
			PRINT_SHIP_NAME = %TOHALF(SHIP_NAME:(LIST2:COUNTER))%
		SIF SHIP_ACTION:(LIST2:COUNTER) == 大破
			SETCOLOR カラー_選択不可
		PRINTFORM [
		FOR ITER, 0, (DISTANCE:(LIST2:COUNTER)  - 1)* (DIST_INDICATOR_LENGTH / MAX_DISTANCE_RANGE)
			SETCOLOR カラー_選択不可
			PRINTFORM .
			RESETCOLOR
		NEXT
		SIF SHIP_ACTION:(LIST2:COUNTER) == 大破
			SETCOLOR カラー_選択不可
		FONTSTYLE 1
		PRINTFORM %GET_HULL_CODE(LIST2:COUNTER)%
		FONTSTYLE 0
		RESETCOLOR
		FOR ITER, 0, DIST_INDICATOR_LENGTH - DISTANCE:(LIST2:COUNTER) * (DIST_INDICATOR_LENGTH / MAX_DISTANCE_RANGE)
			SETCOLOR カラー_選択不可
			PRINTFORM .
			RESETCOLOR
		NEXT
		PRINTFORM ]
		SIF SHIP_ACTION:(LIST2:COUNTER) == 大破
			SETCOLOR カラー_選択不可
		PRINTBUTTON @"%PRINT_SHIP_NAME, SHIP_NAMELIST_LENGTH, RIGHT%", LIST2:COUNTER
		RESETCOLOR
		PRINTFORM  
		;シールドインジケータ
		CALL PRINT_SHIELD_INDICATOR(LIST2:COUNTER)
		PRINTFORM  
		;装甲インジケータ
		CALL PRINT_HP_INDICATOR(LIST2:COUNTER)
		RESETCOLOR
		; 計算など
		TOTAL_AVOID:1 += AVOID_DAMAGE:(LIST2:COUNTER)
		TOTAL_SIELD_DAMAGE:1 += DAMAGE_TO_SIELD:(LIST2:COUNTER)
		TOTAL_ARMOR_DAMAGE:1 += DAMAGE_TO_ARMOR:(LIST2:COUNTER)
	ENDIF
	PRINTL
NEXT
CUSTOMDRAWLINE =
PRINTFORML 回避したダメージ　　: {TOTAL_AVOID:0, 8, RIGHT} | {TOTAL_AVOID:1, 8, RIGHT}
PRINTFORML シールドへのダメージ: {TOTAL_SIELD_DAMAGE:0, 8, RIGHT} | {TOTAL_SIELD_DAMAGE:1, 8, RIGHT}
PRINTFORML 装甲へのダメージ　　: {TOTAL_ARMOR_DAMAGE:0, 8, RIGHT} | {TOTAL_ARMOR_DAMAGE:1, 8, RIGHT}
CUSTOMDRAWLINE =
PRINTBUTTON "[9999] 進行", 9999

INPUT

IF RESULT >= 0 && RESULT < MAX_SHIP
	CUSTOMDRAWLINE =
	PRINTL 現在の行動
	SETCOLOR 0X333333
	DRAWLINE
	RESETCOLOR
	SELECTCASE SHIP_ACTION:RESULT
		CASE 撤退
			PRINTL 撤退中
		CASE 前進
			PRINTL 前進中
		CASE 攻撃
			PRINTFORML 攻撃中(%SHIP_NAME:(ATTACK_TARGET:RESULT)%)
			; )
		CASE 後退
			PRINTL 後退中
		CASE 大破
			PRINTFORML 大破(%SHIP_NAME:(BROKEN_BY:RESULT)%の攻撃による)
	ENDSELECT
	PRINTL
	CUSTOMDRAWLINE =
	PRINTFORML スキルによるステータスの変化
	SETCOLOR 0X333333
	DRAWLINE
	RESETCOLOR
	FOR LOCAL, 0, MAX_TYPE
		SIF SKILL_EFFECT_PERCENTAGE:LOCAL:RESULT > 100
			SETCOLOR 0X33AA33
		SIF SKILL_EFFECT_PERCENTAGE:LOCAL:RESULT < 100
			SETCOLOR 0XAA3333
		LOCALS = {SKILL_EFFECT_PERCENTAGE:LOCAL:RESULT}\%
		PRINTFORM %TYPE_TITLE:LOCAL, 22, LEFT%%LOCALS, 12, LEFT%
		SIF LOCAL % 2 == 1
			PRINTL 
		RESETCOLOR
	NEXT
	PRINTL
	CUSTOMDRAWLINE =
	PRINTL この艦が与えたダメージの内訳
	SETCOLOR 0X333333
	DRAWLINE
	RESETCOLOR
	PRINTFORML 回避したダメージ　　　　: {AVOID_DAMAGE:RESULT}
	PRINTFORML シールドに与えたダメージ: {DAMAGE_TO_SIELD:RESULT}
	PRINTFORML 装甲に与えたダメージ　　: {DAMAGE_TO_ARMOR:RESULT}
	PRINTL
	CUSTOMDRAWLINE =
	CALL SHOW_SHIP_INFO(RESULT)
	GOTO MAIN_LOOP
ELSEIF RESULT >= MAX_SHIP && RESULT < MAX_SHIP + CHARANUM
	CALL SHOW_SKILLS(RESULT - MAX_SHIP)
	GOTO MAIN_LOOP
ELSEIF RESULT == 9999
	RETURN
ELSE
	GOTO MAIN_LOOP
ENDIF

;-------------------------------------------------
; 行動実行
;-------------------------------------------------
@EXECUTE_ACTION(BATTLE_SHIP_LIST, BATTLE_SHIP_COUNT, SHIP_ACTION, ATTACK_TARGET, DISTANCE, BROKEN_BY)
#DIM REF BATTLE_SHIP_LIST
#DIM BATTLE_SHIP_COUNT
#DIM REF SHIP_ACTION
#DIM REF ATTACK_TARGET
#DIM REF DISTANCE
#DIM REF BROKEN_BY
#DIM LIST_ITER
#DIM ATK_SHIP_ID
#DIM DEF_SHIP_ID

FOR LIST_ITER, 0, BATTLE_SHIP_COUNT
	ATK_SHIP_ID = BATTLE_SHIP_LIST:LIST_ITER
	SELECTCASE SHIP_ACTION:ATK_SHIP_ID
		CASE 撤退
			; 何もしない
		CASE 前進
			DISTANCE:ATK_SHIP_ID = LIMIT(DISTANCE:ATK_SHIP_ID - 1, 1, COMMON_DISTANCE)
		CASE 攻撃
			DEF_SHIP_ID = ATTACK_TARGET:ATK_SHIP_ID
			CALL FIRE_TO_TARGET(ATK_SHIP_ID, DEF_SHIP_ID, DISTANCE:ATK_SHIP_ID)
			CALL GET_SHIP_HP(DEF_SHIP_ID)
			IF RESULT == 0
				SHIP_ACTION:DEF_SHIP_ID = 大破
				BROKEN_BY:DEF_SHIP_ID = ATK_SHIP_ID
			ENDIF
			CALL GET_SHIP_HP(ATK_SHIP_ID)
			IF RESULT == 0
				SHIP_ACTION:ATK_SHIP_ID = 大破
				BROKEN_BY:ATK_SHIP_ID = ATK_SHIP_ID
			ENDIF
		CASE 後退
			DISTANCE:ATK_SHIP_ID = LIMIT(DISTANCE:ATK_SHIP_ID + 1, 1, COMMON_DISTANCE)
		CASE 大破, 0
			; 何もしない	
	ENDSELECT
NEXT

;-------------------------------------------------
; 決着判定
;-------------------------------------------------
@CHECK_ENDED(SHIP_LIST1, SHIP_LIST2, SHIP_ACTION)
#DIM REF SHIP_LIST1
#DIM REF SHIP_LIST2
#DIM REF SHIP_ACTION
#DIM LIST_COUNT
#DIM BROKEN_COUNT
#DIM SHIP_LIST_COUNT

BROKEN_COUNT = 0

FINDELEMENT SHIP_LIST1, -1
SHIP_LIST_COUNT = RESULT
FOR LIST_COUNT, 0, SHIP_LIST_COUNT
	SIF SHIP_ACTION:(SHIP_LIST1:LIST_COUNT) == 大破 || SHIP_ACTION:(SHIP_LIST1:LIST_COUNT) == 撤退
		BROKEN_COUNT ++
NEXT
SIF SHIP_LIST_COUNT == BROKEN_COUNT
	RETURN 1

BROKEN_COUNT = 0
FINDELEMENT SHIP_LIST2, -1
SHIP_LIST_COUNT = RESULT
FOR LIST_COUNT, 0, SHIP_LIST_COUNT
	SIF SHIP_ACTION:(SHIP_LIST2:LIST_COUNT) == 大破 || SHIP_ACTION:(SHIP_LIST2:LIST_COUNT) == 撤退
		BROKEN_COUNT ++
NEXT
SIF SHIP_LIST_COUNT == BROKEN_COUNT
	RETURN 2

RETURN 0

;-------------------------------------------------
;COMBAT_REWARD
; 戦闘後報酬獲得処理
;-------------------------------------------------
@COMBAT_REWARD(ENEMY_SHIP_LIST, SHIP_ACTION)
#DIM REF ENEMY_SHIP_LIST
#DIM REF SHIP_ACTION
#DIM LIST_COUNT
#DIM BROKEN_COUNT
#DIM ENEMY_SHIP_LIST_COUNT
#DIM CONST 報酬基準値 = 1500
#DIM 艦種別報酬係数 ;百分率
#DIM 報酬合計
#DIM CONST 鹵獲イベント発生率 = 300, 200, 130, 100, 50, 0, 0, 300, 300
#DIMS DYNAMIC 鹵獲候補艦リスト
#DIMS DYNAMIC 生け捕り候補怪獣リスト
#DIM DYNAMIC 対象艦

BROKEN_COUNT = 0
報酬合計 = 0

FINDELEMENT ENEMY_SHIP_LIST, -1
ENEMY_SHIP_LIST_COUNT = RESULT

FOR LIST_COUNT, 0, ENEMY_SHIP_LIST_COUNT
	IF SHIP_ACTION:(ENEMY_SHIP_LIST:LIST_COUNT) == 大破
		;戦闘報酬加算処理
		SELECTCASE SHIP_CATEGORY:(ENEMY_SHIP_LIST:LIST_COUNT)
			CASE コルベット
				艦種別報酬係数 = 120
			CASE フリゲート
				艦種別報酬係数 = 150
			CASE 駆逐艦
				艦種別報酬係数 = 200
			CASE 巡洋艦
				艦種別報酬係数 = 400
			CASE 戦艦
				艦種別報酬係数 = 800
			CASE 空母
				艦種別報酬係数 = 800
			CASEELSE
				艦種別報酬係数 = 100
		ENDSELECT
		報酬合計 += RAND(報酬基準値 * 80 / 100, 報酬基準値) * 艦種別報酬係数 / 100
		;大破艦が鹵獲可能な艦であればリスト登録
		CALL COMBAT_IS_SHIP_CAPTURABLE(ENEMY_SHIP_LIST:LIST_COUNT)
		SIF RESULT
			鹵獲候補艦リスト = %LIST_ADD(鹵獲候補艦リスト, TOSTR(ENEMY_SHIP_LIST:LIST_COUNT))%
		;大破艦が生け捕り可能な宇宙怪獣であればリスト登録
		CALL COMBAT_IS_SHIP_FISHERMAN(ENEMY_SHIP_LIST:LIST_COUNT)
		SIF RESULT
			生け捕り候補怪獣リスト = %LIST_ADD(生け捕り候補怪獣リスト, TOSTR(ENEMY_SHIP_LIST:LIST_COUNT))%
	ENDIF
NEXT
IF 報酬合計 > 0
	MONEY += 報酬合計
	CALLF FuncTagSetText_Print(@"戦闘宙域から資金@C:{カラー_黄}@$%TOSTR((報酬合計), "###,###,###")%@/C@相当の希少資源を回収しました", 1)
	WAIT
ENDIF

;鹵獲イベント処理
;LOCAL = RAND:1000
IF LIST_COUNT(鹵獲候補艦リスト) != 0
	対象艦 = TOINT(LIST_GET(鹵獲候補艦リスト, RAND(0, LIST_COUNT(鹵獲候補艦リスト))))
	;	SIF 鹵獲イベント発生率:(SHIP_CATEGORY:対象艦) > LOCAL
	;鹵獲イベントが起きるかはCOMBAT_SHIP_CAPTURE_EVENT側で判定する様に
	CALL COMBAT_SHIP_CAPTURE_EVENT(対象艦)
ENDIF
;生け捕りイベント処理
LOCAL = RAND:1000
IF LIST_COUNT(生け捕り候補怪獣リスト) != 0
	対象艦 = TOINT(LIST_GET(生け捕り候補怪獣リスト, RAND(0, LIST_COUNT(生け捕り候補怪獣リスト))))
	SIF 鹵獲イベント発生率:(SHIP_CATEGORY:対象艦) > LOCAL
		CALL COMBAT_SHIP_FISHERMAN_EVENT(対象艦)
ENDIF

RETURN

;-------------------------------------------------
;GET_COMBAT_EXP
; 指揮官、艦長の経験値取得
;-------------------------------------------------
@GET_COMBAT_EXP(_COMMANDER, _BATTLE_SHIP_COUNT, _BROKEN_BY, _SHIP_LIST)
#DIM _COMMANDER
#DIM _BATTLE_SHIP_COUNT
#DIM REF _BROKEN_BY
#DIM REF _SHIP_LIST
#DIM _CAPTAIN_EXP, MAX_CHARA_NUM
#DIM _SIZE

VARSET _CAPTAIN_EXP, 0

CALL PRINT_ADD_EXP(_COMMANDER, "知略経験値", _BATTLE_SHIP_COUNT, 1)
CALL PRINT_ADD_EXP(_COMMANDER, "目星経験値", _BATTLE_SHIP_COUNT, 1)
FOR LOCAL, 0, MAX_SHIP
	SIF _BROKEN_BY:LOCAL == -1 || SHIP_COUNTRY:(_BROKEN_BY:LOCAL) != 国家ID_プレイヤー
		CONTINUE
	FINDELEMENT BOARDING_SHIP_ID, _BROKEN_BY:LOCAL
	SIF RESULT == -1
		CONTINUE
	_CAPTAIN_EXP:RESULT += RAND:3 + 2
NEXT
FINDELEMENT _SHIP_LIST, -1
_SIZE = RESULT
FOR LOCAL, 0, _SIZE
	FINDELEMENT BOARDING_SHIP_ID, (_SHIP_LIST:LOCAL)
	SIF RESULT == -1
		CONTINUE
	CALL PRINT_ADD_EXP(LOCAL, "操艦経験値", _CAPTAIN_EXP:LOCAL + RAND:2 + 1, 1)
NEXT
WAIT

;-------------------------------------------------
;COMBAT_SET_SHIP_CONDITION
; プレイヤー文明艦のSHIP_CONDITION 更新
;-------------------------------------------------
@COMBAT_SET_SHIP_CONDITION(FRIEND_SHIP_LIST, SHIP_ACTION)
#DIM REF FRIEND_SHIP_LIST
#DIM REF SHIP_ACTION
#DIM SHIP_ID

FOR SHIP_ID, 0, MAX_SHIP
	;<大破>状態の艦船が戦闘でさらに大破した場合は除籍する
	IF SHIP_COUNTRY:SHIP_ID == 国家ID_プレイヤー && SHIP_ACTION:SHIP_ID == 大破 && SHIP_CONDITION != 艦船状態_大破
		SHIP_CONDITION:SHIP_ID = 艦船状態_大破
		SHIP_NAME:SHIP_ID '= "<大破>" + SHIP_NAME:SHIP_ID
		CALL GET_SHIP_TOTAL_HP(SHIP_ID)
		;装甲値を +1して戦闘終了後に除籍されるのを防ぐ
		SIF CONFIG:300 == 1
			SHIP_DAMAGE:SHIP_ID --
	ENDIF
NEXT

RETURN

;-------------------------------------------------
; CREAT_TEAMED_LIST
; 所属別の艦隊リストを作る
;-------------------------------------------------
@CREAT_TEAMED_LIST(TEAM1_LIST, TEAM2_LIST, BATTLE_SHIP_LIST, BATTLE_SHIP_COUNT, TEAM1_COUNTRY_ID, TEAM2_COUNTRY_ID)
#DIM REF TEAM1_LIST
#DIM REF TEAM2_LIST
#DIM REF BATTLE_SHIP_LIST
#DIM BATTLE_SHIP_COUNT
#DIM TEAM1_COUNTRY_ID
#DIM TEAM2_COUNTRY_ID
#DIM TEAM1_COUNTER
#DIM TEAM2_COUNTER
#DIM TEAM1_SHIP_CATEGORY, MAX_SHIP
#DIM TEAM2_SHIP_CATEGORY, MAX_SHIP
#DIM COUNTER

#DIM CONST BATTLE_LIST_SORT_ID = 9, 5, 4, 3, 2, 1, 0, 7, 8, 6

TEAM1_COUNTER = 0
TEAM2_COUNTER = 0
VARSET TEAM1_SHIP_CATEGORY, 999
VARSET TEAM2_SHIP_CATEGORY, 999

;まず所属別に分ける
FOR COUNTER, 0, BATTLE_SHIP_COUNT
	IF SHIP_COUNTRY:(BATTLE_SHIP_LIST:COUNTER) == TEAM1_COUNTRY_ID
		TEAM1_LIST:TEAM1_COUNTER = BATTLE_SHIP_LIST:COUNTER
		TEAM1_SHIP_CATEGORY:TEAM1_COUNTER = BATTLE_LIST_SORT_ID:(SHIP_CATEGORY:(BATTLE_SHIP_LIST:COUNTER))
		TEAM1_COUNTER++
	ELSEIF SHIP_COUNTRY:(BATTLE_SHIP_LIST:COUNTER) == TEAM2_COUNTRY_ID
		TEAM2_LIST:TEAM2_COUNTER = BATTLE_SHIP_LIST:COUNTER
		TEAM2_SHIP_CATEGORY:TEAM2_COUNTER = BATTLE_LIST_SORT_ID:(SHIP_CATEGORY:(BATTLE_SHIP_LIST:COUNTER))
		TEAM2_COUNTER++
	ENDIF
NEXT

;次に艦種別に分ける
ARRAYMSORT TEAM1_SHIP_CATEGORY, TEAM1_LIST
ARRAYMSORT TEAM2_SHIP_CATEGORY, TEAM2_LIST


;-------------------------------------------------
; 指定艦による指定艦への攻撃
;-------------------------------------------------
@FIRE_TO_TARGET(ATK_SHIP_ID, DEF_SHIP_ID, ATK_SHIP_POS)
#DIM ATK_SHIP_ID
#DIM DEF_SHIP_ID
#DIM ATK_SHIP_POS
#DIM COUNTER
#DIM HIT_COUNTER
#DIM ITER
#DIM DYNAMIC ATK_SHIP_STATUS, SHIP_STATUS_LENGTH
#DIM DYNAMIC WEAPON_STATUS, STATUS_LENGTH

;主砲による攻撃
TRYCALLFORM GET_SHIP_STATUS_{SHIP_MODEL:ATK_SHIP_ID}(ATK_SHIP_STATUS)
FOR COUNTER, 0, ATK_SHIP_STATUS:SHIP_MAIN_WEAPON_SLOT
	CALL GET_SHIP_MAIN_WEAPON_STATUS(ATK_SHIP_ID, COUNTER, WEAPON_STATUS)
	;攻撃側のスキル効果設定
	CALL MERGE_SKILL_EFFECT_TO_WEAPON_STATUS(WEAPON_STATUS, ATK_SHIP_ID)
	HIT_COUNTER = CHECK_WEAPON_ATTACK_IS_HIT(WEAPON_STATUS, ATK_SHIP_POS)
	IF HIT_COUNTER > 0
		FOR ITER, 0, HIT_COUNTER
			CALL BATTLE_DAMAGE(WEAPON_STATUS, ATK_SHIP_ID, DEF_SHIP_ID)
		NEXT
	ENDIF
NEXT
;副砲による攻撃
FOR COUNTER, 0, ATK_SHIP_STATUS:SHIP_SUB_WEAPON_SLOT
	CALL GET_SHIP_SUB_WEAPON_STATUS(ATK_SHIP_ID, COUNTER, WEAPON_STATUS)
	;攻撃側のスキル効果設定
	CALL MERGE_SKILL_EFFECT_TO_WEAPON_STATUS(WEAPON_STATUS, ATK_SHIP_ID)
	HIT_COUNTER = CHECK_WEAPON_ATTACK_IS_HIT(WEAPON_STATUS, ATK_SHIP_POS)
	IF HIT_COUNTER > 0
		FOR ITER, 0, HIT_COUNTER
			CALL BATTLE_DAMAGE(WEAPON_STATUS, ATK_SHIP_ID, DEF_SHIP_ID)
		NEXT
	ENDIF
NEXT
;-------------------------------------------------
; 攻撃側のスキル効果適用
;-------------------------------------------------
@MERGE_SKILL_EFFECT_TO_WEAPON_STATUS(WEAPON_STATUS, SHIP_ID)
#DIM REF WEAPON_STATUS
#DIM SHIP_ID

SELECTCASE WEAPON_STATUS:WEAPON_TYPE
	CASE 実体弾, 実体弾_自爆
		WEAPON_STATUS:DAMAGE = WEAPON_STATUS:DAMAGE * SKILL_EFFECT_PERCENTAGE:TYPE_実体弾与ダメージ:SHIP_ID / 100
		WEAPON_STATUS:DAMAGE = WEAPON_STATUS:DAMAGE * SKILL_EFFECT_PERCENTAGE:TYPE_実体弾命中:SHIP_ID / 100
	CASE レーザー, レーザー_自爆
		WEAPON_STATUS:DAMAGE = WEAPON_STATUS:DAMAGE * SKILL_EFFECT_PERCENTAGE:TYPE_レーザー与ダメージ:SHIP_ID / 100
		WEAPON_STATUS:DAMAGE = WEAPON_STATUS:DAMAGE * SKILL_EFFECT_PERCENTAGE:TYPE_レーザー命中:SHIP_ID / 100
	CASE ミサイル, ミサイル_自爆
		WEAPON_STATUS:DAMAGE = WEAPON_STATUS:DAMAGE * SKILL_EFFECT_PERCENTAGE:TYPE_ミサイル与ダメージ:SHIP_ID / 100
		WEAPON_STATUS:DAMAGE = WEAPON_STATUS:DAMAGE * SKILL_EFFECT_PERCENTAGE:TYPE_ミサイル命中:SHIP_ID / 100
	CASE 艦載機, 艦載機_自爆
		WEAPON_STATUS:DAMAGE = WEAPON_STATUS:DAMAGE * SKILL_EFFECT_PERCENTAGE:TYPE_艦載機与ダメージ:SHIP_ID / 100
		WEAPON_STATUS:HIT_RATE = WEAPON_STATUS:HIT_RATE * SKILL_EFFECT_PERCENTAGE:TYPE_艦載機命中:SHIP_ID / 100
	CASE 魚雷, 魚雷_自爆
		WEAPON_STATUS:DAMAGE = WEAPON_STATUS:DAMAGE * SKILL_EFFECT_PERCENTAGE:TYPE_魚雷与ダメージ:SHIP_ID / 100
		WEAPON_STATUS:DAMAGE = WEAPON_STATUS:DAMAGE * SKILL_EFFECT_PERCENTAGE:TYPE_魚雷命中:SHIP_ID / 100
	CASE ビーム, ビーム_自爆
		WEAPON_STATUS:DAMAGE = WEAPON_STATUS:DAMAGE * SKILL_EFFECT_PERCENTAGE:TYPE_ビーム与ダメージ:SHIP_ID / 100
		WEAPON_STATUS:DAMAGE = WEAPON_STATUS:DAMAGE * SKILL_EFFECT_PERCENTAGE:TYPE_ビーム命中:SHIP_ID / 100
ENDSELECT

WEAPON_STATUS:DAMAGE = WEAPON_STATUS:DAMAGE * SKILL_EFFECT_PERCENTAGE:TYPE_与ダメージ:SHIP_ID / 100
WEAPON_STATUS:HIT_RATE = WEAPON_STATUS:HIT_RATE * SKILL_EFFECT_PERCENTAGE:TYPE_命中率:SHIP_ID / 100


;-------------------------------------------------
; 防御側のスキル効果適用
;-------------------------------------------------
@MERGE_SKILL_EFFECT_TO_SHIP_STATUS(SHIP_STATUS, SHIP_ID)
#DIM REF SHIP_STATUS
#DIM SHIP_ID

SHIP_STATUS:AVOID = SHIP_STATUS:AVOID * SKILL_EFFECT_PERCENTAGE:TYPE_回避率:SHIP_ID / 100

;-------------------------------------------------
; 対空に対する回避の取得
;-------------------------------------------------
@GET_SKILL_EFFECT_TO_AVOID_ANTI_AIR(SHIP_ID)
#FUNCTION
#DIM SHIP_ID

RETURNF SKILL_EFFECT_PERCENTAGE:TYPE_対空回避:SHIP_ID

;-------------------------------------------------
; 迎撃時の副砲へのスキル適用
;-------------------------------------------------
@MERGE_SKILL_EFFECT_TO_SUB_WEAPON_STATUS(WEAPON_STATUS, SHIP_ID)
#DIM REF WEAPON_STATUS
#DIM SHIP_ID

SELECTCASE WEAPON_STATUS:WEAPON_TYPE
	CASE 実体弾, 実体弾_自爆
		WEAPON_STATUS:DAMAGE = WEAPON_STATUS:DAMAGE * SKILL_EFFECT_PERCENTAGE:TYPE_実体弾命中:SHIP_ID / 100
	CASE レーザー, レーザー_自爆
		WEAPON_STATUS:DAMAGE = WEAPON_STATUS:DAMAGE * SKILL_EFFECT_PERCENTAGE:TYPE_レーザー命中:SHIP_ID / 100
	CASE ミサイル, ミサイル_自爆
		WEAPON_STATUS:DAMAGE = WEAPON_STATUS:DAMAGE * SKILL_EFFECT_PERCENTAGE:TYPE_ミサイル命中:SHIP_ID / 100
	CASE 艦載機, 艦載機_自爆
		WEAPON_STATUS:HIT_RATE = WEAPON_STATUS:HIT_RATE * SKILL_EFFECT_PERCENTAGE:TYPE_艦載機命中:SHIP_ID / 100
	CASE 魚雷, 魚雷_自爆
		WEAPON_STATUS:DAMAGE = WEAPON_STATUS:DAMAGE * SKILL_EFFECT_PERCENTAGE:TYPE_魚雷命中:SHIP_ID / 100
	CASE ビーム, ビーム_自爆
		WEAPON_STATUS:DAMAGE = WEAPON_STATUS:DAMAGE * SKILL_EFFECT_PERCENTAGE:TYPE_ビーム命中:SHIP_ID / 100
ENDSELECT

WEAPON_STATUS:ANTI_AIR = WEAPON_STATUS:ANTI_AIR * SKILL_EFFECT_PERCENTAGE:TYPE_対空ダメージ:SHIP_ID / 100
WEAPON_STATUS:HIT_RATE = WEAPON_STATUS:HIT_RATE * SKILL_EFFECT_PERCENTAGE:TYPE_対空命中:SHIP_ID / 100

;-------------------------------------------------
; シールドの増幅発動
;-------------------------------------------------
@GET_SKILL_EFFECT_TO_SIELD_POWER(SHIP_ID)
#FUNCTION
#DIM SHIP_ID

RETURNF SKILL_EFFECT_PERCENTAGE:TYPE_シールド増加:SHIP_ID

;-------------------------------------------------
; 被ダメージ増減発動
;-------------------------------------------------
@GET_SKILL_EFFECT_TO_RECIEVED_DAMAGE(SHIP_ID)
#FUNCTION
#DIM SHIP_ID

RETURNF SKILL_EFFECT_PERCENTAGE:TYPE_被ダメージ:SHIP_ID

;-------------------------------------------------
; 攻撃側の命中判定(命中回数を返す。発射していなかったら-1)
;-------------------------------------------------
@CHECK_WEAPON_ATTACK_IS_HIT(WEAPON_STATUS, ATK_SHIP_POS)
#FUNCTION
#DIM REF WEAPON_STATUS
#DIM ATK_SHIP_POS
#DIM DYNAMIC HIT_COUNTER = 0

;射程が足りなかった-1を返す
SIF WEAPON_STATUS:FIRE_RANGE < ATK_SHIP_POS
	RETURNF -1
;命中判定
FOR LOCAL, 0, WEAPON_STATUS:FIRE_RATE
	;攻撃命中せず
	SIF MIN(WEAPON_STATUS:HIT_RATE, MAX_PARAM_HIT_RATE) < RAND:100
		CONTINUE
	HIT_COUNTER ++
NEXT
RETURNF HIT_COUNTER

;-------------------------------------------------
; ダメージ計算
; 0: 回避 or 撃墜, 1: 命中
;-------------------------------------------------
@BATTLE_DAMAGE(WEAPON_STATUS, ATK_SHIP_ID, DEF_SHIP_ID)
#DIM REF WEAPON_STATUS
#DIM SHIP_STATUS, SHIP_STATUS_LENGTH
#DIM ATK_SHIP_ID
#DIM DEF_SHIP_ID
#DIM SIELD_HP
#DIM ARMOR_HP
#DIM WEAPON_DAMAGE
#DIM _SHIP_AVOID
#DIM _AVOID_DAMAGE

; 自爆処理
IF WEAPON_STATUS:WEAPON_TYPE >= 実体弾_自爆 && WEAPON_STATUS:WEAPON_TYPE <= ビーム_自爆
	CALL GET_SHIP_SIELD(ATK_SHIP_ID)
	SIELD_HP = RESULT
	SIELD_DAMAGE:ATK_SHIP_ID += SIELD_HP

	CALL GET_SHIP_HP(ATK_SHIP_ID)
	ARMOR_HP = RESULT

	SHIP_DAMAGE:ATK_SHIP_ID += ARMOR_HP
ENDIF

TRYCALLFORM GET_SHIP_STATUS_{SHIP_MODEL:DEF_SHIP_ID}(SHIP_STATUS)
CALL MERGE_SKILL_EFFECT_TO_SHIP_STATUS(SHIP_STATUS, DEF_SHIP_ID)
; 最大回避率はMAX_PARAM_AVOID: 90に設定
; 回避に成功したらAVOID_DAMAGEに記録
_SHIP_AVOID = MIN(SHIP_STATUS:SHIP_AVOID, MAX_PARAM_AVOID)
; 完全回避は回避力/500の確率を当てた場合のみ
_AVOID_DAMAGE = 0
IF _SHIP_AVOID > RAND:500
	AVOID_DAMAGE:DEF_SHIP_ID += WEAPON_STATUS:DAMAGE
	RETURN 0
; クリティカルも回避力/250+250で判定
ELSEIF _SHIP_AVOID > RAND:250 + RAND:250
	 TIMES SKILL_EFFECT_PERCENTAGE:TYPE_被ダメージ:DEF_SHIP_ID, 2.00
; その他の場合は確率に応じでダメージ軽減
ELSE
	_AVOID_DAMAGE = (RAND:_SHIP_AVOID + 1) * (WEAPON_STATUS:DAMAGE / AVOID_REDUCE_RATE)
	AVOID_DAMAGE:DEF_SHIP_ID += _AVOID_DAMAGE
ENDIF

;ダメージの算出
WEAPON_DAMAGE = MAX(WEAPON_STATUS:DAMAGE - _AVOID_DAMAGE, 0, WEAPON_STATUS:DAMAGE - _AVOID_DAMAGE)
; 対空判定
CALL CALC_ANTI_AIR_DAMAGE(WEAPON_STATUS, ATK_SHIP_ID, DEF_SHIP_ID)
CALL GET_TOTAL_DAMAGE(WEAPON_STATUS, WEAPON_DAMAGE, RESULT)
WEAPON_DAMAGE = RESULT
;ダメージにスキル効果適用
WEAPON_DAMAGE = WEAPON_DAMAGE * GET_SKILL_EFFECT_TO_RECIEVED_DAMAGE(DEF_SHIP_ID) / 100

; シールドHPの計算
CALL GET_SHIP_SIELD(DEF_SHIP_ID)
SIELD_HP = RESULT
;シールドが残っていたらシールドにダメージ
IF SIELD_HP > 0
	;スキル効果によるシールド増減効果
	SIELD_HP = SIELD_HP * GET_SKILL_EFFECT_TO_SIELD_POWER(DEF_SHIP_ID) / 100
	WEAPON_DAMAGE = WEAPON_DAMAGE * SIELD_DAMAGE_MULTIPLIER:(WEAPON_STATUS:WEAPON_TYPE) / 100
	IF SIELD_HP > WEAPON_DAMAGE
		SIF WEAPON_DAMAGE < 0
			THROW WEAPON_DAMAGE: {WEAPON_DAMAGE}
		SIELD_DAMAGE:DEF_SHIP_ID += WEAPON_DAMAGE
		; ログ
		DAMAGE_TO_SIELD:ATK_SHIP_ID += WEAPON_DAMAGE
		RETURN 1
	ENDIF
	SIELD_DAMAGE:DEF_SHIP_ID += SIELD_HP
	; ログ
	SIF SIELD_HP < 0
		THROW SIELD_HP: {SIELD_HP}
	DAMAGE_TO_SIELD:ATK_SHIP_ID += SIELD_HP

	WEAPON_DAMAGE -= SIELD_HP
	WEAPON_DAMAGE = WEAPON_DAMAGE * 100 / SIELD_DAMAGE_MULTIPLIER:(WEAPON_STATUS:WEAPON_TYPE)
ENDIF
CALL GET_SHIP_HP(DEF_SHIP_ID)
ARMOR_HP = RESULT
;装甲にダメージ
WEAPON_DAMAGE = WEAPON_DAMAGE + ARMOR_DAMAGE_MULTIPLIER:(WEAPON_STATUS:WEAPON_TYPE) / 100
IF ARMOR_HP >= WEAPON_DAMAGE
	SHIP_DAMAGE:DEF_SHIP_ID += WEAPON_DAMAGE
	DAMAGE_TO_ARMOR:ATK_SHIP_ID += WEAPON_DAMAGE
ELSE
	SHIP_DAMAGE:DEF_SHIP_ID += ARMOR_HP
	DAMAGE_TO_ARMOR:ATK_SHIP_ID += ARMOR_HP
ENDIF
RETURN 1

;-------------------------------------------------
; 対空火砲のダメージ計算 - 艦載機の被撃墜処理も含む
; 戻り値: 対空火砲によるダメージ
;-------------------------------------------------
@CALC_ANTI_AIR_DAMAGE(WEAPON_STATUS, ATK_SHIP_ID, DEF_SHIP_ID)
#DIM REF WEAPON_STATUS
#DIM ATK_SHIP_ID
#DIM DEF_SHIP_ID
#DIM DEF_SHIP_STATUS, SHIP_STATUS_LENGTH
#DIM WEAPON_AVOID
#DIM WEAPON_HP
#DIM WEAPON_TOTAL_HP
#DIM WEAPON_COUNTER
#DIM FIRE_COUNTER
#DIM ANTI_AIR_STATUS, STATUS_LENGTH
#DIM ANTI_AIR_DAMAGE
#DIM HIT_COUNTER

ANTI_AIR_DAMAGE = 0

TRYCALLFORM GET_SHIP_STATUS_{SHIP_MODEL:DEF_SHIP_ID}(DEF_SHIP_STATUS)
; 対空火砲による撃墜判定
IF GROUPMATCH(WEAPON_STATUS:WEAPON_TYPE, ミサイル, 艦載機, 魚雷, ミサイル_自爆, 艦載機_自爆, 魚雷_自爆)
	SELECTCASE WEAPON_STATUS:WEAPON_TYPE
		CASE ミサイル, ミサイル_自爆
			WEAPON_HP = MISSILE_HP
			WEAPON_TOTAL_HP = MISSILE_HP * WEAPON_STATUS:FIRE_RATE
			WEAPON_AVOID = MISSILE_AVOID
		CASE 艦載機, 艦載機_自爆
			WEAPON_HP = WEAPON_STATUS:AIR_SHIP_HP
			WEAPON_TOTAL_HP = WEAPON_STATUS:AIR_SHIP_HP * WEAPON_STATUS:AIR_SHIP_COUNT
			WEAPON_AVOID = AIR_SHIP_AVOID * GET_SKILL_EFFECT_TO_AVOID_ANTI_AIR(ATK_SHIP_ID) / 100
		CASE 魚雷, 魚雷_自爆
			WEAPON_HP = TORPED_HP
			WEAPON_TOTAL_HP = TORPED_HP * WEAPON_STATUS:FIRE_RATE
			WEAPON_AVOID = TORPED_AVOID
	ENDSELECT
	;対空火砲の命中判定とダメージ判定
	FOR WEAPON_COUNTER, 0, DEF_SHIP_STATUS:SHIP_SUB_WEAPON_SLOT
		TRYCALLFORM GET_SUB_WEAPON_STATUS_{SHIP_EQUIP:副砲:WEAPON_COUNTER:DEF_SHIP_ID}(ANTI_AIR_STATUS)
		; 対空砲火にスキル効果を乗せる
		CALL MERGE_SKILL_EFFECT_TO_SUB_WEAPON_STATUS(ANTI_AIR_STATUS, DEF_SHIP_ID)
		HIT_COUNTER = 0
		FOR FIRE_COUNTER, 0, ANTI_AIR_STATUS:FIRE_RATE
			;*RAND:150にしているのは避けすぎ倒しすぎで撃墜可能武装が弱くなりすぎないため
			;対空砲火が飛翔物に命中しなかった場合
			SIF MIN(ANTI_AIR_STATUS:HIT_RATE, MAX_PARAM_HIT_RATE) > RAND:150
				CONTINUE
			;対空砲火を飛翔物が回避した場合
			SIF MIN(WEAPON_AVOID, MAX_PARAM_AVOID) > RAND:150
				CONTINUE
			; 当たった時の処理
			ANTI_AIR_DAMAGE += ANTI_AIR_STATUS:ANTI_AIR
		NEXT
	NEXT
ENDIF
IF WEAPON_STATUS:WEAPON_TYPE == 艦載機 || WEAPON_STATUS:WEAPON_TYPE == 艦載機_自爆
	;艦載機攻撃の場合は撃墜処理
	AIR_SHIP_DAMAGE:ATK_SHIP_ID += ANTI_AIR_DAMAGE
	;艦載機の場合蓄積ダメージで計算
	ANTI_AIR_DAMAGE = AIR_SHIP_DAMAGE:ATK_SHIP_ID
ENDIF
RETURN ANTI_AIR_DAMAGE

;-------------------------------------------------
; 対空砲火を計算した上でのダメージ返却
;-------------------------------------------------
@GET_TOTAL_DAMAGE(_WEAPON_STATUS, _DAMAGE, _ANTI_AIR_DAMAGE)
#DIM REF _WEAPON_STATUS
#DIM _DAMAGE
#DIM _ANTI_AIR_DAMAGE
#DIM _WEAPON_HP
#DIM _WEAPON_TOTAL_HP

IF GROUPMATCH(_WEAPON_STATUS, ミサイル, 艦載機, 魚雷, ミサイル_自爆, 艦載機_自爆, 魚雷_自爆)
		SELECTCASE _WEAPON_STATUS:WEAPON_TYPE
		CASE ミサイル, ミサイル_自爆
			_WEAPON_HP = MISSILE_HP
			_WEAPON_TOTAL_HP = MISSILE_HP * _WEAPON_STATUS:FIRE_RATE
		CASE 艦載機, 艦載機_自爆
			_WEAPON_HP = _WEAPON_STATUS:AIR_SHIP_HP
			_WEAPON_TOTAL_HP = _WEAPON_STATUS:AIR_SHIP_HP * _WEAPON_STATUS:AIR_SHIP_COUNT
		CASE 魚雷, 魚雷_自爆
			_WEAPON_HP = TORPED_HP
			_WEAPON_TOTAL_HP = TORPED_HP * _WEAPON_STATUS:FIRE_RATE
	ENDSELECT
	IF _ANTI_AIR_DAMAGE >= _WEAPON_TOTAL_HP
		RETURN 0
	ELSE
		RETURN _DAMAGE - ((_WEAPON_TOTAL_HP - _ANTI_AIR_DAMAGE) / _WEAPON_HP * _WEAPON_STATUS:DAMAGE)
	ENDIF
ELSE
	RETURN _DAMAGE
ENDIF


;-------------------------------------------------
; 建造物の初期処理
;-------------------------------------------------
@INIT_STRCTURE_BATTLE_SETTING(_SHIP_ID, _DISTANCE, _BATTLE_SHIP_LIST, _BATTLE_SHIP_COUNT, _ATTACK_TARGET)
#DIM _SHIP_ID
#DIM REF _DISTANCE
#DIM REF _BATTLE_SHIP_LIST
#DIM _BATTLE_SHIP_COUNT
#DIM REF _ATTACK_TARGET

WHILE 1
	CALL GET_ACTION(_SHIP_ID, _DISTANCE, _BATTLE_SHIP_LIST, _BATTLE_SHIP_COUNT, _ATTACK_TARGET)
	IF RESULT == 攻撃
		RETURN 攻撃
	ELSE
		_DISTANCE:_SHIP_ID --
	ENDIF
WEND

@INIT_DAMAGE_MULTIPLIER(_BATTLE_SHIP_LIST, _BATTLE_SHIP_COUNT)
#DIM REF _BATTLE_SHIP_LIST
#DIM _BATTLE_SHIP_COUNT
#DIM _SHIP_ID
#DIM SHIP_STATUS, SHIP_STATUS_LENGTH
#DIM _SLOT_ID
#DIM _OPTION_EFFECT

; 攻撃の倍率を初期化する
FOR LOCAL, 0, 攻撃属性
	SIELD_DAMAGE_MULTIPLIER:LOCAL = SIELD_DAMAGE_PERCENTAGE:LOCAL
	ARMOR_DAMAGE_MULTIPLIER:LOCAL = ARMOR_DAMAGE_PERCENTAGE:LOCAL
NEXT
; 特殊武装による戦場の攻撃倍率を修正
_OPTION_EFFECT = 0
FOR LOCAL, 0, _BATTLE_SHIP_COUNT
	_SHIP_ID = _BATTLE_SHIP_LIST:LOCAL
	TRYCALLFORM GET_SHIP_STATUS_{SHIP_MODEL:_SHIP_ID}(SHIP_STATUS)
	FOR _SLOT_ID, 0, SHIP_STATUS:SHIP_OPTION_SLOT
		; 非指向性金属粉塵放出機
		SIF SHIP_EQUIP:オプション:_SLOT_ID:_SHIP_ID == 12 && _OPTION_EFFECT == 0
			_OPTION_EFFECT = 1
	NEXT
NEXT

IF _OPTION_EFFECT == 1
	FOR LOCAL, 0, 攻撃属性
		TIMES SIELD_DAMAGE_MULTIPLIER:LOCAL, 2.00
	NEXT
ENDIF
