;---------------------------------
; SLG COMBAT
;---------------------------------

;---------------------------------
; 戦闘
;---------------------------------
@COMBAT(ID)
#DIM ID
#DIM COUNTRY_LIST, MAX_COUNTRY
#DIM COUNTRY_LIST_SUB, MAX_COUNTRY
#DIM COUNTRY_LIST_LENGTH
#DIM BATTLE_COUNTRY, 2

VARSET COUNTRY_LIST
VARSET COUNTRY_LIST_SUB
COUNTRY_LIST_LENGTH = 0

CALL GET_SHIP_LIST_FROM_POS(ID)
SIF SHIP_LIST_LENGTH < 2
	RETURN

; 参加国の設定
FOR LOCAL, 0, SHIP_LIST_LENGTH
	COUNTRY_LIST_SUB:(SHIP_COUNTRY:(SHIP_LIST:LOCAL)) = SHIP_COUNTRY:(SHIP_LIST:LOCAL)
NEXT
FOR LOCAL, 0, MAX_COUNTRY
	SIF COUNTRY_LIST_SUB:LOCAL == 0
		CONTINUE
	COUNTRY_LIST:COUNTRY_LIST_LENGTH = COUNTRY_LIST_SUB:LOCAL
	COUNTRY_LIST_LENGTH += 1
NEXT

SIF COUNTRY_LIST_LENGTH < 2
	RETURN

; 互いの好感度を見て交戦判定
; 同勢力での戦闘が無いと想定
FOR BATTLE_COUNTRY, 0, COUNTRY_LIST_LENGTH - 1
	FOR BATTLE_COUNTRY:1, BATTLE_COUNTRY + 1, COUNTRY_LIST_LENGTH
		;(BATTLE_COUNTRY:0): 勢力A, (BATTLE_COUNTRY:1): 勢力B
		IF REL_LIKE_COUNTRY:(COUNTRY_LIST:(BATTLE_COUNTRY:0)):(COUNTRY_LIST:(BATTLE_COUNTRY:1)) <= -1000 || REL_LIKE_COUNTRY:(COUNTRY_LIST:(BATTLE_COUNTRY:1)):(COUNTRY_LIST:(BATTLE_COUNTRY:0)) <= -1000
			CALL BATTLE(COUNTRY_LIST:(BATTLE_COUNTRY:0), COUNTRY_LIST:(BATTLE_COUNTRY:1), ID)
			SIF COUNTRY_LIST:(BATTLE_COUNTRY:1) == 10
				CALL ESCAPE_PIRATE
		ENDIF
	NEXT
NEXT

@BATTLE(COUNTRY_1, COUNTRY_2, POSID, WATCH = 0)
#DIM COUNTRY_1
#DIM COUNTRY_2
#DIM POSID
#DIM SHIP_LIST1, MAX_SHIP
#DIM SHIP_LIST2, MAX_SHIP
#DIM SHIP_LIST1_COUNT
#DIM SHIP_LIST2_COUNT
#DIM DISPLAY_UI
#DIM DISTANCE, MAX_SHIP
#DIM SHIP_ACTION, MAX_SHIP
#DIM ATTACK_TARGET, MAX_SHIP
#DIM SHIP_ID
#DIM BROKEN_BY, MAX_SHIP
#DIM SETTLEMENT
#DIM WATCH

; 変数初期化
DISPLAY_UI = 0
VARSET SHIP_ACTION, 0
VARSET DISTANCE, 3
VARSET ATTACK_TARGET, -1
VARSET BROKEN_BY, -1
VARSET COMMANDER, -1
SETTLEMENT = 0

; 艦隊リスト取得
CALL GET_SHIP_LIST(SHIP_LIST1, POSID, COUNTRY_1)
CALL GET_SHIP_LIST(SHIP_LIST2, POSID, COUNTRY_2)
FINDELEMENT SHIP_LIST1, -1, 0
SHIP_LIST1_COUNT = RESULT
SIF RESULT == 0
	RETURN
FINDELEMENT SHIP_LIST2, -1, 0
SHIP_LIST2_COUNT = RESULT
SIF RESULT == 0
	RETURN

; プレイヤーサイドの指揮官選出と演出
IF COUNTRY_1 == 国家ID_プレイヤー
	PRINTL
	DRAWLINE
	SETCOLOR 0XFF0000
	PRINTL AI「敵影発見」
	RESETCOLOR
	PRINTL AI「各艦戦闘態勢へ移行中。急な揺れに注意してください」
	PRINTL AI「指揮官は交戦マネジメントを開始してください」
	PRINTL AI「繰り返します。各艦戦闘態勢へ移行中...」
	DRAWLINE
	CALL COMMANDER_ELECTION(SHIP_LIST1)
	IF RESULT != -1
		COMMANDER:0 = RESULT
		DRAWLINE
		PRINTFORMW 指揮官に%NAME:(COMMANDER:0)%が選ばれました
	ELSE
		PRINTW AIによる指揮が行われます
	ENDIF
	PRINTL
ENDIF

; UI表示判定
SIF WATCH
	DISPLAY_UI = 1
IF COUNTRY_1 == 国家ID_プレイヤー || COUNTRY_2 == 国家ID_プレイヤー
	DISPLAY_UI = 1
ELSEIF SHIP_LIST1_COUNT >= 30 && SHIP_LIST2_COUNT >= 30
	DISPLAY_UI = 1
	CALL ID2POS(POSID)
	PRINTFORMW セクター＃{RESULT}にて発生した大規模戦闘が全世界に中継されました
	PRINTL
ENDIF

; 戦いの規模と場所から会戦の名称を生成する
CALL GENERATE_BATTLEFIELD_NAME(POSID, SHIP_LIST1_COUNT, SHIP_LIST2_COUNT)

WHILE SETTLEMENT == 0
	; 行動決定
	FOR SHIP_ID, 0, SHIP_LIST1_COUNT
		IF SHIP_ACTION:(SHIP_LIST1:SHIP_ID) != 大破
			CALL GET_ACTION(SHIP_LIST1:SHIP_ID, DISTANCE:(SHIP_LIST1:SHIP_ID), LOCAL)
			SHIP_ACTION:(SHIP_LIST1:SHIP_ID) = LOCAL
		ENDIF
	NEXT
	FOR SHIP_ID, 0, SHIP_LIST2_COUNT
		IF SHIP_ACTION:(SHIP_LIST2:SHIP_ID) != 大破
			CALL GET_ACTION(SHIP_LIST2:SHIP_ID, DISTANCE:(SHIP_LIST2:SHIP_ID), LOCAL)
			SHIP_ACTION:(SHIP_LIST2:SHIP_ID) = LOCAL
		ENDIF
	NEXT

	; 攻撃対象選択
	FOR SHIP_ID, 0, SHIP_LIST1_COUNT
		SIF SHIP_ACTION:(SHIP_LIST1:SHIP_ID) != 攻撃
			CONTINUE
		CALL GET_ATTACK_TARGET(SHIP_LIST2, DISTANCE, SHIP_ACTION)
		IF RESULT != -1
			ATTACK_TARGET:(SHIP_LIST1:SHIP_ID) = RESULT
		ELSE
			THROW 攻撃対象が見つかりませんでした
		ENDIF
	NEXT
	FOR SHIP_ID, 0, SHIP_LIST2_COUNT
		SIF SHIP_ACTION:(SHIP_LIST2:SHIP_ID) != 攻撃
			CONTINUE
		CALL GET_ATTACK_TARGET(SHIP_LIST1, DISTANCE, SHIP_ACTION)
		IF RESULT != -1
			ATTACK_TARGET:(SHIP_LIST2:SHIP_ID) = RESULT
		ELSE
			THROW 攻撃対象が見つかりませんでした
		ENDIF
	NEXT


	; UI表示
	SIF DISPLAY_UI
		CALL DISPLAY_UI(SHIP_LIST1, SHIP_LIST2, SHIP_ACTION, ATTACK_TARGET, DISTANCE, BROKEN_BY)

	; 行動
	CALL EXECUTE_ACTION(SHIP_LIST1, SHIP_LIST2, SHIP_ACTION, ATTACK_TARGET, DISTANCE, BROKEN_BY)

	; 決着判定
	CALL CHECK_SETTLEMENT(SHIP_LIST1, SHIP_LIST2, SHIP_ACTION)
	SETTLEMENT = RESULT
WEND
IF DISPLAY_UI
	PRINTL ◆戦果
	IF SETTLEMENT == 1
		PRINTFORML %COUNTRY_NAME:COUNTRY_2%の勝利
		PRINTFORMW %COUNTRY_NAME:COUNTRY_1%は敗走しました
		RETURN 1
	ELSEIF SETTLEMENT == 2
		PRINTFORMl %COUNTRY_NAME:COUNTRY_1%の勝利
		PRINTFORMW %COUNTRY_NAME:COUNTRY_2%は敗走しました
		RETURN 0
	ENDIF
ENDIF

;---------------------------------
; 指揮官決定
;---------------------------------
@COMMANDER_ELECTION(LIST)
#DIM REF LIST

$INPUT_LOOP
PRINTL 
PRINTL ◆指揮官を選出してください
PRINTL
CALL COMMANDER_CANDIDATE_LIST(LIST)
PRINTBUTTON "[100] 指定しない", 100 
INPUT
SIF RESULT == 100
	RETURN -1
IF RESULT >= 100 && RESULT < 100 + CHARANUM
	CALL SHOW_SKILLS(RESULT - 100)
	WAIT
	GOTO INPUT_LOOP
ENDIF
CALL IS_SELECTBLE_NUM_OF_COMMANDER(LIST, RESULT)
IF RESULT == -1
	GOTO INPUT_LOOP
ENDIF
RETURN RESULT

;---------------------------------
; 指揮官決定
;---------------------------------
@COMMANDER_CANDIDATE_LIST(LIST)
#DIM REF LIST
#DIM LENGTH
#DIM ID

FINDELEMENT LIST, -1
LENGTH = RESULT

FOR ID, 0, LENGTH
	FINDELEMENT BOARDING_SHIP_ID, LIST:ID
	SIF RESULT == -1
		CONTINUE
	PRINT  
	PRINTBUTTON @"[{RESULT}] %NAME:RESULT, 20, LEFT%", RESULT
	PRINTBUTTON @"[詳細]", RESULT + 100
	PRINTL
NEXT


;---------------------------------
; この戦闘において選択可能な指揮官か
;---------------------------------
@IS_SELECTBLE_NUM_OF_COMMANDER(LIST, ID)
#DIM REF LIST
#DIM ID

SIF BOARDING_SHIP_ID:ID == -1
	RETURN -1

FINDELEMENT LIST, BOARDING_SHIP_ID:ID
SIF RESULT == -1
	RETURN -1
RETURN ID

;---------------------------------
; アクション取得
;---------------------------------
@GET_ACTION(SHIP_ID, DISTANCE, ACTION)
#DIM SHIP_ID
#DIM DISTANCE
#DIM REF ACTION
#DIM RANGE
#DIM CURRENT_SHIP_HP
#DIM MAX_SHIP_HP


IF SHIP_CATEGORY:SHIP_ID == 調査船 || SHIP_CATEGORY:SHIP_ID == 輸送船 || SHIP_CATEGORY:SHIP_ID == 作業船
	IF DISTANCE == 3
		ACTION = 撤退
	ELSE
		ACTION = 後退
	ENDIF
ELSE
	CALL GET_SHIP_TOTAL_HP(SHIP_ID)
	MAX_SHIP_HP = RESULT
	CALL GET_SHIP_HP(SHIP_ID)
	CURRENT_SHIP_HP = RESULT
	; HPが1/3切ったら撤退
	IF MAX_SHIP_HP > CURRENT_SHIP_HP * 3
		IF DISTANCE == 3
			ACTION = 撤退
		ELSE
			ACTION = 後退
		ENDIF
	; 攻撃
	ELSE
		CALL GET_MAIN_WEAPON_RANGE(SHIP_ID)
		RANGE = RESULT
		IF RANGE < DISTANCE
			ACTION = 前進
		ELSE
			ACTION = 攻撃
		ENDIF
	ENDIF
ENDIF

;---------------------------------
; 攻撃対象取得
;---------------------------------
@GET_ATTACK_TARGET(LIST, DISTANCE, SHIP_ACTION)
#DIM REF LIST
#DIM REF DISTANCE
#DIM REF SHIP_ACTION
#DIM DISTANCE_LIST, 3, MAX_SHIP
#DIM DISTANCE_COUNTER, 3
#DIM LIST_ITER
#DIM _DISTANCE
#DIM CURRENT_ITER

VARSET DISTANCE_COUNTER, 0
FINDELEMENT LIST, -1
FOR LIST_ITER, 0, RESULT
	SIF SHIP_ACTION:(LIST:LIST_ITER) == 大破
		CONTINUE
	_DISTANCE = DISTANCE:(LIST:LIST_ITER) - 1
	DISTANCE_LIST:_DISTANCE:(DISTANCE_COUNTER:_DISTANCE) = LIST:LIST_ITER
	DISTANCE_COUNTER:_DISTANCE ++
NEXT

FOR LIST_ITER, 0, 3
	SIF DISTANCE_COUNTER:LIST_ITER == 0
		CONTINUE
	RETURN DISTANCE_LIST:LIST_ITER:(RAND:(DISTANCE_COUNTER:LIST_ITER))
NEXT

RETURN -1

; UI表示
@DISPLAY_UI(LIST1, LIST2, SHIP_ACTION, ATTACK_TARGET, DISTANCE, BROKEN_BY)
#DIM REF LIST1
#DIM REF LIST2
#DIM REF SHIP_ACTION
#DIM REF ATTACK_TARGET
#DIM REF DISTANCE
#DIM REF BROKEN_BY
#DIM ITER
#DIM MAX_COUNT
#DIM COUNTER
#DIMS PRINT_SHIP_NAME 

#DIM SHIP_DISTANCE_MOVED
#DIM CONST MAX_DISTANCE_RANGE = 3
#DIM CONST SHIP_NAMELIST_LENGTH = 22
#DIM CONST DIST_INDICATOR_LENGTH = 33

FINDELEMENT LIST1, -1
MAX_COUNT = RESULT
FINDELEMENT LIST2, -1
SIF MAX_COUNT < RESULT
	MAX_COUNT = RESULT

$MAIN_LOOP
CALL DRAW_COMBAT_HEADER
FOR COUNTER, 0, MAX_COUNT
	;左側リストの処理
	;ブランク行
	IF LIST1:COUNTER == -1 
		PRINTFORM [%"", DIST_INDICATOR_LENGTH + SHIP_NAMELIST_LENGTH - 4, LEFT%]
	ELSE
	;艦が存在する行
		;装甲インジケータ
		CALL PRINT_HP_INDICATOR(LIST1:COUNTER)
		PRINTFORM  
		;シールドインジケータ
		CALL PRINT_SHIELD_INDICATOR(LIST1:COUNTER)
		PRINTFORM  
		PRINT_SHIP_NAME = %SHIP_NAME:(LIST1:COUNTER)%
		;艦名が長い場合は半角に
		SIF STRLENS(PRINT_SHIP_NAME) >= SHIP_NAMELIST_LENGTH -2
			PRINT_SHIP_NAME = %TOHALF(SHIP_NAME:(LIST1:COUNTER))%
		SIF SHIP_ACTION:(LIST1:COUNTER) == 大破
			SETCOLOR カラー_選択不可
		PRINTBUTTON @"%PRINT_SHIP_NAME, SHIP_NAMELIST_LENGTH , LEFT%", LIST1:COUNTER
		RESETCOLOR
		PRINTFORM [
		FOR ITER, 0, DIST_INDICATOR_LENGTH - DISTANCE:(LIST1:COUNTER) * (DIST_INDICATOR_LENGTH / MAX_DISTANCE_RANGE)
			SETCOLOR カラー_選択不可
			PRINTFORM .
			RESETCOLOR
		NEXT
		SIF SHIP_ACTION:(LIST1:COUNTER) == 大破
			SETCOLOR カラー_選択不可
		FONTSTYLE 1
		PRINTFORM %GET_HULL_CODE(LIST1:COUNTER)%
		FONTSTYLE 0
		RESETCOLOR
		FOR ITER, 0, (DISTANCE:(LIST1:COUNTER)  - 1)* (DIST_INDICATOR_LENGTH / MAX_DISTANCE_RANGE)
			SETCOLOR カラー_選択不可
			PRINTFORM .
			RESETCOLOR
		NEXT
		PRINTFORM ]
		RESETCOLOR
	ENDIF
	PRINTFORM  ｜ 
	;右側リストの処理
	;ブランク行
	IF LIST2:COUNTER == -1
		PRINTFORM [%"", DIST_INDICATOR_LENGTH + SHIP_NAMELIST_LENGTH - 4, RIGHT%]
	ELSE
		PRINT_SHIP_NAME = %SHIP_NAME:(LIST2:COUNTER)%
		;艦名が長い場合は半角に
		SIF STRLENS(PRINT_SHIP_NAME) >= SHIP_NAMELIST_LENGTH - 2
			PRINT_SHIP_NAME = %TOHALF(SHIP_NAME:(LIST2:COUNTER))%
		SIF SHIP_ACTION:(LIST2:COUNTER) == 大破
			SETCOLOR カラー_選択不可
		PRINTFORM [
		FOR ITER, 0, (DISTANCE:(LIST2:COUNTER)  - 1)* (DIST_INDICATOR_LENGTH / MAX_DISTANCE_RANGE)
			SETCOLOR カラー_選択不可
			PRINTFORM .
			RESETCOLOR
		NEXT
		SIF SHIP_ACTION:(LIST2:COUNTER) == 大破
			SETCOLOR カラー_選択不可
		FONTSTYLE 1
		PRINTFORM %GET_HULL_CODE(LIST2:COUNTER)%
		FONTSTYLE 0
		RESETCOLOR
		FOR ITER, 0, DIST_INDICATOR_LENGTH - DISTANCE:(LIST2:COUNTER) * (DIST_INDICATOR_LENGTH / MAX_DISTANCE_RANGE)
			SETCOLOR カラー_選択不可
			PRINTFORM .
			RESETCOLOR
		NEXT
		PRINTFORM ]
		SIF SHIP_ACTION:(LIST2:COUNTER) == 大破
			SETCOLOR カラー_選択不可
		PRINTBUTTON @"%PRINT_SHIP_NAME, SHIP_NAMELIST_LENGTH, RIGHT%", LIST2:COUNTER
		RESETCOLOR
		PRINTFORM  
		;シールドインジケータ
		CALL PRINT_SHIELD_INDICATOR(LIST2:COUNTER)
		PRINTFORM  
		;装甲インジケータ
		CALL PRINT_HP_INDICATOR(LIST2:COUNTER)
		RESETCOLOR
	; "
	ENDIF
	PRINTL
NEXT
DRAWLINE
PRINTBUTTON "[9999] 進行", 9999

INPUT

IF RESULT >= 0 && RESULT < MAX_SHIP
	SELECTCASE SHIP_ACTION:RESULT
		CASE 撤退
			PRINTL 撤退中
		CASE 前進
			PRINTL 前進中
		CASE 攻撃
			PRINTFORML 攻撃中(%SHIP_NAME:(ATTACK_TARGET:RESULT)%)
			; )
		CASE 後退
			PRINTL 後退中
		CASE 大破
			PRINTFORML 大破(%SHIP_NAME:(BROKEN_BY:RESULT)%の攻撃による)
	ENDSELECT
	CALL SHOW_SHIP_INFO(RESULT)
	WAIT
	GOTO MAIN_LOOP
ELSEIF RESULT >= MAX_SHIP && RESULT < MAX_SHIP + CHARANUM
	CALL SHOW_SKILLS(RESULT - MAX_SHIP)
	GOTO MAIN_LOOP
ELSEIF RESULT == 9999
	RETURN
ELSE
	GOTO MAIN_LOOP
ENDIF

@EXECUTE_ACTION(LIST1, LIST2, SHIP_ACTION, ATTACK_TARGET, DISTANCE, BROKEN_BY)
#DIM REF LIST1
#DIM REF LIST2
#DIM REF SHIP_ACTION
#DIM REF ATTACK_TARGET
#DIM REF DISTANCE
#DIM REF BROKEN_BY
#DIM LIST_ITER

FINDELEMENT LIST1, -1
FOR LIST_ITER, 0, RESULT
	SELECTCASE SHIP_ACTION:(LIST1:LIST_ITER)
		CASE 撤退
			; 何もしない
		CASE 前進
			DISTANCE:(LIST1:LIST_ITER) = LIMIT(DISTANCE:(LIST1:LIST_ITER) - 1, 1, 3)
		CASE 攻撃
			CALL ATTACK(LIST1:LIST_ITER, ATTACK_TARGET:(LIST1:LIST_ITER), 0)
			IF RESULT == 1
				SHIP_ACTION:(ATTACK_TARGET:(LIST1:LIST_ITER)) = 大破
				BROKEN_BY:(ATTACK_TARGET:(LIST1:LIST_ITER)) = LIST1:LIST_ITER
			ENDIF
		CASE 後退
			DISTANCE:(LIST1:LIST_ITER) = LIMIT(DISTANCE:(LIST1:LIST_ITER) + 1, 1, 3)
		CASE 大破
			; 何もしない	
	ENDSELECT
NEXT
FINDELEMENT LIST2, -1
FOR LIST_ITER, 0, RESULT
	SELECTCASE SHIP_ACTION:(LIST2:LIST_ITER)
		CASE 撤退
			; 何もしない
		CASE 前進
			DISTANCE:(LIST2:LIST_ITER) = LIMIT(DISTANCE:(LIST2:LIST_ITER) - 1, 1, 3)
		CASE 攻撃
			CALL ATTACK(LIST2:LIST_ITER, ATTACK_TARGET:(LIST2:LIST_ITER), 1)
			IF RESULT == 1
				SHIP_ACTION:(ATTACK_TARGET:(LIST2:LIST_ITER)) = 大破
				BROKEN_BY:(ATTACK_TARGET:(LIST2:LIST_ITER)) = LIST2:LIST_ITER
			ENDIF
		CASE 後退
			DISTANCE:(LIST2:LIST_ITER) = LIMIT(DISTANCE:(LIST2:LIST_ITER) + 1, 1, 3)
		CASE 大破
			; 何もしない	
	ENDSELECT
NEXT

; 攻撃
@ATTACK(SHIP_ID, TARGET_ID, ATTACK_SIDE)
#DIM SHIP_ID
#DIM TARGET_ID
#DIM ATTACK_SIDE
#DIM FIRE_COUNT
#DIM TOTAL_DAMAGE
#DIM SUB_WEAPON_RANGE
#DIM MAX_SIELD_HP
#DIM SIELD_HP
#DIM MAX_HP
#DIM 対空ダメージ
#DIM 敵対空ダメージ
#DIM 攻撃回数
#DIM STATUS, STATUS_LENGTH
#DIM ENEMY_STATUS, STATUS_LENGTH
#DIM SHIP_STATUS, SHIP_STATUS_LENGTH
#DIM SLOT_ID
#DIM _回避
#DIM _命中
#DIM _与ダメージ
#DIM _被ダメージ
#DIM _シールド増加
#DIM _対空命中
#DIM _対空ダメージ
#DIM DEF_SIDE
#DIM CLASS
#DIM HIT_TYPE

DEF_SIDE = ATTACK_SIDE ? 0 # 1
TOTAL_DAMAGE = 0
CALL GET_AVOID(TARGET_ID)
; スキルによる補正(敵の回避)
CALL GET_SKILL_EFFECT(DEF_SIDE, RESULT, TYPE_回避, CLASS, TARGET_ID)
_回避 = RESULT

; 主砲タイプ判定用
TRYCALLFORM GET_MAIN_WEAPON_STATUS_{SHIP_EQUIP:主砲:0:SHIP_ID}(STATUS)
; 対空迎撃判定
IF STATUS:WEAPON_TYPE == 戦闘機
	対空ダメージ = 0
	敵対空ダメージ = 0
	;敵艦載機による反撃
	; 主砲タイプ判定
	TRYCALLFORM GET_MAIN_WEAPON_STATUS_{SHIP_EQUIP:主砲:0:TARGET_ID}(ENEMY_STATUS)
	IF ENEMY_STATUS:WEAPON_TYPE == 戦闘機
		TRYCALLFORM GET_SHIP_STATUS_{SHIP_MODEL:TARGET_ID}(SHIP_STATUS)

		; スキルによる補正(敵の対空命中)
		CALL GET_SKILL_EFFECT(DEF_SIDE, ENEMY_STATUS:HIT_RATE, TYPE_対空命中, 艦種_航空機, TARGET_ID)
		_対空命中 = RESULT

		; スキルによる補正(敵の艦載機の対空ダメージ)
		CALL GET_SKILL_EFFECT(DEF_SIDE, ENEMY_STATUS:ANTI_AIR, TYPE_対空ダメージ, 艦種_航空機, TARGET_ID)
		_対空ダメージ = RESULT

		FOR SLOT_ID, 0, SHIP_STATUS:SHIP_MAIN_WEAPON_SLOT
			CALL GET_JOIN_AIR_SHIP(TARGET_ID, SLOT_ID)
			FOR FIRE_COUNT, 0, ENEMY_STATUS:FIRE_RATE * RESULT
				SIF RAND:100 > _対空命中
					CONTINUE
				SIF RAND:100 > AIR_SHIP_AVOID
					CONTINUE
				CALL GET_MAX_AIR_SHIP_HP(SHIP_ID)
				AIR_SHIP_DAMAGE:SHIP_ID = LIMIT(AIR_SHIP_DAMAGE:SHIP_ID + _対空ダメージ, 0, RESULT)
			NEXT
		NEXT
	ENDIF

	;対空砲の撃墜判定
	FOR SLOT_ID, 0, SHIP_STATUS:SHIP_SUB_WEAPON_SLOT
		TRYCALLFORM GET_SUB_WEAPON_STATUS_{SHIP_EQUIP:副砲:SLOT_ID:TARGET_ID}(STATUS)

		;敵副砲による対空射撃
		TRYCALLFORM GET_SHIP_STATUS_{SHIP_MODEL:TARGET_ID}(SHIP_STATUS)

		; スキルによる補正(敵の対空命中)
		CALL GET_SKILL_EFFECT(DEF_SIDE, STATUS:FIRE_RATE, TYPE_対空命中, 艦種_航空機, TARGET_ID)
		_対空命中 = RESULT
	
		; スキルによる補正(敵の艦載機の対空ダメージ)
		CALL GET_SKILL_EFFECT(DEF_SIDE, STATUS:ANTI_AIR, TYPE_対空ダメージ, 艦種_航空機, TARGET_ID)
		_対空ダメージ = RESULT

		FOR FIRE_COUNT, 0, STATUS:FIRE_RATE
			SIF RAND:100 > STATUS:HIT_RATE
				CONTINUE
			SIF RAND:100 > AIR_SHIP_AVOID
				CONTINUE
		NEXT
		AIR_SHIP_DAMAGE:SHIP_ID = LIMIT(AIR_SHIP_DAMAGE:SHIP_ID + _対空ダメージ, 0, STATUS:AIR_SHIP_HP * STATUS:AIR_SHIP_COUNT)
	NEXT
ENDIF
; 戦闘機と対空砲による対空迎撃以上

; 主砲攻撃と命中判定
TRYCALLFORM GET_SHIP_STATUS_{SHIP_MODEL:SHIP_ID}(SHIP_STATUS)

FOR SLOT_ID, 0, SHIP_STATUS:SHIP_MAIN_WEAPON_SLOT
	TRYCALLFORM GET_MAIN_WEAPON_STATUS_{SHIP_EQUIP:主砲:SLOT_ID:SHIP_ID}(STATUS)
	IF STATUS:WEAPON_TYPE == 戦闘機
		CALL GET_JOIN_AIR_SHIP(SHIP_ID, SLOT_ID)
		攻撃回数 = RESULT * STATUS:FIRE_RATE
		CLASS = 艦種_航空機
	ELSEIF STATUS:WEAPON_TYPE == ミサイル
		CALL GET_MISSILE_FALL(TARGET_ID)
		攻撃回数 = STATUS:FIRE_RATE - RESULT
		CLASS = 艦種_ミサイル
	ELSEIF STATUS:WEAPON_TYPE == 魚雷
		CALL GET_TORPED_FALL(TARGET_ID)
		攻撃回数 = STATUS:FIRE_RATE - RESULT
		CLASS = 艦種_ミサイル
	ELSE
		攻撃回数 = STATUS:FIRE_RATE
		CLASS = SHIP_CATEGORY:SHIP_ID
	ENDIF

	; スキルによる補正(味方の命中と敵回避)
	CALL GET_SKILL_EFFECT(DEF_SIDE, STATUS:HIT_RATE, TYPE_与ダメージ, CLASS, SHIP_ID)
	CALL GET_SKILL_EFFECT(DEF_SIDE, RESULT, TYPE_敵回避, CLASS, TARGET_ID)
	_命中 = RESULT
	
	FOR FIRE_COUNT, 0, 攻撃回数
		SIF RAND:100 > _命中
			CONTINUE
		IF RAND:100 < _回避
			IF RAND:100 < 外れ率:(SHIP_CATEGORY:TARGET_ID)
				HIT_TYPE = 外れ
				CONTINUE
			ELSE
				HIT_TYPE = 非直撃
			ENDIF
		ELSE
			IF RAND:100 < クリティカル率:(SHIP_CATEGORY:TARGET_ID)
				HIT_TYPE = クリティカル
			ELSE
				HIT_TYPE = 命中
			ENDIF
		ENDIF

		; スキルによる補正(味方の与ダメ)
		CALL GET_SKILL_EFFECT(ATTACK_SIDE, STATUS:DAMAGE, TYPE_与ダメージ, CLASS, SHIP_ID)
		; スキルによる補正(敵の被ダメ)
		CALL GET_SKILL_EFFECT(DEF_SIDE, RESULT, TYPE_被ダメージ, SHIP_CATEGORY:TARGET_ID, TARGET_ID)
		SIF HIT_TYPE == クリティカル
			TIMES RESULT, 1.20
		SIF HIT_TYPE == 非直撃
			TIMES RESULT, 0.50
		TOTAL_DAMAGE += RESULT
	NEXT

NEXT
; 副砲命中判定
FOR SLOT_ID, 0, SHIP_STATUS:SHIP_SUB_WEAPON_SLOT
	TRYCALLFORM GET_SUB_WEAPON_STATUS_{SHIP_EQUIP:副砲:SLOT_ID:SHIP_ID}(STATUS)
	攻撃回数 = STATUS:FIRE_RATE
	SUB_WEAPON_RANGE = STATUS:FIRE_RANGE
	CALL GET_MAIN_WEAPON_RANGE(SHIP_ID)
	IF RESULT <= SUB_WEAPON_RANGE

		; スキルによる補正(味方の命中と敵回避)
		CALL GET_SKILL_EFFECT(ATTACK_SIDE, STATUS:HIT_RATE, TYPE_与ダメージ, CLASS, SHIP_ID)
		CALL GET_SKILL_EFFECT(ATTACK_SIDE, RESULT, TYPE_敵回避, CLASS, TARGET_ID)
		_命中 = RESULT

		FOR FIRE_COUNT, 0, 攻撃回数
			SIF RAND:100 > _命中
				CONTINUE
			IF RAND:100 < _回避
				IF RAND:2
					HIT_TYPE = 外れ
					CONTINUE
				ELSE
					HIT_TYPE = 非直撃
				ENDIF
			ELSE
				IF RAND:2
					HIT_TYPE = 命中
				ELSE
					HIT_TYPE = クリティカル
				ENDIF
			ENDIF
			; スキルによる補正(味方の与ダメ)
			CALL GET_SKILL_EFFECT(ATTACK_SIDE, STATUS:DAMAGE, TYPE_与ダメージ, SHIP_CATEGORY:TARGET_ID, SHIP_ID)

			; スキルによる補正(敵の被ダメ)
			CALL GET_SKILL_EFFECT(DEF_SIDE, RESULT, TYPE_被ダメージ, SHIP_CATEGORY:TARGET_ID, TARGET_ID)
			SIF HIT_TYPE == クリティカル
				TIMES RESULT, 1.20
			SIF HIT_TYPE == 非直撃
				TIMES RESULT, 0.50
			TOTAL_DAMAGE += RESULT
	
		NEXT
	ENDIF
NEXT

PRINTFORML %SHIP_NAME:SHIP_ID% -> %SHIP_NAME:TARGET_ID%: {TOTAL_DAMAGE}ダメージ

; シールドダメージ
CALL GET_SHIP_SIELD(TARGET_ID)
SIELD_HP = RESULT
IF TOTAL_DAMAGE > SIELD_HP
	SIELD_DAMAGE:TARGET_ID += SIELD_HP
	TOTAL_DAMAGE -= SIELD_HP
ELSE
	SIELD_DAMAGE:TARGET_ID += TOTAL_DAMAGE
	RETURN 0
ENDIF
; 装甲ダメージ
SHIP_DAMAGE:TARGET_ID += TOTAL_DAMAGE
CALL GET_SHIP_HP(TARGET_ID)
IF RESULT == 0
	CALL GET_SHIP_TOTAL_HP(TARGET_ID)
	SHIP_DAMAGE:TARGET_ID = RESULT
	RETURN 1
ENDIF
RETURN 0

@GET_SKILL_EFFECT(SIDE, VALUE, TYPE, CLASS, SHIP_ID)
#DIM SIDE
#DIM VALUE
#DIM TYPE
#DIM CLASS
#DIM SHIP_ID
#DIM SKILL_ID
#DIM CHARA_ID

;艦隊司令官スキル
IF COMMANDER:SIDE != -1
	FOR SKILL_ID, 0, MAX_SKILL_SLOT
		IF SKILL_ID_SLOT:(COMMANDER:SIDE):スキル_ジャンル_TROOP:SKILL_ID != -1
			TRYCALLFORM SKILL_0_TROOP_{SKILL_ID_SLOT:(COMMANDER:SIDE):スキル_ジャンル_TROOP:SKILL_ID}_EFFECT(VALUE, TYPE, CLASS)
			VALUE = RESULT
		ENDIF
	NEXT
	FOR SKILL_ID, 0, MAX_SKILL_SLOT
	IF SKILL_ID_SLOT:(COMMANDER:SIDE):スキル_ジャンル_TROOP:SKILL_ID != -1
		TRYCALLFORM SKILL_0_UNIQUE_{SKILL_ID_SLOT:(COMMANDER:SIDE):スキル_ジャンル_UNIQUE:SKILL_ID}_EFFECT(VALUE, TYPE, CLASS)
		VALUE = RESULT
	ENDIF
NEXT
ENDIF
;艦長スキル
FINDELEMENT BOARDING_SHIP_ID, SHIP_ID
IF RESULT != -1
	CHARA_ID = RESULT
	FOR SKILL_ID, 0, MAX_SKILL_SLOT
		IF SKILL_ID_SLOT:CHARA_ID:スキル_ジャンル_PERSONAL:SKILL_ID != -1
			TRYCALLFORM SKILL_0_PERSONAL_{SKILL_ID_SLOT:CHARA_ID:スキル_ジャンル_PERSONAL:SKILL_ID}_EFFECT(VALUE, TYPE, CLASS)
			VALUE = RESULT
		ENDIF
	NEXT
ENDIF

RETURN VALUE

; 決着判定
@CHECK_SETTLEMENT(SHIP_LIST1, SHIP_LIST2, SHIP_ACTION)
#DIM REF SHIP_LIST1
#DIM REF SHIP_LIST2
#DIM REF SHIP_ACTION
#DIM LIST_COUNT
#DIM BROKEN_COUNT
#DIM SHIP_LIST_COUNT

BROKEN_COUNT = 0

FINDELEMENT SHIP_LIST1, -1
SHIP_LIST_COUNT = RESULT
FOR LIST_COUNT, 0, SHIP_LIST_COUNT
	SIF SHIP_ACTION:(SHIP_LIST1:LIST_COUNT) == 大破 || SHIP_ACTION:(SHIP_LIST1:LIST_COUNT) == 撤退
		BROKEN_COUNT ++
NEXT
SIF SHIP_LIST_COUNT == BROKEN_COUNT
	RETURN 1

BROKEN_COUNT = 0
FINDELEMENT SHIP_LIST2, -1
SHIP_LIST_COUNT = RESULT
FOR LIST_COUNT, 0, SHIP_LIST_COUNT
	SIF SHIP_ACTION:(SHIP_LIST2:LIST_COUNT) == 大破 || SHIP_ACTION:(SHIP_LIST2:LIST_COUNT) == 撤退
		BROKEN_COUNT ++
NEXT
SIF SHIP_LIST_COUNT == BROKEN_COUNT
	RETURN 2

RETURN 0


;ミサイルの攻撃系の撃墜数
@GET_MISSILE_FALL(TARGET_ID)
#DIM TARGET_ID
#DIM SLOT_ID
#DIM FIRE_COUNT
#DIM 攻撃回数
#DIM 対空ダメージ
#DIM STATUS, STATUS_LENGTH
#DIM ENEMY_STATUS, STATUS_LENGTH
#DIM SHIP_STATUS, SHIP_STATUS_LENGTH

対空ダメージ = 0

;敵副砲による対空射撃
TRYCALLFORM GET_SHIP_STATUS_{SHIP_MODEL:TARGET_ID}(ENEMY_STATUS)
FOR SLOT_ID, 0, ENEMY_STATUS:SHIP_SUB_WEAPON_SLOT
	TRYCALLFORM GET_SUB_WEAPON_STATUS_{SHIP_EQUIP:副砲:SLOT_ID:TARGET_ID}(STATUS)
	FOR FIRE_COUNT, 0, STATUS:FIRE_RATE
		SIF RAND:100 > STATUS:HIT_RATE
			CONTINUE
		SIF RAND:100 > MISSILE_AVOID
			CONTINUE
		対空ダメージ += STATUS:ANTI_AIR
	NEXT
NEXT
RETURN 対空ダメージ / MISSILE_HP

;魚雷の攻撃系の撃墜数
@GET_TORPED_FALL(TARGET_ID)
#DIM TARGET_ID
#DIM SLOT_ID
#DIM FIRE_COUNT
#DIM 攻撃回数
#DIM 対空ダメージ
#DIM STATUS, STATUS_LENGTH
#DIM ENEMY_STATUS, STATUS_LENGTH
#DIM SHIP_STATUS, SHIP_STATUS_LENGTH

対空ダメージ = 0

;敵副砲による対空射撃
TRYCALLFORM GET_SHIP_STATUS_{SHIP_MODEL:TARGET_ID}(ENEMY_STATUS)
FOR SLOT_ID, 0, ENEMY_STATUS:SHIP_SUB_WEAPON_SLOT
	TRYCALLFORM GET_SUB_WEAPON_STATUS_{SHIP_EQUIP:副砲:SLOT_ID:TARGET_ID}(STATUS)
	FOR FIRE_COUNT, 0, STATUS:FIRE_RATE
		SIF RAND:100 > STATUS:HIT_RATE
			CONTINUE
		SIF RAND:100 > TORPED_AVOID
			CONTINUE
		対空ダメージ += STATUS:ANTI_AIR
	NEXT
NEXT
RETURN 対空ダメージ / TORPED_HP