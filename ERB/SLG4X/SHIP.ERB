;----------------------------
; 艦艇の一覧を返却する
;----------------------------
@GET_SHIP_LIST_FROM_POS(POSID)
#DIM COUNTER
#DIM ITER
#DIM POSID
COUNTER = 0
VARSET SHIP_LIST, 0
FOR ITER, 0, MAX_SHIP
	IF SHIP_POSITION:ITER == POSID && SHIP_COUNTRY:ITER > 0
		SHIP_LIST:COUNTER = ITER
		COUNTER ++
	ENDIF
NEXT
SHIP_LIST_LENGTH = COUNTER

;---------------------------------
; 艦船一覧取得(↑の改良版)
;---------------------------------
@GET_SHIP_LIST(LIST, POSID, COUNTRY_ID)
#DIM REF LIST
#DIM POSID
#DIM COUNTRY_ID
#DIM SHIP_ID
#DIM COUNTER

VARSET LIST, -1
COUNTER = 0

FOR SHIP_ID, 0, MAX_SHIP
	SIF COUNTRY_ID != SHIP_COUNTRY:SHIP_ID
		CONTINUE
	SIF POSID != SHIP_POSITION:SHIP_ID
		CONTINUE
	LIST:COUNTER = SHIP_ID
	COUNTER ++
NEXT

;---------------------------------
; 艦船一覧取得(↑の改良版)
;---------------------------------
@PICKUP_FROM_SHIP_LIST(RESULT_LIST, POS_ID = -1, COUNTRY_ID = -1, SHIP_TYPE = -1)
#DIM REF RESULT_LIST, 0
#DIM COUNTRY_ID
#DIM SHIP_TYPE
#DIM POS_ID
#DIM SHIP_ID
#DIM COUNTER

COUNTER = 0
VARSET RESULT_LIST, -1

SIF COUNTRY_ID == -1 && SHIP_TYPE == -1 && POS_ID == -1
	RETURN 0

FOR SHIP_ID, 0, MAX_SHIP
	SIF COUNTRY_ID != -1 && SHIP_COUNTRY:SHIP_ID != COUNTRY_ID
		CONTINUE
	SIF SHIP_TYPE != -1 && SHIP_CATEGORY:SHIP_ID != SHIP_TYPE
		CONTINUE
	SIF POS_ID != -1 && SHIP_POSITION:SHIP_ID != POS_ID
		CONTINUE
	RESULT_LIST:COUNTER = SHIP_ID
	COUNTER += 1
NEXT

RETURN COUNTER

;----------------------------
; マップに表示する艦船タイルを返す
;----------------------------
@GET_SHIP_TILE(POSID)
#DIM POSID
#DIM SHIP_ID
#DIM TILE_TYPE
#DIM LIKE

TILE_TYPE = 0
FOR SHIP_ID, 0, MAX_SHIP
	SIF SHIP_COUNTRY:SHIP_ID == 0
		CONTINUE
	IF SHIP_POSITION:SHIP_ID == POSID
		LIKE = REL_LIKE_COUNTRY:(SHIP_COUNTRY:SHIP_ID):国家ID_プレイヤー
		IF SHIP_COUNTRY:SHIP_ID == 国家ID_プレイヤー
			RETURN 自軍
		ELSEIF LIKE <= -1000
			TILE_TYPE = 敵軍
		ELSEIF SHIP_COUNTRY:SHIP_ID > 0
			TILE_TYPE = 中立軍
		ENDIF
	ENDIF
NEXT
RETURN TILE_TYPE


;----------------------------
; 艦種の呼称を返却する
;----------------------------
@GET_TYPE_NAME(TYPE)
#FUNCTIONS
#DIM TYPE
#DIMS LOCAL_SHIP_NAME
SELECTCASE TYPE
	CASE 調査船
		LOCAL_SHIP_NAME = 調査船
	CASE フリゲート
		LOCAL_SHIP_NAME = フリゲート
	CASE コルベット
		LOCAL_SHIP_NAME = コルベット
	CASE 駆逐艦
		LOCAL_SHIP_NAME = 駆逐艦
	CASE 巡洋艦
		LOCAL_SHIP_NAME = 巡洋艦
	CASE 戦艦
		LOCAL_SHIP_NAME = 戦艦
	CASE 空母
		LOCAL_SHIP_NAME = 空母
	CASE 輸送船
		LOCAL_SHIP_NAME = 輸送船
	CASE 作業船
		LOCAL_SHIP_NAME = 作業船
ENDSELECT
RETURNF LOCAL_SHIP_NAME

;----------------------------
; 船の追加
; ARGS:0で船名を指定しない場合は、ネームリストから選択されます。
;----------------------------
@INIT_SHIP(ARG:0, ARG:1, ARG:2, ARGS:0)
#DIM SHIP_ID
#DIM SHIP_STATUS, SHIP_STATUS_LENGTH

SHIP_ID = GET_FREE_SHIP_ID()
IF SHIP_ID == -1
	RETURN -1
ENDIF

SHIP_COUNTRY:SHIP_ID = ARG:0
SHIP_POSITION:SHIP_ID = ARG:1
SHIP_MODEL:SHIP_ID = ARG:2
TRYCALLFORM GET_SHIP_STATUS_{SHIP_MODEL:SHIP_ID}(SHIP_STATUS)
SHIP_CATEGORY:SHIP_ID = SHIP_STATUS:CATEGORY

IF ARGS:0 == ""
	CALL GET_FEWEST_SHIP_NAME_FROM_LIST(ARG:0, SHIP_STATUS:CATEGORY)
	SHIP_NAME:SHIP_ID = %RESULTS%
ELSE
	SHIP_NAME:SHIP_ID = %ARGS:0%
ENDIF

SHIP_FOLLOW:SHIP_ID = -1

RETURN SHIP_ID

;----------------------------
; 空いている艦船IDを返却する
;----------------------------
@GET_FREE_SHIP_ID
#FUNCTION
FOR LOCAL, 0, MAX_SHIP
	SIF SHIP_COUNTRY:LOCAL == 0
		RETURNF LOCAL
NEXT
RETURNF -1


@GET_SHIP_TYPE_STATUS_ALL(SHIP_ID, STATUS)
#DIM SHIP_ID
#DIM STATUS, STATUS_LENGTH
VARSET STATUS
TRYCCALLFORM GET_SHIP_STATUS_{SHIP_MODEL:SHIP_ID}(STATUS)
CATCH
	THROW 存在しないSHIPMODELが呼ばれました
ENDCATCH

@GET_SHIP_TYPE_STATUS(SHIP_ID, STATUS_ID)
#DIM SHIP_ID
#DIM STATUS_ID
#DIM STATUS, STATUS_LENGTH
CALL GET_SHIP_TYPE_STATUS_ALL(SHIP_ID, STATUS)
RETURN STATUS:STATUS_ID


;----------------------------
; 艦船情報表示
;----------------------------
@SHOW_SHIP_INFO(SHIP_ID)
#DIM SHIP_ID
#DIM SLOT_ID
#DIM STATUS, STATUS_LENGTH
#DIM SHIP_STATUS, SHIP_STATUS_LENGTH
$INPUT_LOOP

PRINTFORML 名前:     %SHIP_NAME:SHIP_ID%
PRINTFORML 艦種:     %GET_TYPE_NAME(SHIP_CATEGORY:SHIP_ID)%
TRYCALLFORM GET_SHIP_STATUS_{SHIP_MODEL:SHIP_ID}(SHIP_STATUS)
RESULTS = ---
FOR SLOT_ID, 0, SHIP_STATUS:SHIP_MAIN_WEAPON_SLOT
	TRYCALLFORM GET_MAIN_WEAPON_NAME_{SHIP_EQUIP:主砲:SLOT_ID:SHIP_ID}
	IF SLOT_ID == 0
		PRINTFORM %"主砲:", 10, LEFT%
	ELSE
		PRINTFORM %"", 10, LEFT%
	ENDIF
	PRINTBUTTON @"[%RESULTS%]", SHIP_ID * 100 + 10 + SLOT_ID
	TRYCALLFORM GET_SUB_WEAPON_NAME_{SHIP_EQUIP:主砲:SLOT_ID:SHIP_ID}
	PRINTL
NEXT
FOR SLOT_ID, 0, SHIP_STATUS:SHIP_SUB_WEAPON_SLOT
	TRYCALLFORM GET_SUB_WEAPON_NAME_{SHIP_EQUIP:副砲:SLOT_ID:SHIP_ID}
	IF SLOT_ID == 0
		PRINTFORM %"副砲:", 10, LEFT%
	ELSE
		PRINTFORM %"", 10, LEFT%
	ENDIF
	PRINTBUTTON @"[%RESULTS%]", SHIP_ID * 100 + 20 + SLOT_ID
	TRYCALLFORM GET_SUB_WEAPON_NAME_{SHIP_EQUIP:副砲:SLOT_ID:SHIP_ID}
	PRINTL
NEXT
FOR SLOT_ID, 0, SHIP_STATUS:SHIP_SIELD_SLOT
	TRYCALLFORM GET_SIELD_NAME_{SHIP_EQUIP:シールド:SLOT_ID:SHIP_ID}
	IF SLOT_ID == 0
		PRINTFORM %"シールド:", 10, LEFT%
	ELSE
		PRINTFORM %"", 10, LEFT%
	ENDIF
	PRINTBUTTON @"[%RESULTS%]", SHIP_ID * 100 + 30 + SLOT_ID
	TRYCALLFORM GET_SIELD_NAME_{SHIP_EQUIP:シールド:SLOT_ID:SHIP_ID}
	PRINTL
NEXT
FOR SLOT_ID, 0, SHIP_STATUS:SHIP_ARMOR_SLOT
	TRYCALLFORM GET_ARMOR_NAME_{SHIP_EQUIP:装甲:SLOT_ID:SHIP_ID}
	IF SLOT_ID == 0
		PRINTFORM %"装甲:", 10, LEFT%
	ELSE
		PRINTFORM %"", 10, LEFT%
	ENDIF
	PRINTBUTTON @"[%RESULTS%]", SHIP_ID * 100 + 40 + SLOT_ID
	TRYCALLFORM GET_ARMOR_NAME_{SHIP_EQUIP:装甲:SLOT_ID:SHIP_ID}
	PRINTL
NEXT

TRYCALLFORM GET_ENGIN_NAME_{SHIP_EQUIP:エンジン:0:SHIP_ID}
PRINTFORM %"エンジン:", 10, LEFT%
PRINTBUTTON @"[%RESULTS%]", SHIP_ID * 100 + 50
TRYCALLFORM GET_ENGIN_NAME_{SHIP_EQUIP:エンジン:0:SHIP_ID}
PRINTL

TRYCALLFORM GET_COMPUTER_NAME_{SHIP_EQUIP:AI:0:SHIP_ID}
PRINTFORM %"制御AI:", 10, LEFT%
PRINTBUTTON @"[%RESULTS%]", SHIP_ID * 100 + 60
TRYCALLFORM GET_COMPUTER_NAME_{SHIP_EQUIP:AI:0:SHIP_ID}
PRINTL

TRYCALLFORM GET_SENSOR_NAME_{SHIP_EQUIP:センサー:0:SHIP_ID}
PRINTFORM %"センサー:", 10, LEFT%
PRINTBUTTON @"[%RESULTS%]", SHIP_ID * 100 + 70
TRYCALLFORM GET_SENSOR_NAME_{SHIP_EQUIP:センサー:0:SHIP_ID}
PRINTL

TRYCALLFORM GET_OPTION_NAME_{SHIP_EQUIP:オプション:0:SHIP_ID}
PRINTFORM %"オプション:", 10, LEFT%
PRINTBUTTON @"[%RESULTS%]", SHIP_ID * 100 + 80
TRYCALLFORM GET_OPTION_NAME_{SHIP_EQUIP:オプション:0:SHIP_ID}
PRINTL

CALL GET_SHIP_HP(SHIP_ID)
PRINTFORML 耐久     {RESULT}/{RESULT + (SHIP_DAMAGE:SHIP_ID)}
LOCAL = 0
FOR SLOT_ID, 0, SHIP_STATUS:SHIP_SIELD_SLOT
	TRYCALLFORM GET_SIELD_STATUS_{SHIP_EQUIP:シールド:SLOT_ID:SHIP_ID}(STATUS)
	LOCAL += STATUS:SIELD
NEXT
CALL GET_SHIP_SIELD(SHIP_ID)
PRINTFORML シールド {RESULT}/{LOCAL}
PRINTBUTTON "[完了]", 100
PRINTL 
INPUT
DRAWLINE
SELECTCASE RESULT
	CASE SHIP_ID * 100 + 10 TO SHIP_ID * 100 + 19
		SLOT_ID = RESULT - (SHIP_ID * 100 + 10)
		TRYCALLFORM GET_MAIN_WEAPON_DESCRIPTION_{SHIP_EQUIP:主砲:SLOT_ID:SHIP_ID}
		DRAWLINE
		GOTO INPUT_LOOP
	CASE SHIP_ID * 100 + 20 TO SHIP_ID * 100 + 29
		SLOT_ID = RESULT - (SHIP_ID * 100 + 20)
		TRYCALLFORM GET_SUB_WEAPON_DESCRIPTION_{SHIP_EQUIP:副砲:SLOT_ID:SHIP_ID}
		DRAWLINE
		GOTO INPUT_LOOP
	CASE SHIP_ID * 100 + 30 TO SHIP_ID * 100 + 39
		SLOT_ID = RESULT - (SHIP_ID * 100 + 30)
		TRYCALLFORM GET_SIELD_DESCRIPTION_{SHIP_EQUIP:シールド:SLOT_ID:SHIP_ID}
		DRAWLINE
		GOTO INPUT_LOOP
	CASE SHIP_ID * 100 + 40 TO SHIP_ID * 100 + 49
		SLOT_ID = RESULT - (SHIP_ID * 100 + 40)
		TRYCALLFORM GET_ARMOR_DESCRIPTION_{SHIP_EQUIP:装甲:SLOT_ID:SHIP_ID}
		DRAWLINE
		GOTO INPUT_LOOP
	CASE SHIP_ID * 100 + 50
		TRYCALLFORM GET_ENGIN_DESCRIPTION_{SHIP_EQUIP:エンジン:0:SHIP_ID}
		DRAWLINE
		GOTO INPUT_LOOP
	CASE SHIP_ID * 100 + 60
		TRYCALLFORM GET_COMPUTER_DESCRIPTION_{SHIP_EQUIP:AI:0:SHIP_ID}
		DRAWLINE
		GOTO INPUT_LOOP
	CASE SHIP_ID * 100 + 70
		TRYCALLFORM GET_SENSOR_DESCRIPTION_{SHIP_EQUIP:センサー:0:SHIP_ID}
		DRAWLINE
		GOTO INPUT_LOOP
	CASE SHIP_ID * 100 + 80
		TRYCALLFORM GET_OPTION_DESCRIPTION_{SHIP_EQUIP:オプション:0:SHIP_ID}
		DRAWLINE
		GOTO INPUT_LOOP
	CASE 100
		RETURN
	CASEELSE
		GOTO INPUT_LOOP
ENDSELECT

;----------------------------
; 艦船プリセット
;----------------------------
@INIT_PRESET_SHIP(ARG:0, ARG:1, ARG:2, ARGS:0, ARG:3)
#DIM SHIP_ID
CALL INIT_SHIP(ARG:0, ARG:1, ARG:2, ARGS:0)
SHIP_ID = RESULT
IF RESULT == -1
	IF ARG == 国家ID_プレイヤー
		SETCOLOR 0XFFFF00
		PRINTFORML [INFO] 条約によりこれ以上建艦できません
		RESETCOLOR
	ENDIF
ELSE
	TRYCALLFORM SET_SHIP_PRESET_{ARG:3}(SHIP_ID)
	RETURN SHIP_ID
ENDIF
;----------------------------
; 艦のHP返却
;----------------------------
@GET_SHIP_HP(SHIP_ID)
#DIM SHIP_ID
CALL GET_SHIP_TOTAL_HP(SHIP_ID)
RETURN LIMIT(RESULT - SHIP_DAMAGE:SHIP_ID, 0, RESULT)

;----------------------------
; 艦の最大HP
;----------------------------
@GET_SHIP_TOTAL_HP(SHIP_ID)
#DIM SHIP_ID
#DIM SHIP_TOTAL_HP
#DIM STATUS, STATUS_LENGTH
#DIM SHIP_STATUS, SHIP_STATUS_LENGTH
#DIM SLOT_ID
#DIM TOTAL_HP
TRYCALLFORM GET_SHIP_STATUS_{SHIP_MODEL:SHIP_ID}(SHIP_STATUS)
TOTAL_HP = SHIP_STATUS:SHIP_HP
FOR SLOT_ID, 0, SHIP_STATUS:SHIP_SIELD_SLOT
	TRYCALLFORM GET_ARMOR_STATUS_{SHIP_EQUIP:装甲:SLOT_ID:SHIP_ID}(STATUS)
	TOTAL_HP += STATUS:ARMOR
NEXT
RETURN TOTAL_HP

;----------------------------
; 艦のHPを100分率で返却
;----------------------------
@GET_SHIP_HP_PERCENT(SHIP_ID)
#DIM SHIP_ID
CALL GET_SHIP_HP(SHIP_ID)
LOCAL = RESULT
CALL GET_SHIP_TOTAL_HP(SHIP_ID)
RETURN (100 * LOCAL) / RESULT

;----------------------------
; 艦のHPバーを表示
;----------------------------
@PRINT_SHIP_HP_BAR(SHIP_ID, BAR_LENGTH)
#DIM BAR_LENGTH
#DIM BAR_COLOR
#DIM SHIP_ID
#DIMS BAR_STR

BAR_STR '= UNICODE(0x2586)
CALL GET_SHIP_HP_PERCENT(SHIP_ID)
SELECTCASE RESULT
	CASE 0 TO 25
		BAR_COLOR = 0XFF0000
	CASE 26 TO 50
		BAR_COLOR = 0XFFFF00
	CASEELSE
		BAR_COLOR = 0X00FF00
ENDSELECT

CALL PRINT_COLORBAR(RESULT, 100, BAR_LENGTH, BAR_STR, BAR_STR, BAR_COLOR)
;----------------------------
; 艦のシールド値返却
;----------------------------
@GET_SHIP_SIELD(SHIP_ID)
#DIM SHIP_ID
CALL GET_SHIP_TOTAL_SIELD(SHIP_ID)
RETURN LIMIT(RESULT- SIELD_DAMAGE:SHIP_ID, 0, RESULT)

;----------------------------
; 艦の最大シールド値返却
;----------------------------
@GET_SHIP_TOTAL_SIELD(SHIP_ID)
#DIM SHIP_ID
#DIM STATUS, STATUS_LENGTH
#DIM SHIP_STATUS, SHIP_STATUS_LENGTH
#DIM TOTAL_SIELD
#DIM SLOT_ID
TOTAL_SIELD = 0
TRYCALLFORM GET_SHIP_STATUS_{SHIP_MODEL:SHIP_ID}(SHIP_STATUS)
FOR SLOT_ID, 0, SHIP_STATUS:SHIP_SIELD_SLOT
	TRYCALLFORM GET_SIELD_STATUS_{SHIP_EQUIP:シールド:SLOT_ID:SHIP_ID}(STATUS)
	TOTAL_SIELD += STATUS:SIELD
NEXT
RETURN TOTAL_SIELD

;----------------------------
; 艦のシールドを100分率で返却
;----------------------------
@GET_SHIP_SHIELD_PERCENT(SHIP_ID)
#DIM SHIP_ID
CALL GET_SHIP_SIELD(SHIP_ID)
LOCAL = RESULT
CALL GET_SHIP_TOTAL_SIELD(SHIP_ID)
RETURN (100 * LOCAL) / RESULT

;----------------------------
; 艦のシールドバーを表示
;----------------------------
@PRINT_SHIP_SHIELD_BAR(SHIP_ID, BAR_LENGTH)
#DIM BAR_LENGTH
#DIM BAR_COLOR
#DIM SHIP_ID
#DIMS BAR_STR

BAR_STR '= UNICODE(0x2586)
CALL GET_SHIP_SHIELD_PERCENT(SHIP_ID)
BAR_COLOR = 0X00ced1

CALL PRINT_COLORBAR(RESULT, 100, BAR_LENGTH, BAR_STR, BAR_STR, BAR_COLOR)

;----------------------------
; 艦のシールド値自動回復
;----------------------------
@AUTO_RECOVER_SIELD(SHIP_ID)
#DIM SHIP_ID
#DIM STATUS, STATUS_LENGTH
#DIM SHIP_STATUS, SHIP_STATUS_LENGTH
#DIM TOTAL_RECOVER
#DIM TOTAL_SIELD
#DIM SLOT_ID
TOTAL_SIELD = 0
TOTAL_RECOVER = 0
TRYCALLFORM GET_SHIP_STATUS_{SHIP_MODEL:SHIP_ID}(SHIP_STATUS)
FOR SLOT_ID, 0, SHIP_STATUS:SHIP_SIELD_SLOT
	TRYCALLFORM GET_SIELD_STATUS_{SHIP_EQUIP:シールド:SLOT_ID:SHIP_ID}(STATUS)
	TOTAL_SIELD += STATUS:SIELD
	TOTAL_SIELD += STATUS:SIELD_RECOVER
NEXT
SIELD_DAMAGE:SHIP_ID = LIMIT(SIELD_DAMAGE:SHIP_ID - TOTAL_RECOVER, 0, TOTAL_SIELD)

;----------------------------
; 艦の合計火力
;----------------------------
@GET_TOTAL_FIREPOWER(SHIP_ID, FIREPOWER_LIST)
#DIM SHIP_ID
#DIM W_TYPE
#DIM STATUS, STATUS_LENGTH
#DIM SHIP_STATUS, SHIP_STATUS_LENGTH
#DIM SLOT_ID
#DIM FIREPOWER
#DIM REF FIREPOWER_LIST
VARSET FIREPOWER_LIST, 0
TRYCALLFORM GET_SHIP_STATUS_{SHIP_MODEL:SHIP_ID}(SHIP_STATUS)
FOR SLOT_ID, 0, SHIP_STATUS:SHIP_MAIN_WEAPON_SLOT
	TRYCALLFORM GET_MAIN_WEAPON_STATUS_{SHIP_EQUIP:主砲:SLOT_ID:SHIP_ID}(STATUS)
	FIREPOWER_LIST:(STATUS:WEAPON_TYPE) += STATUS:DAMAGE * STATUS:FIRE_RATE
NEXT
FOR SLOT_ID, 0, SHIP_STATUS:SHIP_SUB_WEAPON_SLOT
	TRYCALLFORM GET_SUB_WEAPON_STATUS_{SHIP_EQUIP:副砲:SLOT_ID:SHIP_ID}(STATUS)
	FIREPOWER_LIST:(STATUS:WEAPON_TYPE) += STATUS:DAMAGE * STATUS:FIRE_RATE
NEXT
RETURN 0
;----------------------------
; 艦の主砲レンジ取得
;----------------------------
@GET_MAIN_WEAPON_RANGE(SHIP_ID)
#DIM SHIP_ID
#DIM STATUS, STATUS_LENGTH
#DIM SHIP_STATUS, SHIP_STATUS_LENGTH
#DIM SLOT_ID
#DIM CURRENT_RANGE
CURRENT_RANGE = 10
TRYCALLFORM GET_SHIP_STATUS_{SHIP_MODEL:SHIP_ID}(SHIP_STATUS)
FOR SLOT_ID, 0, SHIP_STATUS:SHIP_MAIN_WEAPON_SLOT
	TRYCALLFORM GET_MAIN_WEAPON_STATUS_{SHIP_EQUIP:主砲:SLOT_ID:SHIP_ID}(STATUS)
	SIF CURRENT_RANGE > STATUS:FIRE_RANGE
		CURRENT_RANGE = STATUS:FIRE_RANGE
NEXT
RETURN CURRENT_RANGE

;----------------------------
; 艦の副砲レンジ取得
;----------------------------
@GET_SUB_WEAPON_RANGE(SHIP_ID)
#DIM SHIP_ID
#DIM STATUS, STATUS_LENGTH
#DIM SHIP_STATUS, SHIP_STATUS_LENGTH
#DIM SLOT_ID
#DIM CURRENT_RANGE
CURRENT_RANGE = 10
TRYCALLFORM GET_SHIP_STATUS_{SHIP_MODEL:SHIP_ID}(SHIP_STATUS)
FOR SLOT_ID, 0, SHIP_STATUS:SHIP_SUB_WEAPON_SLOT
	TRYCALLFORM GET_SUB_WEAPON_STATUS_{SHIP_EQUIP:副砲:SLOT_ID:SHIP_ID}(STATUS)
	SIF CURRENT_RANGE > STATUS:FIRE_RANGE
		CURRENT_RANGE = STATUS:FIRE_RANGE
NEXT
RETURN CURRENT_RANGE

;----------------------------
; 艦の主砲命中率取得
;----------------------------
@GET_MAIN_WEAPON_HIT_RATE(SHIP_ID, SLOT_ID)
#DIM SHIP_ID
#DIM SLOT_ID
#DIM STATUS, STATUS_LENGTH
TRYCALLFORM GET_MAIN_WEAPON_STATUS_{SHIP_EQUIP:主砲:SLOT_ID:SHIP_ID}(STATUS)
RETURN STATUS:HIT_RATE

;----------------------------
; 艦の副砲命中率取得
;----------------------------
@GET_SUB_WEAPON_HIT_RATE(SHIP_ID, SLOT_ID)
#DIM SHIP_ID
#DIM SLOT_ID
#DIM STATUS, STATUS_LENGTH
TRYCALLFORM GET_SUB_WEAPON_STATUS_{SHIP_EQUIP:副砲:SLOT_ID:SHIP_ID}(STATUS)
RETURN STATUS:HIT_RATE

;----------------------------
; 艦の主砲発砲回数取得
;----------------------------
@GET_MAIN_WEAPON_FIRE_RATE(SHIP_ID, SLOT_ID)
#DIM SHIP_ID
#DIM SLOT_ID
#DIM STATUS, STATUS_LENGTH
TRYCALLFORM GET_MAIN_WEAPON_STATUS_{SHIP_EQUIP:主砲:SLOT_ID:SHIP_ID}(STATUS)
RETURN STATUS:FIRE_RATE

;----------------------------
; 艦の副砲発砲回数取得
;----------------------------
@GET_SUB_WEAPON_FIRE_RATE(SHIP_ID, SLOT_ID)
#DIM SHIP_ID
#DIM SLOT_ID
#DIM STATUS, STATUS_LENGTH
TRYCALLFORM GET_SUB_WEAPON_STATUS_{SHIP_EQUIP:副砲:SLOT_ID:SHIP_ID}(STATUS)
RETURN STATUS:FIRE_RATE

;----------------------------
; 艦の主砲攻撃力取得
;----------------------------
@GET_MAIN_WEAPON_DAMAGE(SHIP_ID, SLOT_ID)
#DIM SHIP_ID
#DIM SLOT_ID
#DIM STATUS, STATUS_LENGTH
TRYCALLFORM GET_MAIN_WEAPON_STATUS_{SHIP_EQUIP:主砲:SLOT_ID:SHIP_ID}(STATUS)
RETURN STATUS:DAMAGE

;----------------------------
; 艦の艦載機体力取得
;----------------------------
@GET_MAX_AIR_SHIP_HP(SHIP_ID)
#DIM SHIP_ID
#DIM STATUS, STATUS_LENGTH
#DIM SHIP_STATUS, SHIP_STATUS_LENGTH
#DIM SLOT_ID
#DIM CURRENT_HP
CURRENT_HP = 0
TRYCALLFORM GET_SHIP_STATUS_{SHIP_MODEL:SHIP_ID}(SHIP_STATUS)
FOR SLOT_ID, 0, SHIP_STATUS:SHIP_MAIN_WEAPON_SLOT
	SIF STATUS:WEAPON_TYPE != 戦闘機
		CONTINUE
	TRYCALLFORM GET_MAIN_WEAPON_STATUS_{SHIP_EQUIP:主砲:SLOT_ID:SHIP_ID}(STATUS)
	CURRENT_HP += STATUS:AIR_SHIP_HP
NEXT
RETURN CURRENT_HP

;----------------------------
; 艦の副砲攻撃力取得
;----------------------------
@GET_SUB_WEAPON_DAMAGE(SHIP_ID, SLOT_ID)
#DIM SHIP_ID
#DIM SLOT_ID
#DIM STATUS, STATUS_LENGTH
TRYCALLFORM GET_SUB_WEAPON_STATUS_{SHIP_EQUIP:副砲:SLOT_ID:SHIP_ID}(STATUS)
RETURN STATUS:DAMAGE

;----------------------------
; 艦の副砲対空取得
;----------------------------
@GET_SUB_ANTI_AIR(SHIP_ID)
#DIM SHIP_ID
#DIM STATUS, STATUS_LENGTH
#DIM SHIP_STATUS, SHIP_STATUS_LENGTH
#DIM SLOT_ID
#DIM CURRENT_ANTI_AIR
TRYCALLFORM GET_SHIP_STATUS_{SHIP_MODEL:SHIP_ID}(SHIP_STATUS)
CURRENT_ANTI_AIR = 0
FOR SLOT_ID, 0, SHIP_STATUS:SHIP_SUB_WEAPON_SLOT
	TRYCALLFORM GET_SUB_WEAPON_STATUS_{SHIP_EQUIP:副砲:SLOT_ID:SHIP_ID}(STATUS)
	CURRENT_ANTI_AIR += STATUS:ANTI_AIR
NEXT
RETURN CURRENT_ANTI_AIR

;----------------------------
; 艦の回避率返却
;----------------------------
@GET_AVOID(SHIP_ID)
#DIM SHIP_ID
#DIM AVOID_POWER
#DIM IS_AVOID
#DIM STATUS, STATUS_LENGTH
#DIM SHIP_STATUS, SHIP_STATUS_LENGTH
AVOID_POWER = 0
TRYCALLFORM GET_ENGIN_STATUS_{SHIP_EQUIP:エンジン:0:SHIP_ID}(STATUS)
TRYCALLFORM GET_SHIP_STATUS_{SHIP_MODEL:SHIP_ID}(SHIP_STATUS)
AVOID_POWER = SHIP_STATUS:SHIP_AVOID
AVOID_POWER += STATUS:AVOID

RETURN AVOID_POWER

;----------------------------
; 攻撃参加できる艦載機の数を返す
;----------------------------
@GET_JOIN_AIR_SHIP(SHIP_ID, SLOT_ID)
#DIM SHIP_ID
#DIM SLOT_ID
#DIM STATUS, STATUS_LENGTH
#DIM SHIP_STATUS, SHIP_STATUS_LENGTH
#DIM 最大HP
#DIM 現在HP

TRYCALLFORM GET_MAIN_WEAPON_STATUS_{SHIP_EQUIP:主砲:SLOT_ID:SHIP_ID}(STATUS)
SIF STATUS:WEAPON_TYPE != 戦闘機
	RETURN 0
最大HP = STATUS:AIR_SHIP_COUNT * STATUS:AIR_SHIP_HP
現在HP = LIMIT(最大HP - AIR_SHIP_DAMAGE:SHIP_ID, 0, 最大HP)
RETURN STATUS:AIR_SHIP_COUNT * 100 * 現在HP / 最大HP / 100

;----------------------------
; 船の名称変更
;----------------------------
@CHANGE_SHIP_NAME(SHIP_ID)
#DIM SHIP_ID
$INPUT_LOOP
PRINTL 新しい艦船の名前を入力してください
INPUTS
STRLENFORM INPUTS
IF RESULT > 0
	$INPUT_LOOP2
	PRINTFORML %RESULTS% でいいですか？
	PRINTBUTTON "[0] はい", 0
	PRINT  
	PRINTBUTTON "[1] いいえ", 1
	PRINTL 
	INPUT
	IF RESULT == 0
		SHIP_NAME:SHIP_ID = %RESULTS%
		RETURN
	ELSEIF RESULT == 1
		GOTO INPUT_LOOP
	ELSE
		GOTO INPUT_LOOP2
	ENDIF
ELSE
	GOTO INPUT_LOOP
ENDIF


;----------------------------
; 破壊された船を除去する
;----------------------------
@RETIRE_BROKEN_SHIP
#DIM ITER

FOR ITER, 0, MAX_SHIP
	SIF SHIP_COUNTRY:ITER == 0
		CONTINUE
	CALL GET_SHIP_HP(ITER)
	SIF RESULT > 0
		CONTINUE
	SHIP_COUNTRY:ITER = 0
	SHIP_POSITION:ITER = 0
	SHIP_FOLLOW:ITER = -1
	SHIP_CATEGORY:ITER = 0
	SHIP_NAME:ITER = 
	SIELD_DAMAGE:ITER = 0
	SHIP_DAMAGE:ITER = 0
	SHIP_MISSION:ITER = 0
	FOR LOCAL, 0, EQUIP_TYPE_LENGTH
		FOR LOCAL:1, 0, 10
			SHIP_EQUIP:LOCAL:(LOCAL:1):ITER = 0
		NEXT
	NEXT
NEXT

;----------------------------
; 艦船の耐久が減っているか判定
; 戻り値 INT 0減っていない 1減っている
;----------------------------
@IS_NEED_REPAIR(SHIP_ID)
#FUNCTION
#DIM SHIP_ID
#DIM CONST MAX_REPAIR_TURN = 200
#DIM CONST REPAIR_PER_COST = 10

; 損傷してない場合は弾く
SIF SHIP_DAMAGE:SHIP_ID == 0 && SIELD_DAMAGE:SHIP_ID == 0
	RETURNF 0
RETURNF 1

;----------------------------
; 艦船の耐久回復
; 戻り値 INT 払ったコスト
;----------------------------
@REPAIR(SHIP_ID)
#FUNCTION
#DIM SHIP_ID
#DIM COST
#DIM CONST MAX_REPAIR_TURN = 200
#DIM CONST REPAIR_PER_COST = 10

COST = 0

; 損傷してない場合は弾く
SIF SHIP_DAMAGE:SHIP_ID == 0 && SIELD_DAMAGE:SHIP_ID == 0
    RETURNF COST

IF SHIP_DAMAGE:SHIP_ID > 0 && SHIP_DAMAGE:SHIP_ID < MAX_REPAIR_TURN
    COST += SHIP_DAMAGE:SHIP_ID * 10
ELSE
    COST += MAX_REPAIR_TURN * 10
ENDIF

IF SIELD_DAMAGE:SHIP_ID > 0 && SIELD_DAMAGE:SHIP_ID < MAX_REPAIR_TURN
    COST += SIELD_DAMAGE:SHIP_ID * 10
ELSE
    COST += MAX_REPAIR_TURN * 100
ENDIF

RETURNF COST

@GET_SHIP_MISSION_STR(SHIP_ID)
#FUNCTIONS
#DIM SHIP_ID
SELECTCASE SHIP_MISSION:SHIP_ID
	CASE 待機
		RETURNF "待機"
	CASE パトロール
		RETURNF "哨戒"
	CASE 追従
		RETURNF "追従"
	CASE 移動
		RETURNF "移動"
	CASE 採掘
		RETURNF "採掘"
	CASE 交易
		RETURNF "交易"
	CASE 輸送
		RETURNF "輸送"
	CASEELSE
		RETURNF "????" 
ENDSELECT
;----------------------------
; 船のタスク割り当て
;----------------------------
@SETUP_TASK_LIST(LEFT_COLUMNS, LEFT_COLUMNS_BUTTON_VALUE)
#DIMS REF LEFT_COLUMNS
#DIM REF LEFT_COLUMNS_BUTTON_VALUE
#DIM ITER, 3
#DIM SELECTED
#DIM SECTOR_ID
#DIM X_POS
#DIM Y_POS
#DIM LINE_ITER
#DIM LEFT_COLUMN_SIZE
#DIMS strInputResult

FINDELEMENT LEFT_COLUMNS_BUTTON_VALUE, NONE_LINE
LEFT_COLUMN_SIZE = RESULT

$INPUT_LOOP

LINE_ITER = 0
CALL PRINT_LEFT_COLUMN(LEFT_COLUMNS, LEFT_COLUMNS_BUTTON_VALUE, LINE_ITER)
;PRINTL 　タスクの割り当て
CALL PRINTBUTTON_SHIP_FILTERMISSION( )
PRINTL
LINE_ITER ++

CALL PRINT_LEFT_COLUMN(LEFT_COLUMNS, LEFT_COLUMNS_BUTTON_VALUE, LINE_ITER)
CALL DRAW_RIGHT_COLUMN_GRAY_LINE
LINE_ITER ++

FOR ITER, 0, MAX_SHIP
	SIF SHIP_COUNTRY:ITER != 国家ID_プレイヤー
		CONTINUE
	RESULTS = なし
	GETBIT FILTER_SHIP_MISSION, (SHIP_MISSION:ITER)
	SIF RESULT ==0
		CONTINUE
	
	FOR ITER:1, 0, CHARANUM
		IF BOARDING_SHIP_ID:(ITER:1) == ITER
			RESULTS = %CALLNAME:(ITER:1)%
			BREAK
		ENDIF
	NEXT
	CALL PRINT_LEFT_COLUMN(LEFT_COLUMNS, LEFT_COLUMNS_BUTTON_VALUE, LINE_ITER)
	SELECTCASE SHIP_MISSION:ITER
		CASE 待機
			PRINTBUTTON @"　%SHIP_NAME:ITER, 30, LEFT%艦長: %RESULTS, 20, LEFT% タスク： 待機", ITER + 100
		CASE パトロール
			PRINTBUTTON @"　%SHIP_NAME:ITER, 30, LEFT%艦長: %RESULTS, 20, LEFT% タスク： パトロール", ITER + 100
		CASE 追従
			IF SHIP_FOLLOW:ITER == -1
				PRINTBUTTON @"　%SHIP_NAME:ITER, 30, LEFT%艦長: %RESULTS, 20, LEFT% タスク： 追従(追従先)", ITER + 100
			ELSE
				PRINTBUTTON @"　%SHIP_NAME:ITER, 30, LEFT%艦長: %RESULTS, 20, LEFT% タスク： 追従(%SHIP_NAME:(SHIP_FOLLOW:ITER)%)", ITER + 100
			ENDIF
		CASE 移動
			PRINTBUTTON @"　%SHIP_NAME:ITER, 30, LEFT%艦長: %RESULTS, 20, LEFT% タスク： 移動", ITER + 100
		CASE 採掘
			PRINTBUTTON @"　%SHIP_NAME:ITER, 30, LEFT%艦長: %RESULTS, 20, LEFT% タスク： 採掘", ITER + 100
		CASE 交易
			PRINTBUTTON @"　%SHIP_NAME:ITER, 30, LEFT%艦長: %RESULTS, 20, LEFT% タスク： 交易", ITER + 100
	ENDSELECT
	PRINTL
	LINE_ITER ++
NEXT

; 左カラムが右絡むより長かった場合の処理
FOR LOCAL, LINE_ITER, LEFT_COLUMN_SIZE
	CALL PRINT_LEFT_COLUMN(LEFT_COLUMNS, LEFT_COLUMNS_BUTTON_VALUE, LINE_ITER)
	PRINTL
	LINE_ITER ++
NEXT
PRINTFORM %"", LEFT_COLUMN_LENGTH, LEFT%
CALL DRAW_RIGHT_COLUMN_GRAY_LINE

INPUTS

strInputResult '= RESULTS
;'
ISNUMERIC strInputResult
IF RESULT:0
	TOINT strInputResult
ELSE
	CALL CHAGE_SHIP_FILTERMISSION(strInputResult)
	GOTO INPUT_LOOP
ENDIF

IF RESULT >= 0 && RESULT < LEFT_COLUMN_SIZE
	RETURN RESULT
ENDIF

RESULT -= 100

IF RESULT >= 0 && RESULT < MAX_SHIP && SHIP_COUNTRY:RESULT == 国家ID_プレイヤー
	SELECTED = RESULT
ELSE
	GOTO INPUT_LOOP
ENDIF

$INPUT_LOOP2
DRAWLINE
PRINTL ◆割り振るタスクの選択
PRINTBUTTON "[0] 待機", 0
PRINTL   : 母港に待機させる
PRINTBUTTON "[1] パトロール", 1
PRINTL : 待機している星の周辺をパトロールさせる。操船経験が入る
PRINTBUTTON "[2] 追従", 2
PRINTL   : 指定の味方艦を追従させ、船団を作る
PRINTBUTTON "[3] 移動", 3
PRINTL   : 指定の座標に移動させる
IF SHIP_CATEGORY:SELECTED == 作業船
	PRINTBUTTON "[4] 採掘", 4
	PRINTL   : 指定座標で採掘させる。※搬送用に輸送船を追従させる必要がある
ENDIF
PRINTBUTTON "[5] 交易", 5
PRINTL   : 指定のルールでアイテムの売買を行わせる
PRINTL
PRINTL ◆搭乗員の設定
PRINTBUTTON "[6] 艦長変更", 6
PRINTL
PRINTBUTTON "[7] 乗組員変更", 7
PRINTL
PRINTL
PRINTBUTTON "[9] 完了", 9

INPUT
IF RESULT == 6
	$CHANGE_BOARDER
	DRAWLINE
	CALL SHOW_BOARDING_SLAVE_LIST
	PRINTBUTTON "[9999] 戻る", 9999
	INPUT
	IF RESULT == 9999
		GOTO INPUT_LOOP2
	ELSEIF RESULT < 0 || RESULT >= CHARANUM
		GOTO CHANGE_BOARDER
	ELSE
		SIF CFLAG:RESULT:捕虜先 == 国家ID_プレイヤー || CFLAG:RESULT:所属 != 国家ID_プレイヤー
			GOTO CHANGE_BOARDER
		LOCAL = RESULT
		FINDELEMENT BOARDING_SHIP_ID, SELECTED
		IF RESULT != -1
			BOARDING_SHIP_ID:RESULT = -1
			IF IN_PORT(RESULT) == 0
				CHARACTER_POSITION:RESULT = CHARACTER_POSITION:LOCAL
			ENDIF
		ENDIF
		BOARDING_SHIP_ID:LOCAL = SELECTED
		RIDING_WITH:LOCAL = -1
		CHARACTER_POSITION:LOCAL = SHIP_POSITION:SELECTED
		GOTO INPUT_LOOP2
	ENDIF
ELSEIF RESULT == 0
	SHIP_MISSION:SELECTED = 待機
	GOTO INPUT_LOOP
ELSEIF RESULT == 1
	RESULTS = 
	FOR ITER, 0, CHARANUM
		IF BOARDING_SHIP_ID:ITER == ITER
			RESULTS = %CALLNAME:ITER%
			BREAK
		ENDIF
	NEXT
	FINDELEMENT BOARDING_SHIP_ID, SELECTED
	IF RESULT == -1
		PRINTW 艦長がいないためパトロールミッションを割り振れません
		GOTO INPUT_LOOP2
	ELSE
		SHIP_MISSION:SELECTED = パトロール
		LOCAL:5 = -1
		FOR ITER:1, 0, 星系数
			IF 星系座標ID:(ITER:1) == SHIP_POSITION:SELECTED
				SHIP_PATROL:SELECTED = 星系座標ID:(ITER:1)
				LOCAL:5 = ITER:1
				BREAK
			ENDIF
		NEXT
		IF LOCAL:5 == -1
			PRINTW 宇宙港に泊まっていないため、パトロール任務を割り振れません
		ELSE
			PRINTFORMW %COUNTRY_NAME:(STAR_OWNER:(LOCAL:5))% 星＃{LOCAL:5}のパトロール任務を割り振りました
		ENDIF
	ENDIF
	GOTO INPUT_LOOP
ELSEIF RESULT == 2
	$INPUT_LOOP3
	PRINTL 追従させる船を選択してください
	FOR ITER, 0, MAX_SHIP
		SIF SHIP_COUNTRY:ITER != 国家ID_プレイヤー
			CONTINUE
		SIF SHIP_MISSION:ITER == 追従
			CONTINUE
		SIF SELECTED == ITER
			CONTINUE
		RESULTS = なし
		FOR ITER:1, 0, CHARANUM
			IF BOARDING_SHIP_ID:(ITER:1) == ITER
				RESULTS = %CALLNAME:(ITER:1)%
				BREAK
			ENDIF
		NEXT
		IF BOARDING_SHIP_ID:(ITER:1) == ITER
			PRINTFORMW 艦長がいないため。追従任務を割り振れません
			GOTO INPUT_LOOP2
		ENDIF
		SELECTCASE SHIP_MISSION:ITER
			CASE 待機
				PRINTBUTTON @"[{ITER, 3, RIGHT}] %SHIP_NAME:ITER, 30, LEFT% 艦長: %RESULTS, 20, LEFT% タスク: 待機", ITER
			CASE パトロール
				PRINTBUTTON @"[{ITER, 3, RIGHT}] %SHIP_NAME:ITER, 30, LEFT% 艦長: %RESULTS, 20, LEFT% タスク: パトロール", ITER
			CASE 追従
				PRINTBUTTON @"[{ITER, 3, RIGHT}] %SHIP_NAME:ITER, 30, LEFT% 艦長: %RESULTS, 20, LEFT% タスク: 追従(%SHIP_NAME:(BOARDING_SHIP_ID:(ITER:1))%)", ITER
			CASE 採掘
				PRINTBUTTON @"[{ITER, 3, RIGHT}] %SHIP_NAME:ITER, 30, LEFT% 艦長: %RESULTS, 20, LEFT% タスク: 採掘", ITER
			CASE 交易
				PRINTBUTTON @"[{ITER, 3, RIGHT}] %SHIP_NAME:ITER, 30, LEFT% 艦長: %RESULTS, 20, LEFT% タスク: 交易", ITER
		ENDSELECT
		PRINTL
	NEXT
	PRINTBUTTON "[キャンセル]", 9999
	INPUT
	IF RESULT >= 0 && RESULT < MAX_SHIP && SHIP_COUNTRY:RESULT == 国家ID_プレイヤー && SHIP_MISSION:RESULT != 追従
		SHIP_MISSION:SELECTED = 追従
		SHIP_FOLLOW:SELECTED = RESULT
	ELSEIF RESULT == 9999
		GOTO INPUT_LOOP
	ELSE
		GOTO INPUT_LOOP3
	ENDIF
	PRINTL
	GOTO INPUT_LOOP
ELSEIF RESULT == 3
	CALL SELECT_POINT_BY_MAP(SELECTED)
ELSEIF RESULT == 4
	FINDELEMENT BOARDING_SHIP_ID, SELECTED
	IF RESULT == -1
		PRINTW 艦長がいないため移動ミッションを割り振れません
		GOTO INPUT_LOOP2
	ENDIF
	DRAWLINE
	PRINTL 採掘させる座標を選択
	CALL ID2POS(CHARACTER_POSITION)
	SECTOR_ID = RESULT:0
	$MINING_LOOP
	CALL DRAW_MAP(SECTOR_ID)
	INPUT
	IF RESULT < 0
		RESULT += 1000
		RESULT *= -1
		SECTOR_ID = RESULT
		GOTO MINING_LOOP
	ENDIF

	CALL ID2POS(RESULT)
	SECTOR_ID = RESULT:0
	X_POS = RESULT:1
	Y_POS = RESULT:2
	IF CLEARMAP:SECTOR_ID:X_POS:Y_POS == 0
		PRINTFORMW 未探索の宙域です
		GOTO MINING_LOOP
	ELSEIF MAP:SECTOR_ID:X_POS:Y_POS != 資源
		PRINTFORMW この宙域には資源がありません
		GOTO MINING_LOOP
	ENDIF
	CALL GET_ITEM_NAME(RESOURCE_MAP:SECTOR_ID:X_POS:Y_POS)
	PRINTFORML 座標 X: {X_POS}, Y: {Y_POS} (%RESULTS%)に移動させますか？
	PRINTBUTTON "[0] はい", 0
	PRINTL
	PRINTBUTTON "[1] いいえ", 1
	PRINTL 
	PRINTBUTTON "[9] キャンセル", 9
	PRINTL
	INPUT
	IF RESULT == 0
		CALL POS2ID(SECTOR_ID, X_POS, Y_POS)
		FROM_POS:SELECTED = SHIP_POSITION:SELECTED
		MOVING_POS:SELECTED = RESULT
		SHIP_MISSION:SELECTED = 採掘
		GOTO INPUT_LOOP2
	ELSEIF RESULT == 1
		GOTO MINING_LOOP
	ELSEIF RESULT == 9
		GOTO INPUT_LOOP
	ELSE
		GOTO MINING_LOOP
	ENDIF
ELSEIF RESULT == 5
	FINDELEMENT BOARDING_SHIP_ID, SELECTED
	IF RESULT == -1
		PRINTW 艦長がいないため移動ミッションを割り振れません
		GOTO INPUT_LOOP2
	ENDIF
	CALL SET_TRADE_RULE(SELECTED)
	GOTO INPUT_LOOP
ELSEIF RESULT == 7
	CALL CHANGE_CREW(SELECTED)
	GOTO INPUT_LOOP
ELSEIF RESULT == 9
	GOTO INPUT_LOOP
ENDIF

;----------------------------
; 建艦
;----------------------------
@BUILD_SHIP(PORT_POSID, OWNER, ORDERBY, SHIP_MODEL_ID, NEW_SHIP_NAME, NEW_SHIP_ID)
#DIM PORT_POSID
#DIM OWNER
#DIM ORDERBY
#DIM SHIP_MODEL_ID
#DIMS NEW_SHIP_NAME
#DIM REF NEW_SHIP_ID
#DIM COST
#DIM USE_RESOURCE, ITEM_LENGTH
#DIM MISSING_RESOURCE, ITEM_LENGTH
#DIM ITEM_ID
#DIM RESOURCE_NUM
#DIM CAN_BUILD
#DIM CONST 購入成功 = 1
#DIM CONST 資材不足 = 0
#DIM CONST 金不足 = -1
#DIM CONST 購入キャンセル = -2
#DIM PORT_ID
#DIM SHIP_STATUS, SHIP_STATUS_LENGTH

VARSET USE_RESOURCE, 0
VARSET MISSING_RESOURCE, 0
TRYCALLFORM GET_SHIP_STATUS_{SHIP_MODEL_ID}(SHIP_STATUS)
COST = OWNER == ORDERBY ? 0 # SHIP_STATUS:SHIP_PRICE
CAN_BUILD = 1

TRYCALLFORM GET_SHIP_RESOURCE_{SHIP_MODEL_ID}(USE_RESOURCE)

; 必要資材が足りているか
FOR ITEM_ID, 0, ITEM_LENGTH
	RESOURCE_NUM = GET_RESOURCE_NUM(PORT_POSID, OWNER, ITEM_ID)
	; 不足時
	IF RESOURCE_NUM < USE_RESOURCE:ITEM_ID && ORDERBY == 国家ID_プレイヤー
		CALL GET_ITEM_NAME(ITEM_ID)
		PRINTFORML %RESULTS%が{USE_RESOURCE:ITEM_ID - RESOURCE_NUM}不足
		MISSING_RESOURCE:ITEM_ID += RESOURCE_NUM
		CAN_BUILD = 0
	ELSEIF RESOURCE_NUM < USE_RESOURCE:ITEM_ID
		CAN_BUILD = 0
	ENDIF
NEXT


IF CAN_BUILD == 0 && ORDERBY == 国家ID_プレイヤー
	SETCOLOR 0XFF0000
	PRINTL [CAUTION] ドックの資材不足で建造できませんでした
	RESETCOLOR
	FOR ITEM_ID, 0, ITEM_LENGTH
		IF MISSING_RESOURCE:ITEM_ID != 0
			CALL GET_ITEM_NAME(ITEM_ID)
			PRINTFORML 不足: %RESULTS, 20, LEFT%%TOSTR(USE_RESOURCE:ITEM_ID, "#,###"), 4, RIGHT%個
		ENDIF
	NEXT
	WAIT
	RETURN 資材不足
ENDIF
IF CAN_BUILD == 1
	IF COST > MONEY
		SIF ORDERBY == 国家ID_プレイヤー
			PRINTW 所持金不足です
		RETURN 金不足
	ELSE
		IF ORDERBY == 国家ID_プレイヤー
			CALL BUY_DIALOG(NEW_SHIP_NAME, COST)
		ELSE
			RESULT = 1
		ENDIF
		IF RESULT == 1
			FOR ITEM_ID, 0, ITEM_LENGTH
				SIF USE_RESOURCE:ITEM_ID > 0
					RESULT = REMOVE_RESOURCE(PORT_POSID, OWNER, ITEM_ID, USE_RESOURCE:ITEM_ID)
			NEXT
			CALL INIT_PRESET_SHIP(ORDERBY, PORT_POSID, SHIP_MODEL_ID, NEW_SHIP_NAME, SHIP_MODEL_ID)
			NEW_SHIP_ID = RESULT
			IF ORDERBY == 国家ID_プレイヤー
				MONEY -= COST
			ELSE
				MONEY:ORDERBY -= COST
			ENDIF
			RETURN 購入成功
		ELSE
			RETURN 購入キャンセル
		ENDIF
	ENDIF
ELSE
	RETURN 資材不足
ENDIF

; 購入確認
@BUY_DIALOG(ITEM_NAME, ITEM_PRICE)
#DIMS ITEM_NAME

$INPUT_LOOP
PRINTFORML %ITEM_NAME%は%TOSTR(ITEM_PRICE, "$##,###,###,###")%です
PRINTBUTTON "[0] 購入", 0
PRINTBUTTON "[1] キャンセル", 1
INPUT
IF RESULT == 0
	RETURN 1
ELSEIF RESULT == 1
	RETURN 0
ELSE
	GOTO INPUT_LOOP
ENDIF

;-------------------------------------------------
; ターンエンド時にドックにいる艦船は回復
;-------------------------------------------------
@DOCK_REPAIR
#DIM SHIP_ID
#DIM STAR_ID
#DIM COUNTRY_ID
#DIM REPAIR_COST, MAX_COUNTRY
#DIM CONST REPAIR = 500

VARSET REPAIR_COST, 0

FOR SHIP_ID, 0, MAX_SHIP
    SIF SHIP_MISSION != 待機 && SHIP_MISSION != 追従
        CONTINUE
    FOR STAR_ID, 0, 星系数
        SIF 星系座標ID:STAR_ID != SHIP_POSITION:SHIP_ID
            CONTINUE
        ; 敵対勢力の基地にいる場合は回復しない
        SIF REL_LIKE_COUNTRY:(STAR_OWNER:STAR_ID):(SHIP_COUNTRY:SHIP_ID) < -500
					CONTINUE
			IF IS_NEED_REPAIR(SHIP_ID)
				IF REMOVE_RESOURCE(星系座標ID:STAR_ID, STAR_OWNER:STAR_ID, 装甲合金, 1) == 0
					REPAIR_COST:(SHIP_COUNTRY:SHIP_ID) += REPAIR(SHIP_ID)
					SIELD_DAMAGE:SHIP_ID = LIMIT(SIELD_DAMAGE:SHIP_ID - REPAIR, 0, 999999)
					SHIP_DAMAGE:SHIP_ID = LIMIT(SHIP_DAMAGE:SHIP_ID - REPAIR, 0, 999999)
				ENDIF
			ENDIF
    NEXT
NEXT

FOR COUNTRY_ID, 1, MAX_COUNTRY
    IF COUNTRY_ID == 国家ID_プレイヤー && REPAIR_COST:COUNTRY_ID > 0
        PRINTFORML 艦船修理コストとして$%TOSTR((REPAIR_COST:COUNTRY_ID), "###,###,###")%払いました
        MONEY -= REPAIR_COST:国家ID_プレイヤー
    ELSEIF REPAIR_COST:COUNTRY_ID > 0
        MONEY:COUNTRY_ID -= REPAIR_COST:COUNTRY_ID
    ENDIF
NEXT

;-------------------------------------------------
; 搭乗員の乗換処理
;-------------------------------------------------
@CHANGE_CREW(SHIP_ID)
#DIM SHIP_ID
#DIM SHIP_STATUS, SHIP_STATUS_LENGTH
#DIM MAX_CREW
#DIM ITER
#DIM COUNTER
#DIMS MESSAGE


TRYCALLFORM GET_SHIP_STATUS_{SHIP_MODEL:SHIP_ID}(SHIP_STATUS)
MAX_CREW = SHIP_STATUS:SHIP_CREW
SIF SHIP_EQUIP:オプション:0:SHIP_ID == 1
	MAX_CREW += 1

IF MAX_CREW == 0
	PRINTFORMW この艦には搭乗員を載せられません
	RETURN
ENDIF

; キャラ一覧表示
$RIDING_WITH_LOOP
DRAWLINE
FOR ITER, 0, CHARANUM
	STRLENS CALLNAME:ITER
	SIF RESULT == 0
		CONTINUE
	SIF CFLAG:ITER:捕虜先 == 国家ID_プレイヤー || CFLAG:ITER:所属 != 国家ID_プレイヤー
		CONTINUE
	MESSAGE = フリー
	IF BOARDING_SHIP_ID:ITER != -1
		MESSAGE = 艦長として%SHIP_NAME:(BOARDING_SHIP_ID:ITER)%に搭乗中
	ELSEIF RIDING_WITH:ITER != -1
		MESSAGE = 搭乗員として%SHIP_NAME:(RIDING_WITH:ITER)%に搭乗中
	ENDIF
	PRINTBUTTON @"[{ITER, 3, RIGHT}] %CALLNAME:ITER, 20, LEFT% %MESSAGE%", ITER
	PRINTL
NEXT
PRINTBUTTON "[999] 戻る", 999

; 入力
INPUT
IF RESULT == 999
	RETURN
ELSEIF RESULT >= 0 && RESULT < CHARANUM
	SIF CFLAG:RESULT:捕虜先 == 国家ID_プレイヤー || CFLAG:RESULT:所属 != 国家ID_プレイヤー
		GOTO RIDING_WITH_LOOP
	SELECTED_CHARA = RESULT

	; すでに乗っていたら降ろす
	IF RIDING_WITH:SELECTED_CHARA == SHIP_ID
		PRINTFORMW %CALLNAME:SELECTED_CHARA%を艦から下ろしました
		RIDING_WITH:SELECTED_CHARA = -1
		RETURN
	ENDIF

	; 搭乗員数をカウントする
	COUNTER = 0
	FOR ITER, 0, CHARANUM
		SIF RIDING_WITH:ITER == SHIP_ID
			COUNTER ++
	NEXT
	; 搭乗員数が限界だった場合
	IF COUNTER == MAX_CREW
		$INPUT_LOOP
		PRINTL 登場できる人数の上限に達しています
		PRINTL 代わりに艦から降ろすメンバーを選択してください
		FOR ITER, 0, CHARANUM
			IF RIDING_WITH:ITER == SHIP_ID
				PRINTBUTTON @"[{ITER, 2, RIGHT}] %CALLNAME:ITER%", ITER
				PRINTL
			ENDIF
		NEXT
		PRINTBUTTON "[999] キャンセル", 999
		
		INPUT
		IF RESULT == 999
		ELSEIF RESULT < 0 && RESULT >= CHARANUM
			GOTO INPUT_LOOP
		ELSEIF RIDING_WITH:RESULT != SHIP_ID
			GOTO INPUT_LOOP
		ELSE
			RIDING_WITH:RESULT = -1
			SHIP_MISSION:(BOARDING_SHIP_ID:SELECTED_CHARA) = 待機
			BOARDING_SHIP_ID:SELECTED_CHARA = -1
			RIDING_WITH:SELECTED_CHARA = SHIP_ID
		ENDIF
	; 登場できる場合は塔乗
	ELSE
		SIF BOARDING_SHIP_ID:SELECTED_CHARA != -1
			SHIP_MISSION:(BOARDING_SHIP_ID:SELECTED_CHARA) = 待機
		BOARDING_SHIP_ID:SELECTED_CHARA = -1
		RIDING_WITH:SELECTED_CHARA = SHIP_ID
	ENDIF
	RETURN
ELSE
	GOTO RIDING_WITH_LOOP
ENDIF

@SELECT_POINT_BY_MAP(SHIP_ID)
#DIM SHIP_ID
#DIM SECTOR_ID
#DIM X_POS
#DIM Y_POS

FINDELEMENT BOARDING_SHIP_ID, SHIP_ID
IF RESULT == -1
	PRINTW 艦長がいないため移動ミッションを割り振れません
	RETURN
ENDIF
DRAWLINE
PRINTL 移動させる座標を選択
CALL ID2POS(CHARACTER_POSITION)
SECTOR_ID = RESULT:0
$MAP_LOOP
CALL DRAW_MAP(SECTOR_ID)
INPUT
IF RESULT < 0
	RESULT += 1000
	RESULT *= -1
	SECTOR_ID = RESULT
	GOTO MAP_LOOP
ENDIF
CALL ID2POS(RESULT)
X_POS = RESULT:1
Y_POS = RESULT:2
PRINTFORML セクター＃{SECTOR_ID}, 座標 X: {X_POS}, Y: {Y_POS} に移動させますか？
PRINTBUTTON "[0] はい", 0
PRINTL
PRINTBUTTON "[1] いいえ", 1
PRINTL 
PRINTBUTTON "[9] キャンセル", 9
PRINTL
INPUT
IF RESULT == 0
	CALL POS2ID(SECTOR_ID, X_POS, Y_POS)
	MOVING_POS:SHIP_ID = RESULT
	SHIP_MISSION:SHIP_ID = 移動
	RETURN
ELSEIF RESULT == 1
	GOTO MAP_LOOP
ELSEIF RESULT == 9
	RETURN
ELSE
	GOTO MAP_LOOP
ENDIF

