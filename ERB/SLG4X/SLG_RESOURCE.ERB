;--------------------------
; 採掘ポイントの初期化
;--------------------------
@INIT_MINING_POINT
#DIM SECTOR_ID
#DIM SPORN_POSITION

CALL SET_MINING_POINT
; 一箇所海賊にまみれた資源地帯を設置する
SECTOR_ID = 76
CALL POS2ID(SECTOR_ID, 7, 3)
SPORN_POSITION = RESULT
FOR LOCAL, 0, 10
    CALL INIT_PRESET_SHIP(10, SPORN_POSITION, 汎用コルベット, "海賊コルベット", 汎用コルベット)
    CALL INIT_PRESET_SHIP(10, SPORN_POSITION, 汎用フリゲート, "海賊フリゲート", 汎用フリゲート)
NEXT
FOR LOCAL, 0, 5
    CALL INIT_PRESET_SHIP(10, SPORN_POSITION, 汎用駆逐艦, "海賊駆逐艦", 汎用駆逐艦)
NEXT
CALL INIT_PRESET_SHIP(10, SPORN_POSITION, 汎用巡洋艦, "海賊司令官", 汎用巡洋艦)
SHIP_EQUIP:主砲:0:RESULT = 13
SHIP_EQUIP:主砲:1:RESULT = 13
SHIP_EQUIP:副砲:0:RESULT = 11
SHIP_EQUIP:副砲:1:RESULT = 11
SHIP_EQUIP:副砲:2:RESULT = 11

CALL POS2ID(SECTOR_ID, 3, 7)
SPORN_POSITION = RESULT
FOR LOCAL, 0, 10
    CALL INIT_PRESET_SHIP(10, SPORN_POSITION, 汎用コルベット, "海賊コルベット", 汎用コルベット)
    CALL INIT_PRESET_SHIP(10, SPORN_POSITION, 汎用フリゲート, "海賊フリゲート", 汎用フリゲート)
NEXT
FOR LOCAL, 0, 5
    CALL INIT_PRESET_SHIP(10, SPORN_POSITION, 汎用駆逐艦, "海賊駆逐艦", 汎用駆逐艦)
NEXT
CALL INIT_PRESET_SHIP(10, SPORN_POSITION, 汎用巡洋艦, "海賊司令官", 汎用巡洋艦)
SHIP_EQUIP:主砲:0:RESULT = 13
SHIP_EQUIP:主砲:1:RESULT = 13
SHIP_EQUIP:副砲:0:RESULT = 11
SHIP_EQUIP:副砲:1:RESULT = 11
SHIP_EQUIP:副砲:2:RESULT = 11

CALL POS2ID(SECTOR_ID, 7, 12)
SPORN_POSITION = RESULT
FOR LOCAL, 0, 10
    CALL INIT_PRESET_SHIP(10, SPORN_POSITION, 汎用コルベット, "海賊コルベット", 汎用コルベット)
    CALL INIT_PRESET_SHIP(10, SPORN_POSITION, 汎用フリゲート, "海賊フリゲート", 汎用フリゲート)
NEXT
FOR LOCAL, 0, 5
    CALL INIT_PRESET_SHIP(10, SPORN_POSITION, 汎用駆逐艦, "海賊駆逐艦", 汎用駆逐艦)
NEXT
CALL INIT_PRESET_SHIP(10, SPORN_POSITION, 汎用巡洋艦, "海賊司令官", 汎用巡洋艦)
SHIP_EQUIP:主砲:0:RESULT = 13
SHIP_EQUIP:主砲:1:RESULT = 13
SHIP_EQUIP:副砲:0:RESULT = 11
SHIP_EQUIP:副砲:1:RESULT = 11
SHIP_EQUIP:副砲:2:RESULT = 11

CALL POS2ID(SECTOR_ID, 12, 7)
SPORN_POSITION = RESULT
FOR LOCAL, 0, 10
    CALL INIT_PRESET_SHIP(10, SPORN_POSITION, 汎用コルベット, "海賊コルベット", 汎用コルベット)
    CALL INIT_PRESET_SHIP(10, SPORN_POSITION, 汎用フリゲート, "海賊フリゲート", 汎用フリゲート)
NEXT
FOR LOCAL, 0, 5
    CALL INIT_PRESET_SHIP(10, SPORN_POSITION, 汎用駆逐艦, "海賊駆逐艦", 汎用駆逐艦)
NEXT
CALL INIT_PRESET_SHIP(10, SPORN_POSITION, 汎用巡洋艦, "海賊司令官", 汎用巡洋艦)
SHIP_EQUIP:主砲:0:RESULT = 13
SHIP_EQUIP:主砲:1:RESULT = 13
SHIP_EQUIP:副砲:0:RESULT = 11
SHIP_EQUIP:副砲:1:RESULT = 11
SHIP_EQUIP:副砲:2:RESULT = 11


; 素材価格設定
@INIT_ITEM_PRICE
VARSET ITEM_PRICE, 0
FOR LOCAL, 0, VARSIZE("ITEM_PRICE")
    CALL GET_ITEM_INFO(LOCAL, PRICE)
    SIF RESULT != -1
        ITEM_PRICE:LOCAL = RESULT
NEXT



; 採掘可能か判定
; INT 0: 採掘不可能, 1:採掘可能
@IS_MINING(POSID)
#DIM POSID
#DIM SECTOR_ID
#DIM X_POS
#DIM Y_POS
#DIM SHIP_ID
#DIM MINING_ITER
#DIM TRANSPORT_ITER
#DIM CAPACITY

MINING_ITER = 0
TRANSPORT_ITER = 0
CAPACITY = 0

CALL ID2POS(POSID)
SECTOR_ID = RESULT:0
X_POS = RESULT:1
Y_POS = RESULT:2


SIF MAP:SECTOR_ID:X_POS:Y_POS != 資源
    RETURN 0

FOR SHIP_ID, 0, MAX_SHIP
    SIF SHIP_COUNTRY:SHIP_ID != 国家ID_プレイヤー
        CONTINUE
    SIF SHIP_CATEGORY:SHIP_ID != 輸送船 && SHIP_CATEGORY:SHIP_ID != 作業船
        CONTINUE
    CALL POS2ID(SECTOR_ID, X_POS, Y_POS)
    SIF RESULT != SHIP_POSITION:SHIP_ID
        CONTINUE

    IF SHIP_CATEGORY:SHIP_ID == 作業船
        MINING_ITER ++
        CONTINUE
    ENDIF
    IF SHIP_CATEGORY:SHIP_ID == 輸送船
        TRANSPORT_ITER ++
        CALL GET_VACANT_CARGO_SIZE(SHIP_ID)
        ;CALL GET_CARGO_VACANCY(SHIP_ID)
        CAPACITY += RESULT
    ENDIF
NEXT

SIF MINING_ITER == 0 || TRANSPORT_ITER == 0
    RETURN 0
SIF CAPACITY <= 0
    RETURN 0

RETURN 1

;@GET_CARGO_VACANCY(SHIP_ID)
;#DIM SHIP_ID
;#DIM ITEM_ID
;#DIM CAPACITY
;#DIM SHIP_STATUS, SHIP_STATUS_LENGTH

;SIF SHIP_CATEGORY:SHIP_ID != 輸送船
;    RETURN 0

;TRYCALLFORM GET_SHIP_STATUS_{SHIP_MODEL:SHIP_ID}(SHIP_STATUS)
;CAPACITY += SHIP_STATUS:SHIP_CAPACITY

;FOR ITEM_ID, 0, ITEM_LENGTH
;    CAPACITY -= CARGO_CONTENTS:SHIP_ID:ITEM_ID
;NEXT
;RETURN CAPACITY

; 採掘
; INT 0: 採掘不能, 1:採掘完了, 2:採掘完了したがこれ以上の採掘は不可能
@MINING(POSID, COUNTRY_ID)
#DIM POSID
#DIM SECTOR_ID
#DIM X_POS
#DIM Y_POS
#DIM COUNTRY_ID
#DIM SHIP_ID
#DIM CARGO_SHIP, MAX_SHIP
#DIM CARGO_SHIP_COUNTER
#DIM MINING_SHIP_COUNTER
#DIM CONST MINING_EFFICIENCY = 50
#DIM MINED_AMOUNT; 採掘量
#DIM PRE_MINED_AMOUNT
#DIM ITER, 2
#DIM CAPACITY
#DIM SHIP_STATUS, SHIP_STATUS_LENGTH
#DIM MINED_RESOURCE

VARSET CARGO_SHIP, -1
CARGO_SHIP_COUNTER = 0
MINING_SHIP_COUNTER = 0
MINED_AMOUNT = 0
CAPACITY = 0
CALL ID2POS(POSID)
SECTOR_ID = RESULT:0
X_POS = RESULT:1
Y_POS = RESULT:2

FOR SHIP_ID, 0, MAX_SHIP
    SIF SHIP_COUNTRY:SHIP_ID != COUNTRY_ID
        CONTINUE
    SIF SHIP_CATEGORY:SHIP_ID != 輸送船 && SHIP_CATEGORY:SHIP_ID != 作業船
        CONTINUE
    CALL POS2ID(SECTOR_ID, X_POS, Y_POS)
    SIF RESULT != SHIP_POSITION:SHIP_ID
        CONTINUE
    IF SHIP_CATEGORY:SHIP_ID == 輸送船
        CARGO_SHIP:CARGO_SHIP_COUNTER = SHIP_ID
        CARGO_SHIP_COUNTER ++
    ENDIF
    IF SHIP_CATEGORY:SHIP_ID == 作業船
        MINING_SHIP_COUNTER ++
    ENDIF
NEXT

SIF CARGO_SHIP_COUNTER == 0 || MINING_SHIP_COUNTER == 0
    RETURN 0

FOR ITER, 0, MINING_SHIP_COUNTER
    ; TODO 採掘船の採掘効率を取得して計算に組み込めるようにする
    MINED_AMOUNT += MINING_EFFICIENCY
NEXT

;表示用の変数
PRE_MINED_AMOUNT = MINED_AMOUNT

FOR ITER, 0, CARGO_SHIP_COUNTER
    SHIP_ID = CARGO_SHIP:ITER
    MINED_RESOURCE = RESOURCE_MAP:SECTOR_ID:X_POS:Y_POS
    CALL LOAD_TO_SHIP(SHIP_ID, MINED_RESOURCE, MINED_AMOUNT)
    SIF MINED_AMOUNT > 0
        MINED_AMOUNT -= RESULT
NEXT

IF MINED_AMOUNT == 0
    IF COUNTRY_ID == 国家ID_プレイヤー
        CALL GET_ITEM_NAME(RESOURCE_MAP:SECTOR_ID:X_POS:Y_POS)
        PRINTFORML %RESULTS%を{PRE_MINED_AMOUNT}採掘し、輸送船に保存しました
    ENDIF
    RETURN 1
ENDIF

RETURN 2

@GET_RESOURCE_NAME(ID)
;Obsolete, @GET_ITEM_NAMEをご利用ください
#FUNCTIONS
#DIM ID

SELECTCASE ID
    CASE 赤原石
        RETURNF "赤原石"
    CASE 青原石
        RETURNF "青原石"
    CASE 貴金属鉱石
        RETURNF "貴金属鉱石"
    CASE エウスガス
        RETURNF "エウスガス"
    CASE ビクニーガス
        RETURNF "ビクニーガス"
    CASE ゼスタガス
        RETURNF "ゼスタガス"
    CASE チェルニーオイル
        RETURNF "チェルニーオイル"
    CASE グリッドオイル
        RETURNF "グリッドオイル"
    CASE ジェルオイル
        RETURNF "ジェルオイル"
    CASE 武装合金
        RETURNF "武装合金"
    CASE 装甲合金
        RETURNF "装甲合金"
    CASE 重武装合金
        RETURNF "重武装合金"
    CASE 重装甲合金
        RETURNF "重装甲合金"
    CASE シールド発生装置
        RETURNF "シールド発生装置"
    CASE 多重シールド発生装置
        RETURNF "多重シールド発生装置"
    CASE 武装制御機器
        RETURNF "武装制御機器"
    CASE 合金加工剤
        RETURNF "合金加工剤"
    CASE 耐熱合金
        RETURNF "耐熱合金"
    CASE ジェットガス
        RETURNF "ジェットガス"
    CASE 超電導回路
        RETURNF "超電導回路"
    CASE タイラーセンサー
        RETURNF "タイラーセンサー"
    CASE 宇宙たばこ
        RETURNF "宇宙たばこ"
    CASE オーネスワイン
        RETURNF "オーネスワイン"
    CASE トルス酒
        RETURNF "トルス酒"
    CASE サンロットの香木
        RETURNF "サンロットの香木"
    CASE フォルス酒
        RETURNF "フォルス酒"
    CASE ゴルンミスト発生器
        RETURNF "ゴルンミスト発生器"
    CASE ロック布
        RETURNF "ロック布"
    CASE ナナーシャ鳥
        RETURNF "ナナーシャ鳥"
    CASE エインズの実
        RETURNF "エインズの実"
    CASE ナイ・ゲーム機
        RETURNF "ナイ・ゲーム機"
    CASE 日本酒
        RETURNF "日本酒"
    CASE MR観光セット
        RETURNF "MR観光セット"
    CASE ペルマティーセット
        RETURNF "ペルマティーセット"
    CASE パワードスーツ
        RETURNF "パワードスーツ"
    CASE レース機
        RETURNF "レース機"
    CASE 思考戦車
        RETURNF "思考戦車"
    CASE 異星生物育成キット
        RETURNF "異星生物育成キット"
    CASE セクサロイド
        RETURNF "セクサロイド"
    CASE プラモデル
        RETURNF "プラモデル"
    CASE ビームセイバー
        RETURNF "ビームセイバー"
    CASEELSE
        RETURNF NO_ITEM
ENDSELECT

@GET_RESOURCE_DESCRIPTION(ID)
;Obsolete, @GET_ITEM_NAMEをご利用ください
#FUNCTIONS
#DIM ID

SELECTCASE ID
    CASE 赤原石
        RETURNF "武装の原料になる原石"
    CASE 青原石
        RETURNF "装甲の原料になる原石"
    CASE 貴金属鉱石
        RETURNF "精密機器の原料になる原石"
    CASE エウスガス
        RETURNF "シールドの原料になるガス"
    CASE ビクニーガス
        RETURNF "噴射剤の原料になるガス"
    CASE ゼスタガス
        RETURNF "加工剤の原料になるガス"
    CASE チェルニーオイル
        RETURNF "金属加工剤の原料になるオイル"
    CASE グリッドオイル
        RETURNF "特定の形に変形しようとする性質を持つオイル"
    CASE ジェルオイル
        RETURNF "高度精密機器を保護するのに使うオイル"
    CASE 武装合金
        RETURNF "武器の素材"
    CASE 装甲合金
        RETURNF "装甲の素材"
    CASE 重武装合金
        RETURNF "武器の素材"
    CASE 重装甲合金
        RETURNF "装甲の素材"
    CASE シールド発生装置
        RETURNF "シールドを発生させる装置"
    CASE 多重シールド発生装置
        RETURNF "シールドを多重展開させる装置"
    CASE 武装制御機器
        RETURNF "武装の制御に必要な機器"
    CASE 合金加工剤
        RETURNF "合金を加工するのに使う工業液"
    CASE 耐熱合金
        RETURNF "エンジンなどに使われる耐熱性を持った合金"
    CASE ジェットガス
        RETURNF "エンジンのジェット噴射に使うガス"
    CASE 超電導回路
        RETURNF "精密機器用の回路"
    CASE タイラーセンサー
        RETURNF "汎用的に扱われているセンサーの中核素材"
    CASE 宇宙たばこ
        RETURNF "煙も有害性もない不思議なたばこ"
    CASE オーネスワイン
        RETURNF "特定の星でとれる木の実から作られた風味の深いワイン"
    CASE トルス酒
        RETURNF "特定の星でとれる木の実から作られた深い味わいの酒"
    CASE サンロットの香木
        RETURNF "気分を落ち着かせる香りを放つ香木"
    CASE フォルス酒
        RETURNF "のど越しがよく、手っ取り早く酔える酒"
    CASE ゴルンミスト発生器
        RETURNF "気分を高揚させるミストを散布する装置"
    CASE ロック布
        RETURNF "富裕層に人気の布。肌触りがとにかくいい"
    CASE ナナーシャ鳥
        RETURNF "旨味の強い鳥"
    CASE エインズの実
        RETURNF "女性人気の高い甘い木の実。上品な甘さ"
    CASE ナイ・ゲーム機
        RETURNF "ロボットもはまる面白さのゲーム機"
    CASE 日本酒
        RETURNF "かつて島国で作られた歴史のあるお酒"
    CASE MR観光セット
        RETURNF "美しい世界に連れて行ってくれるMR観光セット"
    CASE ペルマティーセット
        RETURNF "入植先で見つかったペルマの葉から作られたお茶のセット"
    CASE パワードスーツ
        RETURNF "陸戦や地上の鉱物採掘時に使われるパワードスーツ"
    CASE レース機
        RETURNF "宇宙レースで使われるレース機。コレクターが多い"
    CASE 思考戦車
        RETURNF "自立思考AI搭載の戦車。喋り相手にもなる"
    CASE 異星生物育成キット
        RETURNF "スライムや触手を育てるための育成キット"
    CASE セクサロイド
        RETURNF "世の男達垂涎の美貌を持つセクサロイド。AIの思考レベルや性格も調整できる"
    CASE プラモデル
        RETURNF "全宇宙にコレクターがいる精密なプラモデル"
    CASE ビームセイバー
        RETURNF "白兵戦で圧倒的な威力を誇るビームセイバー。ただし使い捨て"
    CASEELSE
        RETURNF NO_ITEM
ENDSELECT

; SLG ITEM SHOP画面
@SLG_ITEM_SHOP(PORT_ID, IS_PORT)
#DIM PORT_ID
#DIM IS_PORT
#DIM ITEM_ID
#DIM ITEM_COUNT
#DIM STOCK_ITEM_NUM
#DIM SHIP_ID
#DIM SOLD_MONEY
#DIM CAPACITY
#DIM OWNER
#DIM POSID
#DIM PREVIOUS_LINECOUNT
#DIMS ITEM_NAME
#DIMS TRADING_ITEM_PRICE

#DIM SHOP_ITEM, ITEM_LENGTH
#DIM SHOP_ITEM_NUM
#DIM MAX_PAGE
#DIM PAGE_NUM
#DIMS TEMP_SHIP_LIST
#DIM TEMP_SHIP_NUM

PAGE_NUM = 1

CALL INIT_ITEM_PRICE

OWNER = IS_PORT == 1 ? PORT_OWNER:PORT_ID # STAR_OWNER:PORT_ID
POSID = IS_PORT == 1 ? PORT_POSITION_ID:PORT_ID # STAR_POSITION_ID:PORT_ID
PREVIOUS_LINECOUNT = LINECOUNT

TEMP_SHIP_LIST = %GET_SHIP_LIST_STR(POSID, 国家ID_プレイヤー)%
TEMP_SHIP_NUM = LIST_COUNT(TEMP_SHIP_LIST)

$INPUT_LOOP
CALL GET_CAPACITY(CHARACTER_POSITION, 国家ID_プレイヤー)
CAPACITY = RESULT
PRINTL ◆アイテム取引
IF CAPACITY == 0
    SETCOLOR 0XFF0000
    PRINTL これ以上物資を追加購入できません(可能性: 輸送船を持っていない/輸送船のコンテナが一杯）
    RESETCOLOR
ENDIF

;複数ページ表示のため、アイテム数を取得
SHOP_ITEM_NUM = 0
VARSET SHOP_ITEM, -1
FOR ITEM_ID, 0, ITEM_LENGTH
    CALL GET_ITEM_NAME(ITEM_ID)
    SIF RESULT == -1
        CONTINUE
    SIF GET_RESOURCE_NUM(POSID, OWNER, ITEM_ID) > 0 || GET_RESOURCE_NUM(POSID, 国家ID_プレイヤー, ITEM_ID) > 0
        SHOP_ITEM:(SHOP_ITEM_NUM++) = ITEM_ID
NEXT    
MAX_PAGE = SHOP_ITEM_NUM / MAX_SHOP_ITEM_RAW + 1
LIMIT PAGE_NUM, 1, MAX_PAGE
PAGE_NUM = RESULT

PRINTFORML       %"名前", 19, LEFT%  %"価格", 9, RIGHT%  %"在庫", 4, RIGHT%  %"所有", 4, RIGHT%  説明
FOR LOCAL, (PAGE_NUM - 1) * MAX_SHOP_ITEM_RAW, (PAGE_NUM - 1) * MAX_SHOP_ITEM_RAW + MAX_SHOP_ITEM_RAW
    ITEM_ID = SHOP_ITEM:LOCAL
    IF ITEM_ID == -1
        PRINTL
    ELSE
        ITEM_COUNT = 0
        CALL GET_ITEM_NAME(ITEM_ID)
        ITEM_NAME = %RESULTS%
        STOCK_ITEM_NUM = GET_RESOURCE_NUM(POSID, OWNER, ITEM_ID)

        FOR LOCAL:1, 0, TEMP_SHIP_NUM
            SHIP_ID = TOINT(LIST_GET(TEMP_SHIP_LIST, LOCAL:1))
            ITEM_COUNT += GET_CARGO_ITEM_NUM(SHIP_ID, ITEM_ID)
        NEXT
        TRADING_ITEM_PRICE = %TOSTR(GET_RESOURCE_PRICE(POSID, ITEM_ID), "$###,###,###")%
        
        PRINTBUTTON @"[{ITEM_ID, 3, RIGHT}] %ITEM_NAME, 20, LEFT%  %TRADING_ITEM_PRICE, 8, RIGHT%  {STOCK_ITEM_NUM, 4, RIGHT}  {ITEM_COUNT, 4, RIGHT}  %GET_RESOURCE_DESCRIPTION(ITEM_ID)%", ITEM_ID
        PRINTL
    ENDIF
NEXT

IF PAGE_NUM > 1
    PRINTBUTTON "[前のページ]", 1010
ELSE
    SETCOLORBYNAME GRAY
    PRINTPLAINFORM [前のページ]
    RESETCOLOR
ENDIF
IF PAGE_NUM < MAX_PAGE
    PRINTBUTTON "[次のページ]", 1011
ELSE
    SETCOLORBYNAME GRAY
    PRINTPLAINFORM [次のページ]
    RESETCOLOR            
ENDIF
PRINTL
PRINTL [9999] 戻る
INPUT

IF RESULT == 1010
    PAGE_NUM --
    CLEARLINE (LINECOUNT - PREVIOUS_LINECOUNT)
    GOTO INPUT_LOOP
ELSEIF RESULT == 1011
    PAGE_NUM ++
    CLEARLINE (LINECOUNT - PREVIOUS_LINECOUNT)
    GOTO INPUT_LOOP
ENDIF
SIF RESULT == 9999
    RETURN
ITEM_ID = RESULT
CALL GET_ITEM_NAME(ITEM_ID)
SIF RESULT == -1
    RETURN

CALL SLG_ITEM_SHOP_BUY_SELL(POSID, OWNER, ITEM_ID, TEMP_SHIP_LIST)
CLEARLINE (LINECOUNT - PREVIOUS_LINECOUNT)
GOTO INPUT_LOOP

@SLG_ITEM_SHOP_BUY_SELL(POSID, OWNER, ITEM_ID, MY_SHIPS_IN_THIS_SYSTEM)
#DIM POSID
#DIM OWNER
#DIM ITEM_ID
#DIM SHIP_ID
#DIMS MY_SHIPS_IN_THIS_SYSTEM
#DIM MY_SHIPS_COUNT
#DIM SHIP_STATUS, SHIP_STATUS_LENGTH
#DIM STOCK_ITEM_NUM
#DIM BUY_COUNT
#DIM BUY_COUNT_PRE
#DIM BUY_COUNT_PER_SHIP, MAX_SHIP
#DIM AVAILABLE_CAPACITY_PER_SHIP, MAX_SHIP
#DIM TARGET_S
#DIM DEAL_NUM
#DIM PREVIOUS_LINECOUNT

#DIMS ITEM_NAME

BUY_COUNT = 0
STOCK_ITEM_NUM = GET_RESOURCE_NUM(POSID, OWNER, ITEM_ID)
MY_SHIPS_COUNT = LIST_COUNT(MY_SHIPS_IN_THIS_SYSTEM)
CALL GET_ITEM_NAME(ITEM_ID)
ITEM_NAME = %RESULTS%

VARSET BUY_COUNT_PER_SHIP, 0
VARSET AVAILABLE_CAPACITY_PER_SHIP, 0

FOR LOCAL, 0, MY_SHIPS_COUNT
    SHIP_ID = TOINT(LIST_GET(MY_SHIPS_IN_THIS_SYSTEM, LOCAL))
    CALL GET_VACANT_CARGO_SIZE(SHIP_ID)
    AVAILABLE_CAPACITY_PER_SHIP:LOCAL = RESULT
NEXT

PREVIOUS_LINECOUNT = LINECOUNT
$INPUT_LOOP2
PRINTL 購入はプラス、売却はマイナスに値を決定して決定を押してください
PRINTL

PRINTFORML %ITEM_NAME%
PRINTFORML 宇宙港在庫：{STOCK_ITEM_NUM} 
PRINTL
PRINTFORML %"船名", 20, LEFT%  %"積載数", 8, RIGHT%  %"空き容量", 8, RIGHT%  %"購買数", 16, RIGHT% 
DRAWLINE
BUY_COUNT = 0
FOR LOCAL, 0, MY_SHIPS_COUNT
    SHIP_ID = TOINT(LIST_GET(MY_SHIPS_IN_THIS_SYSTEM, LOCAL))
    VARSET SHIP_STATUS, 0
    CALL GET_SHIP_CAPACITY(SHIP_ID)
    SIF RESULT == 0
        CONTINUE
    PRINTFORM %SHIP_NAME:SHIP_ID, 20, LEFT%  {GET_CARGO_ITEM_NUM(SHIP_ID, ITEM_ID) + BUY_COUNT_PER_SHIP:LOCAL, 8, RIGHT}  {AVAILABLE_CAPACITY_PER_SHIP:LOCAL - BUY_COUNT_PER_SHIP:LOCAL, 8, RIGHT}  

    PRINTBUTTON "[<<MAX]", 1000 + 6 * MAX_SHIP + LOCAL
    PRINTBUTTON "[<<<]", 1000 + LOCAL         
    PRINTBUTTON "[<<]", 1000 + MAX_SHIP + LOCAL
    PRINTBUTTON "[<]", 1000 + 2 * MAX_SHIP + LOCAL
    PRINTFORM {BUY_COUNT_PER_SHIP:LOCAL, 4, RIGHT}
    PRINTBUTTON "[>]", 1000 + 3 * MAX_SHIP + LOCAL
    PRINTBUTTON "[>>]", 1000 + 4 * MAX_SHIP + LOCAL
    PRINTBUTTON "[>>>]", 1000 + 5 * MAX_SHIP + LOCAL
    PRINTBUTTON "[>>MAX]", 1000 + 7 * MAX_SHIP + LOCAL
    PRINTL
    BUY_COUNT += BUY_COUNT_PER_SHIP:LOCAL
NEXT
DRAWLINE

IF BUY_COUNT != 0
    PRINTFORM %"小計：", 10, RIGHT% %TOSTR((GET_RESOURCE_PRICE_AFTER_BUY(POSID, ITEM_ID, BUY_COUNT)), "$#,###,###,###,###")% x {ABS(BUY_COUNT)}個 = 
    PRINTFORML %TOSTR((ABS(BUY_COUNT) * GET_RESOURCE_PRICE_AFTER_BUY(POSID, ITEM_ID, BUY_COUNT)), "$#,###,###,###,###"),10, RIGHT%
ELSE
    PRINTL
ENDIF
PRINTL
IF MONEY == 0
    PRINTL 所持金: $0
ELSE
    PRINTFORML %"所持金：", 10, RIGHT% %TOSTR(MONEY, "$#,###,###,###,###"), 24, RIGHT%
ENDIF

IF BUY_COUNT != 0
    PRINTFORML %TOSTR((ABS(BUY_COUNT) * GET_RESOURCE_PRICE_AFTER_BUY(POSID, ITEM_ID, BUY_COUNT)), "$#,###,###,###,###"),35, RIGHT%
    PRINTFORML %"清算後：", 10, RIGHT% %TOSTR(MONEY - (BUY_COUNT * GET_RESOURCE_PRICE_AFTER_BUY(POSID, ITEM_ID, BUY_COUNT)), "$#,###,###,###,###"), 24, RIGHT%
ELSE
	PRINTL
	PRINTL
ENDIF

PRINTBUTTON "[999] 決定", 999
INPUT

IF RESULT == 999
    SIF BUY_COUNT == 0
        RETURN 1
    MONEY -= BUY_COUNT * GET_RESOURCE_PRICE_AFTER_BUY(POSID, ITEM_ID, BUY_COUNT)
    IF OWNER == 国家ID_プレイヤー
        MONEY += BUY_COUNT * GET_RESOURCE_PRICE_AFTER_BUY(POSID, ITEM_ID, BUY_COUNT)
    ELSE
        MONEY:OWNER += BUY_COUNT * GET_RESOURCE_PRICE_AFTER_BUY(POSID, ITEM_ID, BUY_COUNT)
    ENDIF
    IF BUY_COUNT > 0
        PRINTFORMW %ITEM_NAME%を{ABS(BUY_COUNT)}個購入しました。
        CALLF REMOVE_RESOURCE(POSID, OWNER, ITEM_ID, BUY_COUNT)
        FOR LOCAL, 0, MY_SHIPS_COUNT
            SHIP_ID = TOINT(LIST_GET(MY_SHIPS_IN_THIS_SYSTEM, LOCAL))
            CALL LOAD_TO_SHIP(SHIP_ID, ITEM_ID, BUY_COUNT_PER_SHIP:LOCAL)
        NEXT
    ELSE
        PRINTFORMW %ITEM_NAME%を{ABS(BUY_COUNT)}個売却しました。
        CALL ADD_RESOURCE(POSID, OWNER, ITEM_ID, BUY_COUNT * -1)
        FOR LOCAL, 0, MY_SHIPS_COUNT
            SHIP_ID = TOINT(LIST_GET(MY_SHIPS_IN_THIS_SYSTEM, LOCAL))
            CALLF UNLOAD_FROM_SHIP(SHIP_ID, ITEM_ID, BUY_COUNT_PER_SHIP:LOCAL * -1)
        NEXT  
    ENDIF
    RETURN 1
ENDIF

TARGET_S = (RESULT - 1000) % MAX_SHIP
SHIP_ID = TOINT(LIST_GET(MY_SHIPS_IN_THIS_SYSTEM, TARGET_S))

SELECTCASE (RESULT - 1000) / MAX_SHIP
    CASE 0
        DEAL_NUM = -100
    CASE 1
        DEAL_NUM = -10
    CASE 2
        DEAL_NUM = -1
    CASE 3
        DEAL_NUM = 1
    CASE 4
        DEAL_NUM = 10
    CASE 5
        DEAL_NUM = 100
    CASE 6
        DEAL_NUM = -1000
    CASE 7
        DEAL_NUM = 1000
ENDSELECT

; 売買数が所持数以下の場合
BUY_COUNT_PER_SHIP:TARGET_S += DEAL_NUM
BUY_COUNT_PRE = BUY_COUNT + DEAL_NUM

; 自分が売れる数より販売数が多かった場合
SIF BUY_COUNT_PER_SHIP:TARGET_S < -1 * GET_CARGO_ITEM_NUM(SHIP_ID, ITEM_ID)
    BUY_COUNT_PER_SHIP:TARGET_S = -1 * GET_CARGO_ITEM_NUM(SHIP_ID, ITEM_ID)
; 売られる側のキャパより販売数が多かった場合
CALL GET_CAPACITY(POSID, OWNER)
SIF BUY_COUNT_PRE < -1 * RESULT
    BUY_COUNT_PER_SHIP:TARGET_S = -1 * RESULT - BUY_COUNT
; 自分が買えるキャパより多く買おうとした場合
IF BUY_COUNT_PER_SHIP:TARGET_S > AVAILABLE_CAPACITY_PER_SHIP:TARGET_S
    LOCAL = BUY_COUNT_PER_SHIP:TARGET_S
    BUY_COUNT_PER_SHIP:TARGET_S = AVAILABLE_CAPACITY_PER_SHIP:TARGET_S
    DEAL_NUM -= (AVAILABLE_CAPACITY_PER_SHIP:TARGET_S - LOCAL) * -1
    BUY_COUNT_PRE -= (AVAILABLE_CAPACITY_PER_SHIP:TARGET_S - LOCAL) * -1
ENDIF
; 店が売れる数よりも多く買おうとした場合
LOCAL = GET_RESOURCE_NUM(POSID, OWNER, ITEM_ID)
IF BUY_COUNT_PRE > LOCAL
    ; 他の船に積まれている量
    LOCAL:1 = BUY_COUNT - (BUY_COUNT_PER_SHIP:TARGET_S - DEAL_NUM)
    ; この船に積める量
    LOCAL:2 = LOCAL - LOCAL:1
    BUY_COUNT_PER_SHIP:TARGET_S = LOCAL:2
    BUY_COUNT_PRE = LOCAL:1 + LOCAL:2
ENDIF
; 購入費が足りない場合
IF BUY_COUNT_PRE * GET_RESOURCE_PRICE_AFTER_BUY(POSID, ITEM_ID, BUY_COUNT_PRE) > MONEY
    IF MONEY < 0
        BUY_COUNT_PER_SHIP:TARGET_S = 0
    ELSE
        BUY_COUNT_PER_SHIP:TARGET_S = MONEY / GET_RESOURCE_PRICE_AFTER_BUY(POSID, ITEM_ID, BUY_COUNT_PRE)
    ENDIF
ENDIF
CLEARLINE (LINECOUNT - PREVIOUS_LINECOUNT)
GOTO INPUT_LOOP2

; 自動売買
;COUNTRY_IDは売却者の所属国家ID
@AUTO_SALE(POSID, COUNTRY_ID, OWNER, ITEM_ID, NUM)
#DIM POSID
#DIM COUNTRY_ID
#DIM OWNER
#DIM ITEM_ID
#DIM NUM
#DIM SALE_PRICE
CALL GET_CAPACITY(POSID, OWNER)
IF RESULT >= NUM
    SALE_PRICE = GET_RESOURCE_PRICE_AFTER_BUY(POSID, ITEM_ID, NUM)
    IF COUNTRY_ID != OWNER
        IF COUNTRY_ID == 国家ID_プレイヤー
            MONEY += SALE_PRICE * NUM
            MONEY:OWNER -= SALE_PRICE * NUM
        ELSEIF OWNER == 国家ID_プレイヤー
            MONEY:COUNTRY_ID += SALE_PRICE * NUM
            MONEY -= SALE_PRICE * NUM
        ELSE
            MONEY:COUNTRY_ID += SALE_PRICE * NUM
            MONEY:OWNER -= SALE_PRICE * NUM
        ENDIF
    ENDIF
    IF NUM > 0
        CALL ADD_RESOURCE(POSID, OWNER, ITEM_ID, NUM)
        FOR LOCAL, 0, MAX_SHIP
            SIF SHIP_COUNTRY:LOCAL != COUNTRY_ID
                CONTINUE
            SIF SHIP_POSITION:LOCAL != POSID
                CONTINUE
            LOCAL:1 = MIN(NUM, SHIP_CARGO:LOCAL:ITEM_ID)
            SHIP_CARGO:LOCAL:ITEM_ID -= LOCAL:1
            NUM -= LOCAL:1
            SIF NUM == 0
                BREAK
        NEXT
    ELSEIF NUM < 0
        CALLF REMOVE_RESOURCE(POSID, OWNER, ITEM_ID, NUM * -1)
        CALL ADD_RESOURCE(POSID, COUNTRY_ID, ITEM_ID, NUM * -1)
    ENDIF
    RETURN 1
ELSE
    RETURN 0
ENDIF

; 指定国の指定宙域の物資キャパシティを返却する
@GET_CAPACITY(POSID, COUNTRY_ID)
#DIM POSID
#DIM COUNTRY_ID
#DIM SHIP_ID
#DIM CAPACITY
#DIM ITEM_ID
#DIM STAR_ID
#DIM PORT_ID
#DIM SLOT_ID
#DIM SHIP_STATUS, SHIP_STATUS_LENGTH

CAPACITY = 0

FOR STAR_ID, 0, MAX_STAR
    SIF COUNTRY_ID != STAR_OWNER:STAR_ID
        CONTINUE
    SIF STAR_POSITION_ID:STAR_ID != POSID
        CONTINUE
    CAPACITY += GET_MAX_STAR_PORT_CARGO_CAPACITY(STAR_ID)
    CAPACITY -= GET_TOTAL_ITEM_NUM_IN_STAR_PORT(STAR_ID)
NEXT
FOR PORT_ID, 0, MAX_PORT
    SIF COUNTRY_ID != PORT_OWNER:PORT_ID
        CONTINUE
    SIF PORT_POSITION_ID:PORT_ID != POSID
        CONTINUE
    CAPACITY += GET_MAX_PORT_CARGO_CAPACITY(PORT_ID)
    CAPACITY -= GET_TOTAL_ITEM_NUM_IN_PORT(PORT_ID)
NEXT

FOR SHIP_ID, 0, MAX_SHIP
    SIF SHIP_COUNTRY:SHIP_ID != COUNTRY_ID
        CONTINUE
    SIF SHIP_POSITION:SHIP_ID != POSID
        CONTINUE
;    SIF SHIP_CATEGORY:SHIP_ID != 輸送船
;        CONTINUE
    
    CALL GET_VACANT_CARGO_SIZE(SHIP_ID)
    CAPACITY += RESULT
NEXT

RETURN CAPACITY

; 戻り値: 積みきれなかった貨物量
@ADD_RESOURCE(POSID, COUNTRY_ID, ADD_ITEM_ID, NUM)
#DIM POSID
#DIM COUNTRY_ID
#DIM ADD_ITEM_ID
#DIM ITEM_ID
#DIM NUM
#DIM SHIP_ID
#DIM CAPACITY
#DIM STAR_ID
#DIM SLOT_ID
#DIM PORT_ID
#DIM SHIP_STATUS, SHIP_STATUS_LENGTH
#DIM STOREABLE

STAR_ID = FINDELEMENT(STAR_POSITION_ID, POSID)
IF STAR_ID != -1 && STAR_OWNER:STAR_ID == COUNTRY_ID
    STOREABLE = MIN(NUM, GET_MAX_STAR_PORT_CARGO_CAPACITY(STAR_ID) - GET_TOTAL_ITEM_NUM_IN_STAR_PORT(STAR_ID))
    CALL STORE_ITEM_TO_STAR_PORT(STAR_ID, ADD_ITEM_ID, STOREABLE)
    NUM -= STOREABLE
    SIF NUM == 0
        RETURN 0
ENDIF

PORT_ID = FINDELEMENT(PORT_POSITION_ID, POSID)
IF PORT_ID != -1 && PORT_OWNER:PORT_ID == COUNTRY_ID
    STOREABLE = MIN(NUM, GET_MAX_PORT_CARGO_CAPACITY(PORT_ID) - GET_TOTAL_ITEM_NUM_IN_PORT(PORT_ID))
    CALL STORE_ITEM_TO_PORT(PORT_ID, ADD_ITEM_ID, STOREABLE)
    NUM -= STOREABLE
    SIF NUM == 0
        RETURN 0
ENDIF

FOR SHIP_ID, 0, MAX_SHIP
    SIF SHIP_COUNTRY:SHIP_ID != COUNTRY_ID
        CONTINUE
    SIF SHIP_POSITION:SHIP_ID != POSID
        CONTINUE
    SIF SHIP_CATEGORY:SHIP_ID != 輸送船
        CONTINUE
    CALL LOAD_TO_SHIP(SHIP_ID, ADD_ITEM_ID, NUM)
    NUM -= RESULT
    SIF NUM == 0
        RETURN 0
NEXT

SIF NUM > 0
    RETURN NUM
RETURN 0

; リソース除去
; INT 不足分
@REMOVE_RESOURCE(POSID, COUNTRY_ID, REMOVE_ITEM_ID, NUM)
#FUNCTION
#DIM POSID
#DIM COUNTRY_ID
#DIM REMOVE_ITEM_ID
#DIM ITEM_ID
#DIM NUM
#DIM SHIP_ID
#DIM CAPACITY
#DIM STAR_ID
#DIM PORT_ID
#DIM SLOT_ID

FOR SHIP_ID, 0, MAX_SHIP
    SIF SHIP_COUNTRY:SHIP_ID != COUNTRY_ID
        CONTINUE
    SIF SHIP_POSITION:SHIP_ID != POSID
        CONTINUE
    SIF SHIP_CATEGORY:SHIP_ID != 輸送船
        CONTINUE
    NUM -= UNLOAD_FROM_SHIP(SHIP_ID, REMOVE_ITEM_ID, NUM)
    SIF NUM < 1
        RETURNF 0
NEXT

FOR STAR_ID, 0, MAX_STAR
    SIF COUNTRY_ID != STAR_OWNER:STAR_ID
        CONTINUE
    SIF POSID != STAR_POSITION_ID:STAR_ID
        CONTINUE
    NUM -= RESTORE_ITEM_FROM_STAR_PORT(STAR_ID, REMOVE_ITEM_ID, NUM)
    SIF NUM < 1
        RETURNF 0
NEXT

FOR PORT_ID, 0, MAX_PORT
    SIF COUNTRY_ID != PORT_OWNER:PORT_ID
        CONTINUE
    SIF POSID != PORT_POSITION_ID:PORT_ID
        CONTINUE
    NUM -= RESTORE_ITEM_FROM_PORT(PORT_ID, REMOVE_ITEM_ID, NUM)
    SIF NUM < 1
        RETURNF 0
NEXT

RETURNF NUM


@REMOVE_RESOURCE_B(POSID, COUNTRY_ID, REMOVE_ITEM_ID, NUM)
#DIM POSID
#DIM COUNTRY_ID
#DIM REMOVE_ITEM_ID
#DIM ITEM_ID
#DIM NUM
#DIM SHIP_ID
#DIM CAPACITY
#DIM STAR_ID
#DIM PORT_ID
#DIM SLOT_ID

FOR SHIP_ID, 0, MAX_SHIP
    SIF SHIP_COUNTRY:SHIP_ID != COUNTRY_ID
        CONTINUE
    SIF SHIP_POSITION:SHIP_ID != POSID
        CONTINUE
    SIF SHIP_CATEGORY:SHIP_ID != 輸送船
        CONTINUE
    PRINTFORM NUM {NUM} ->
    NUM -= UNLOAD_FROM_SHIP(SHIP_ID, REMOVE_ITEM_ID, NUM)
    SIF NUM < 1
        RETURN 0
    PRINTFORML NUM {NUM}
NEXT

FOR STAR_ID, 0, MAX_STAR
    SIF COUNTRY_ID != STAR_OWNER:STAR_ID
        CONTINUE
    SIF POSID != STAR_POSITION_ID:STAR_ID
        CONTINUE
    NUM -= RESTORE_ITEM_FROM_STAR_PORT(STAR_ID, REMOVE_ITEM_ID, NUM)
    SIF NUM < 1
        RETURN 0
NEXT

FOR PORT_ID, 0, MAX_PORT
    SIF COUNTRY_ID != PORT_OWNER:PORT_ID
        CONTINUE
    SIF POSID != PORT_POSITION_ID:PORT_ID
        CONTINUE
    NUM -= RESTORE_ITEM_FROM_PORT(PORT_ID, REMOVE_ITEM_ID, NUM)
    SIF NUM < 1
        RETURN 0
NEXT

RETURN NUM

; 輸送船リソース除去
; INT 不足分
@REMOVE_RESOURCE_FROM_CARGO_SHIP(POSID, COUNTRY_ID, REMOVE_ITEM_ID, NUM)
#FUNCTION
#DIM POSID
#DIM COUNTRY_ID
#DIM REMOVE_ITEM_ID
#DIM ITEM_ID
#DIM NUM
#DIM SHIP_ID

FOR SHIP_ID, 0, MAX_SHIP
    SIF SHIP_COUNTRY:SHIP_ID != COUNTRY_ID
        CONTINUE
    SIF SHIP_POSITION:SHIP_ID != POSID
        CONTINUE
    SIF SHIP_CATEGORY:SHIP_ID != 輸送船
        CONTINUE
    NUM -= UNLOAD_FROM_SHIP(SHIP_ID, REMOVE_ITEM_ID, NUM)
    SIF NUM < 1
        RETURNF 0
NEXT

RETURNF NUM

; リソースの数量取得関数
; 戻り値 INT リソースの数量
@GET_RESOURCE_NUM(POSID, COUNTRY_ID, ITEM_ID)
#FUNCTION
#DIM POSID
#DIM COUNTRY_ID
#DIM ITEM_ID
#DIM SHIP_ID
#DIM PORT_ID
#DIM ITEM_COUNT

ITEM_COUNT = 0

PORT_ID = FINDELEMENT(STAR_POSITION_ID, POSID)
SIF PORT_ID != -1 && COUNTRY_ID == STAR_OWNER:PORT_ID
    ITEM_COUNT += GET_ITEM_NUM_IN_STAR_PORT(PORT_ID, ITEM_ID)

PORT_ID = FINDELEMENT(PORT_POSITION_ID, POSID)
SIF PORT_ID != -1 && COUNTRY_ID == PORT_OWNER:PORT_ID
    ITEM_COUNT += GET_ITEM_NUM_IN_PORT(PORT_ID, ITEM_ID)

FOR SHIP_ID, 0, MAX_SHIP
    SIF SHIP_COUNTRY:SHIP_ID != COUNTRY_ID
        CONTINUE
    SIF SHIP_POSITION:SHIP_ID != POSID
        CONTINUE
    ITEM_COUNT += GET_CARGO_ITEM_NUM(SHIP_ID, ITEM_ID)
NEXT

RETURNF ITEM_COUNT

@GET_RESOURCE_NUM_FROM_CARGO_SHIP(POSID, COUNTRY_ID, ITEM_ID)
#FUNCTION
#DIM POSID
#DIM COUNTRY_ID
#DIM ITEM_ID
#DIM SHIP_ID

#DIM ITEM_COUNT

ITEM_COUNT = 0
FOR SHIP_ID, 0, MAX_SHIP
    SIF SHIP_COUNTRY:SHIP_ID != COUNTRY_ID
        CONTINUE
    SIF SHIP_POSITION:SHIP_ID != POSID
        CONTINUE
    ITEM_COUNT += SHIP_CARGO:SHIP_ID:ITEM_ID
NEXT
RETURNF ITEM_COUNT

@ADD_RESOURCE_TO_SHIP(POSID, COUNTRY_ID, RESOURCE, SHIP_TYPE = -1)
#DIM POSID
#DIM COUNTRY_ID
#DIM REF RESOURCE
#DIM SHIP_ID
#DIM ITEM_ID
#DIM CAPACITY
#DIM RESOURCE_ID
#DIM SHIP_TYPE      ;艦種を指定して送れるようにした

FOR RESOURCE_ID, 0, ITEM_LENGTH
    SIF RESOURCE:RESOURCE_ID == 0
        CONTINUE
    FOR SHIP_ID, 0, MAX_SHIP
        SIF SHIP_COUNTRY:SHIP_ID != COUNTRY_ID
            CONTINUE
        SIF SHIP_POSITION:SHIP_ID != POSID
            CONTINUE
        SIF SHIP_TYPE != -1 && SHIP_CATEGORY:SHIP_ID != SHIP_TYPE
            CONTINUE
        CALL LOAD_TO_SHIP(SHIP_ID, RESOURCE_ID, RESOURCE:RESOURCE_ID)
        RESOURCE:RESOURCE_ID -= RESULT
        SIF RESOURCE:RESOURCE_ID == 0
            BREAK
    NEXT
NEXT


@ADD_RESOURCE_TO_PORT_CONTAINER(PORT_ID, RESOURCE)
#DIM REF RESOURCE
#DIM PORT_ID
#DIM ITEM_ID
#DIM CAPACITY
#DIM CURRENT_STORED_NUM
#DIM ITEM_NUM

CAPACITY = GET_MAX_PORT_CARGO_CAPACITY(PORT_ID)

FOR ITEM_ID, 0, ITEM_LENGTH
    SIF CURRENT_STORED_NUM >= CAPACITY 
        BREAK
    SIF RESOURCE:ITEM_ID == 0
        CONTINUE
    IF RESOURCE:ITEM_ID > CAPACITY
        RESOURCE:ITEM_ID = CAPACITY
        CAPACITY = 0
    ELSE
        CAPACITY -= RESOURCE:ITEM_ID
    ENDIF
    CALL STORE_ITEM_TO_PORT(PORT_ID, ITEM_ID, RESOURCE:ITEM_ID)
NEXT

@ADD_RESOURCE_TO_STAR_PORT_CONTAINER(PORT_ID, RESOURCE_ID, RESOURCE_NUM)
#DIM PORT_ID
#DIM RESOURCE_ID
#DIM RESOURCE_NUM
#DIM CAPACITY
#DIM CURRENT_STORED_NUM
#DIM ITEM_NUM
#DIM STORAGED_NUM

CAPACITY = GET_MAX_STAR_PORT_CARGO_CAPACITY(PORT_ID)
CURRENT_STORED_NUM = GET_TOTAL_ITEM_NUM_IN_STAR_PORT(PORT_ID)

SIF CURRENT_STORED_NUM >= CAPACITY 
    RETURN
STORAGED_NUM = MIN(ITEM_NUM, CAPACITY - CURRENT_STORED_NUM)
CALL STORE_ITEM_TO_STAR_PORT(PORT_ID, RESOURCE_ID, RESOURCE_NUM)

;リソースの現在の値段を返却
@GET_RESOURCE_PRICE(POSID, ITEM_ID)
#FUNCTION
#DIM POSID
#DIM ITEM_ID

RETURNF GET_RESOURCE_PRICE_AFTER_BUY(POSID, ITEM_ID, 0)

;売買後の値段を返却
@GET_RESOURCE_PRICE_AFTER_BUY(POSID, ITEM_ID, BUY_NUM)
#FUNCTION
#DIM POSID
#DIM ITEM_ID
#DIM BUY_NUM
#DIM OWNER
#DIM CURRENT_NUM
#DIM RAITO

OWNER = GET_PORT_OWNER(POSID)
SIF OWNER == -1
    RETURNF -1
CURRENT_NUM = GET_RESOURCE_NUM(POSID, OWNER, ITEM_ID)

SIF CURRENT_NUM == 0
    CURRENT_NUM += 1

IF CURRENT_NUM - BUY_NUM <= 0
    RAITO = MAX_RAITO
ELSE
    RAITO = LIMIT(100 * STOCK_TARGET / (CURRENT_NUM - BUY_NUM), MIN_RAITO, MAX_RAITO)
ENDIF

RETURNF ITEM_PRICE:ITEM_ID * RAITO / 100

;--------------------------
; 不足リソースの返却
;--------------------------
@GET_LACK_RESOURCE(POSID, COUNTRY_ID, NEED_RESOURCE)
#DIM POSID
#DIM COUNTRY_ID
#DIM REF NEED_RESOURCE
#DIM RESOURCE_ID
#DIM RESOURCE_NUM

FOR RESOURCE_ID, 0, 9
    RESOURCE_NUM = GET_RESOURCE_NUM(POSID, COUNTRY_ID, RESOURCE_ID)
    SIF STOCK_TARGET > RESOURCE_NUM
        NEED_RESOURCE:RESOURCE_ID = STOCK_TARGET - RESOURCE_NUM
NEXT

;--------------------------
; 最寄りの指定リソースの採掘ポイントを返却する
;--------------------------
@GET_NEAREST_MINING_POINT(CURRENT_SECTOR_ID, ITEM_ID)
#DIM CURRENT_SECTOR_ID
#DIM ITEM_ID
#DIM RADIUS
#DIM X_POS
#DIM Y_POS
#DIM SECTOR_X_POS
#DIM SECTOR_Y_POS

; 現在のセクターにリソースがあるか判定(非効率版)
SIF RESOURCE_POS_LIST:ITEM_ID:CURRENT_SECTOR_ID > -1
    RETURN RESOURCE_POS_LIST:ITEM_ID:CURRENT_SECTOR_ID

SECTOR_X_POS = CURRENT_SECTOR_ID / 10
SECTOR_Y_POS = CURRENT_SECTOR_ID % 10

FOR RADIUS, 1, MAX_SECTOR_X
    FOR X_POS, -1 * RADIUS + SECTOR_X_POS, RADIUS + SECTOR_X_POS
        FOR Y_POS, -1 * RADIUS + SECTOR_Y_POS, RADIUS + SECTOR_Y_POS
            SIF X_POS < 0
                CONTINUE
            SIF X_POS >= MAX_SECTOR_X
                CONTINUE
            SIF Y_POS < 0
                CONTINUE
            SIF Y_POS >= MAX_SECTOR_Y
                CONTINUE
            SIF RESOURCE_POS_LIST:ITEM_ID:(X_POS * 10 + Y_POS) > -1
                RETURN RESOURCE_POS_LIST:ITEM_ID:(X_POS * 10 + Y_POS)
        NEXT
    NEXT
NEXT


