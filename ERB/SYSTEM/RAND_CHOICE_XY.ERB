;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;@RAND_CHOICE_XY( ARG:0 , ARG:1 = 0 , ARG:2 = 0 )
;;; 引数１：選択サイズ　正方形限定 {MAX_SECTOR_X}or{MAP_WIDTH}を入れるイメージ　３以上なら動いた
;;; 引数２：抽選結果を意図した方向にずらす変数
;;;			省略きにしない=5   [ 中心を選びやすく 1 ～ 5 ～ 9 外縁を選びやすく] 
;;; 引数３：標準偏差を作る回数。 多いほど結果が中央値に偏る
;;;			省略or0,操作しない  [ なんとなく 1 ～ 9 ほんき ]で偏らせる
;;;RETURN  RESULT:0 == XX  RESULT:1 == YY  セクタでも座標でも同じ。性質上 XY入れ替わっても別に問題ない
;;;
;;; てきとうに座標を選ばせる関数です
;;; 星があったり艦隊が居たり、そういう排除はしていません。単に選んできます。
;;; マップ中央に寄せたのを欲しかったり、外縁際の座標がほしいというのが引数で調整できます
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; 補足 元の■b_SIZEと 1/4サイズ □r_SIZEの関係
;;
;; ■＝   □□ に分割、右上 □ で抽選で座標決定
;;        □□
;;
;; のちにランダム4択で回転させ全域のどれか一点に割り当て
;;                [y}
;;       X= -rndY || X= rndX
;;       Y= rndX  || Y= rndy
;;■＝  ======================== [x]
;;       X= -rndX || X= rndY
;;       Y= -rndY || Y= -rndX
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
@RAND_CHOICE_XY( ARG:0 , ARG:1 = 0, ARG:2 = 0)
#DIM r_MAP, 64	;抽選要素配列　中央座標からの距離を格納
#DIM rCOUNT 	;配列要素個数
#DIM rIdx		;要素選択インデックス
#DIM b_SIZE		;元のサイズ
#DIM r_SIZE		;抽選用の4分の１サイズ
#DIM rndY
#DIM rndX
#DIM rFLAG2	;引数２用　内よりか外よりか
#DIM rFLAG3	;引数３用　密集度合変数
#DIM AAA
#DIM BBB

b_SIZE = ARG:0			;元の選択対象サイズ(■b_SIZE) このマス目中からランダムを選ぶ
r_SIZE = (b_SIZE +1 ) /2
 			;4分の1サイズ(□r_SIZE)に分割する。
 			;;元が奇数なら重なりがでるため、 ■15x15ならば +1して 4分割 □8x8ﾏｽを4枚を後で重ねる
 			;;元が偶数なら■14X14ならば 4分割して□7x7ﾏｽを4枚並べるイメージ。
			;;どちらも配列 r_MAP に仮の中心マス目(0,0)からの距離 を納め、"仮の中心からの距離"で抽選する
VARSIZE r_MAP
IF b_SIZE < 3 || ( r_SIZE * r_SIZE  ) > RESULT:0
	PRINTL 引数１が不正です 大きすぎる場合は [変数 r_MAP]サイズを見直してください
	RETURN -1 , -1
ENDIF


;;対象マップサイズの4分の１(□r_SIZE)に対して抽選要素を作成する 仮の中心(0,0)に対し、x＋y距離を格納
rCOUNT = 0
FOR rndY, 0, r_SIZE	
	FOR rndX, 0, r_SIZE
		IF b_SIZE % 2	;対象サイズが奇数の場合、 後に重複するy0:x1-y0:x9を排除
			SIF rndY == 0 && rndX != 0
				CONTINUE
		ENDIF
		r_MAP:rCOUNT = rndY + rndX
		rCOUNT ++
	NEXT
NEXT

;;;対象をソート 昇順or降順
rFLAG2 = 0 ;５は偏りなしにするのでrFLAG2==0のまま
IF ARG:1 >= 1 && ARG:1 <= 5		;中心を選びやすく
	rFLAG2 = 5 - ARG:1
	ARRAYSORT r_MAP, FORWARD, 0, rCOUNT
ELSEIF ARG:1 >= 6 && ARG:1 < 10	;外縁を選びやすく
	rFLAG2 = ARG:1 - 5
	ARRAYSORT r_MAP, BACK, 0, rCOUNT
ENDIF

;;[IF_DEBUG]
;FOR LOCAL:10 ,0 , rCOUNT
;	PRINTFORML {r_MAP:(LOCAL:10)}  No. {LOCAL:10}
;NEXT
;;[ENDIF]

;;;正規分布(rFLAG3回実行: 1なら単なるランダム)により中央付近に散らばったデータでrIdxを決定する
rFLAG3 = ARG:2 + 1

rFLAG3 = LIMIT(rFLAG3 , 0, 10)

LOCAL:2 = 0		;;無限ループ対策
$CALC_LOOP1
LOCAL = 0
;; 正規分布を作成 
FOR COUNT , 0, rFLAG3
	LOCAL += RAND(rCOUNT)
NEXT
	LOCAL:2 ++
	rIdx = LOCAL / rFLAG3		;;ここのrIdxは無修正の抽選結果
	
;ここに仮中心からマス目の距離順に並べられた関数 r_MAP を示す rIdx を決定した。
;範囲 0-rCOUNT . rFLAG3の回数分だけ中央値 (rCOUNT ÷2) 付近に偏って選択されている
;次に好みに偏らせるため rFLAG2を使って調整する rFLAG2=0で無偏向、１～４までとるが、大きいほど割合でインデックスrIdxを若番に進める
;;
	rIdx = rIdx - ( rFLAG2 * rCOUNT ) / 10	;;正規分布を若番にずらす。 ;;÷８にしたらエラー激増しそうでやめた

;;寄せた結果、範囲外になったら再抽選	;; 選外おおいなら絶対値で差し戻す。これはエラー対策確率の観点からはヘンな処理
SIF rIdx < 0 && LOCAL:2 < 10
	GOTO CALC_LOOP1
IF rIdx < 0 && LOCAL:2 >= 10
	ABS rIdx
	rIdx = RESULT:0
ENDIF
[IF_DEBUG]
;PRINTFOR 回数　{LOCAL:2} rIdx: {rIdx}  仮中心からの距離決定 {r_MAP:rIdx}
[ENDIF]

$CALC_LOOP2
;;;;;仮中心からの距離が決定したので、適した座標x,yを算出する。指定の距離の点をランダムに決定する
;;;;;
;; 4分の1のエリア(□r_SIZE)内で座標を計算する
IF r_MAP:rIdx == 0	;距離０＝中心が選択 0,0
	IF b_SIZE % 2 	;;奇数の場合、(0,0)が4倍抽選されるため間引く
		SIF ! RAND(4)
			GOTO CALC_LOOP1
	ENDIF
	rndY = 0
	rndX = 0
ELSEIF r_MAP:rIdx == r_SIZE + r_SIZE ;一番遠い隅っこ
	rndY = r_SIZE
	rndX = r_SIZE
ELSE
;;;;;;;;;;マップサイズが奇数の場合
	IF	b_SIZE % 2	;;元が奇数の場合　･･･重複のため x:01 - x09を排除
		IF r_MAP:rIdx == 1		;距離１は YX0001かYX0100しかないが、奇数はy00列を排除するので0100になる
			rndY = 1
			rndX = 0
		ELSEIF r_MAP:rIdx < r_SIZE			;;半分より手前側にある ;;Y00列は排除する
			rndY =  RAND( 1, r_MAP:rIdx +1 )
			rndX = r_MAP:rIdx - rndY
		ELSE								;;半分より奥側にある
			rndY = RAND( ( r_MAP:rIdx - (r_SIZE -1) ) , r_SIZE )
			rndx = r_MAP:rIdx - rndY
		ENDIF
;;;;;;;;;マップサイズが偶数の場合
	ELSE			 ;;偶数の場合	;簡単
		IF r_MAP:rIdx < r_SIZE
			rndY = RAND(r_MAP:rIdx +1 )
			rndX = r_MAP:rIdx - rndY
		ELSE								;;半分より奥側にある
			rndY = RAND( r_MAP:rIdx - (r_SIZE -1 ) , r_SIZE )
			rndX = r_MAP:rIdx - rndY
		ENDIF
	ENDIF
ENDIF
;;;;;; rndX,rndY には4分の１マップ(□r_SIZE) 上の座標データが入った

;;(□r_SIZE)を90度回転させる。4枚分で元のサイズ(■b_SIZE)の全体に変換する
IF	b_SIZE % 2	;;もと■が奇数の場合、(0,0)を中心とした左回転　重複するy00列は排除済み
	SELECTCASE RAND(4)
		CASE 0	;第一象限はそのまま。　(0,0)も通す
			LOCAL:3 = rndX
			LOCAL:4 = rndY
		CASE 1	;第二象限 左に90度回す
			LOCAL:3 = - rndY
			LOCAL:4 =   rndX
		CASE 2	;第三象限
			LOCAL:3 = - rndX
			LOCAL:4 = - rndY
		CASE 3	;第四象限
			LOCAL:3 =   rndY
			LOCAL:4 = - rndX
	ENDSELECT
ELSE			;;偶数の場合、(0,0)が重ならないようずらす
	SELECTCASE RAND(4)
		CASE 0	;第一象限
			LOCAL:3 = rndX
			LOCAL:4 = rndY +1
		CASE 1	;第二象限 左に90度回す	(0,0) →(-1,0)
			LOCAL:3 = - rndY -1
			LOCAL:4 =   rndX +1
		CASE 2	;第三象限				(0,0)→(-1,-1)
			LOCAL:3 = - rndX -1
			LOCAL:4 = - rndY 
		CASE 3	;第四象限				(0,0)→(0,-1)
			LOCAL:3 =   rndY
			LOCAL:4 = - rndX
	ENDSELECT
ENDIF

;PRINTFORMW 仮座標回転完了　 X:{LOCAL:3} Y:{LOCAL:4}
;;;左上を0,0とするゲーム中座標に変換する
	rndX = (b_SIZE / 2 ) + LOCAL:3
	rndY = (b_SIZE / 2 ) - LOCAL:4

;PRINTFORMW 座標変換完了 	　X:{rndX} Y:{rndY}

RETURN rndX , rndY


