;--------------------------
; 採掘ポイントの初期化
;--------------------------
@INIT_MINING_POINT
#DIM CONST RESOURCE = 0, 1, 2, 3, 4, 5, 6, 7, 8
#DIM CONST RESOURCE_LENGTH = 9
#DIM ITER
#DIM SECTOR_ID
#DIM X_POS
#DIM Y_POS
#DIM POSID
#DIM TASK_COMPLETE

VARSET RESOURCE_POS_LIST, -1

; ランダムに資源を2箇所ずつ配置する
FOR SECTOR_ID, 0, MAX_SECTOR
    FOR LOCAL, 0, 1
        FOR LOCAL:2, 0, RESOURCE_LENGTH
            SIF RAND:5 != 0
                CONTINUE
            TASK_COMPLETE = 0
            WHILE TASK_COMPLETE == 0
                X_POS = RAND:MAP_WIDTH
                Y_POS = RAND:MAP_HEIGHT

                SIF MAP:SECTOR_ID:X_POS:Y_POS != 明瞭
                    CONTINUE
                
                MAP:SECTOR_ID:X_POS:Y_POS = 資源
                RESOURCE_MAP:SECTOR_ID:X_POS:Y_POS = RESOURCE:(LOCAL:2)
                CALL POS2ID(SECTOR_ID, X_POS, Y_POS)
                RESOURCE_POS_LIST:(RESOURCE:(LOCAL:2)):SECTOR_ID = RESULT
                TASK_COMPLETE = 1
            WEND
        NEXT
    NEXT
NEXT


; 素材価格設定
@INIT_ITEM_PRICE
ITEM_PRICE:赤原石 = 100
ITEM_PRICE:青原石 = 100
ITEM_PRICE:貴金属鉱石 = 100
ITEM_PRICE:エウスガス = 100
ITEM_PRICE:ビクニーガス = 100
ITEM_PRICE:ゼスタガス = 100
ITEM_PRICE:チェルニーオイル = 100
ITEM_PRICE:グリッドオイル = 100
ITEM_PRICE:ジェルオイル = 100
ITEM_PRICE:武装合金 = 500
ITEM_PRICE:装甲合金 = 500
ITEM_PRICE:重武装合金 = 1000
ITEM_PRICE:重装甲合金 = 1000
ITEM_PRICE:シールド発生装置 = 500
ITEM_PRICE:多重シールド発生装置 = 1000
ITEM_PRICE:武装制御機器 = 600
ITEM_PRICE:合金加工剤 = 600
ITEM_PRICE:耐熱合金 = 600
ITEM_PRICE:ジェットガス = 600
ITEM_PRICE:超電導回路 = 600
ITEM_PRICE:タイラーセンサー = 600
ITEM_PRICE:宇宙たばこ = 1000
ITEM_PRICE:オーネスワイン = 1000
ITEM_PRICE:トルス酒 = 1000
ITEM_PRICE:サンロットの香木 = 1000
ITEM_PRICE:フォルス酒 = 1000
ITEM_PRICE:ゴルンミスト発生器 = 1000
ITEM_PRICE:ロック布 = 1000
ITEM_PRICE:ナナーシャ鳥 = 1000
ITEM_PRICE:エインズの実 = 1000
ITEM_PRICE:ナイ・ゲーム機 = 1000
ITEM_PRICE:パワードスーツ = 30000
ITEM_PRICE:レース機 = 50000
ITEM_PRICE:思考戦車 = 1000000
ITEM_PRICE:異星生物育成キット = 1000
ITEM_PRICE:セクサロイド = 3000



; 採掘可能か判定
; INT 0: 採掘不可能, 1:採掘可能
@IS_MINING(POSID)
#DIM POSID
#DIM SECTOR_ID
#DIM X_POS
#DIM Y_POS
#DIM SHIP_ID
#DIM MINING_ITER
#DIM TRANSPORT_ITER
#DIM CAPACITY

MINING_ITER = 0
TRANSPORT_ITER = 0
CAPACITY = 0

CALL ID2POS(POSID)
SECTOR_ID = RESULT:0
X_POS = RESULT:1
Y_POS = RESULT:2


SIF MAP:SECTOR_ID:X_POS:Y_POS != 資源
    RETURN 0

FOR SHIP_ID, 0, MAX_SHIP
    SIF SHIP_COUNTRY:SHIP_ID != PLAYER_COUNTRY
        CONTINUE
    SIF SHIP_CATEGORY:SHIP_ID != 輸送船 && SHIP_CATEGORY:SHIP_ID != 作業船
        CONTINUE
    CALL POS2ID(SECTOR_ID, X_POS, Y_POS)
    SIF RESULT != SHIP_POSITION:SHIP_ID
        CONTINUE

    IF SHIP_CATEGORY:SHIP_ID == 作業船
        MINING_ITER ++
        CONTINUE
    ENDIF
    IF SHIP_CATEGORY:SHIP_ID == 輸送船
        TRANSPORT_ITER ++
        CALL GET_CARGO_VACANCY(SHIP_ID)
        CAPACITY += RESULT
    ENDIF
NEXT

SIF MINING_ITER == 0 || TRANSPORT_ITER == 0
    RETURN 0
SIF CAPACITY <= 0
    RETURN 0

RETURN 1

@GET_CARGO_VACANCY(SHIP_ID)
#DIM SHIP_ID
#DIM ITEM_ID
#DIM CAPACITY
SIF SHIP_CATEGORY:SHIP_ID != 輸送船
    RETURN 0

CAPACITY = CARGO_CAPACITY

FOR ITEM_ID, 0, ITEM_LENGTH
    CAPACITY -= CARGO_CONTENTS:SHIP_ID:ITEM_ID
NEXT
RETURN CAPACITY

; 採掘
; INT 0: 採掘不能, 1:採掘完了, 2:採掘完了したがこれ以上の採掘は不可能
@MINING(POSID, COUNTRY_ID)
#DIM POSID
#DIM SECTOR_ID
#DIM X_POS
#DIM Y_POS
#DIM COUNTRY_ID
#DIM SHIP_ID
#DIM CARGO_SHIP, MAX_SHIP
#DIM CARGO_SHIP_COUNTER
#DIM MINING_SHIP_COUNTER
#DIM CONST MINING_EFFICIENCY = 50
#DIM MINED_AMOUNT; 採掘量
#DIM PRE_MINED_AMOUNT
#DIM ITER, 2
#DIM CAPACITY

VARSET CARGO_SHIP, -1
CARGO_SHIP_COUNTER = 0
MINING_SHIP_COUNTER = 0
MINED_AMOUNT = 0
CALL ID2POS(POSID)
SECTOR_ID = RESULT:0
X_POS = RESULT:1
Y_POS = RESULT:2

FOR SHIP_ID, 0, MAX_SHIP
    SIF SHIP_COUNTRY:SHIP_ID != COUNTRY_ID
        CONTINUE
    SIF SHIP_CATEGORY:SHIP_ID != 輸送船 && SHIP_CATEGORY:SHIP_ID != 作業船
        CONTINUE
    CALL POS2ID(SECTOR_ID, X_POS, Y_POS)
    SIF RESULT != SHIP_POSITION:SHIP_ID
        CONTINUE
    IF SHIP_CATEGORY:SHIP_ID == 輸送船
        CARGO_SHIP:CARGO_SHIP_COUNTER = SHIP_ID
        CARGO_SHIP_COUNTER ++
    ENDIF
    IF SHIP_CATEGORY:SHIP_ID == 作業船
        MINING_SHIP_COUNTER ++
    ENDIF
NEXT

SIF CARGO_SHIP_COUNTER == 0 || MINING_SHIP_COUNTER == 0
    RETURN 0

FOR ITER, 0, MINING_SHIP_COUNTER
    ; TODO 採掘船の採掘効率を取得して計算に組み込めるようにする
    MINED_AMOUNT += MINING_EFFICIENCY
NEXT

;表示用の変数
PRE_MINED_AMOUNT = MINED_AMOUNT

FOR ITER, 0, CARGO_SHIP_COUNTER
    CAPACITY = CARGO_CAPACITY
    SHIP_ID = CARGO_SHIP:ITER
    ; 残りのキャパシティを算出
    FOR ITER:1, 0, ITEM_LENGTH
        CAPACITY -= CARGO_CONTENTS:SHIP_ID:(ITER:1)
    NEXT
    SIF CAPACITY == 0
        CONTINUE
    ; 空きスペースに採掘した資源を入れる
    IF CAPACITY >= MINED_AMOUNT
        CARGO_CONTENTS:SHIP_ID:(RESOURCE_MAP:SECTOR_ID:X_POS:Y_POS) += MINED_AMOUNT
        MINED_AMOUNT = 0
        BREAK
    ELSE
        CARGO_CONTENTS:SHIP_ID:(RESOURCE_MAP:SECTOR_ID:X_POS:Y_POS) += CAPACITY
        MINED_AMOUNT -= CAPACITY
    ENDIF
NEXT
IF MINED_AMOUNT == 0
    SIF COUNTRY_ID == PLAYER_COUNTRY
        PRINTFORML %GET_RESOURCE_NAME(RESOURCE_MAP:SECTOR_ID:X_POS:Y_POS)%を{PRE_MINED_AMOUNT}採掘し、輸送船に保存しました
    RETURN 1
ENDIF

RETURN 2

@GET_RESOURCE_NAME(ID)
#FUNCTIONS
#DIM ID

SELECTCASE ID
    CASE 赤原石
        RETURNF "赤原石"
    CASE 青原石
        RETURNF "青原石"
    CASE 貴金属鉱石
        RETURNF "貴金属鉱石"
    CASE エウスガス
        RETURNF "エウスガス"
    CASE ビクニーガス
        RETURNF "ビクニーガス"
    CASE ゼスタガス
        RETURNF "ゼスタガス"
    CASE チェルニーオイル
        RETURNF "チェルニーオイル"
    CASE グリッドオイル
        RETURNF "グリッドオイル"
    CASE ジェルオイル
        RETURNF "ジェルオイル"
    CASE 武装合金
        RETURNF "武装合金"
    CASE 装甲合金
        RETURNF "装甲合金"
    CASE 重武装合金
        RETURNF "重武装合金"
    CASE 重装甲合金
        RETURNF "重装甲合金"
    CASE シールド発生装置
        RETURNF "シールド発生装置"
    CASE 多重シールド発生装置
        RETURNF "多重シールド発生装置"
    CASE 武装制御機器
        RETURNF "武装制御機器"
    CASE 合金加工剤
        RETURNF "合金加工剤"
    CASE 耐熱合金
        RETURNF "耐熱合金"
    CASE ジェットガス
        RETURNF "ジェットガス"
    CASE 超電導回路
        RETURNF "超電導回路"
    CASE タイラーセンサー
        RETURNF "タイラーセンサー"
    CASE 宇宙たばこ
        RETURNF "宇宙たばこ"
    CASE オーネスワイン
        RETURNF "オーネスワイン"
    CASE トルス酒
        RETURNF "トルス酒"
    CASE サンロットの香木
        RETURNF "サンロットの香木"
    CASE フォルス酒
        RETURNF "フォルス酒"
    CASE ゴルンミスト発生器
        RETURNF "ゴルンミスト発生器"
    CASE ロック布
        RETURNF "ロック布"
    CASE ナナーシャ鳥
        RETURNF "ナナーシャ鳥"
    CASE エインズの実
        RETURNF "エインズの実"
    CASE ナイ・ゲーム機
        RETURNF "ナイ・ゲーム機"
    CASE パワードスーツ
        RETURNF "パワードスーツ"
    CASE レース機
        RETURNF "レース機"
    CASE 思考戦車
        RETURNF "思考戦車"
    CASE 異星生物育成キット
        RETURNF "異星生物育成キット"
    CASE セクサロイド
        RETURNF "セクサロイド"
    CASEELSE
        RETURNF NO_ITEM
ENDSELECT

@GET_RESOURCE_DESCRIPTION(ID)
#FUNCTIONS
#DIM ID

SELECTCASE ID
    CASE 赤原石
        RETURNF "武装の原料になる原石"
    CASE 青原石
        RETURNF "装甲の原料になる原石"
    CASE 貴金属鉱石
        RETURNF "精密機器の原料になる原石"
    CASE エウスガス
        RETURNF "シールドの原料になるガス"
    CASE ビクニーガス
        RETURNF "噴射剤の原料になるガス"
    CASE ゼスタガス
        RETURNF "加工剤の原料になるガス"
    CASE チェルニーオイル
        RETURNF "金属加工剤の原料になるオイル"
    CASE グリッドオイル
        RETURNF "特定の形に変形しようとする性質を持つオイル"
    CASE ジェルオイル
        RETURNF "高度精密機器を保護するのに使うオイル"
    CASE 武装合金
        RETURNF "武器の素材"
    CASE 装甲合金
        RETURNF "装甲の素材"
    CASE 重武装合金
        RETURNF "武器の素材"
    CASE 重装甲合金
        RETURNF "装甲の素材"
    CASE シールド発生装置
        RETURNF "シールドを発生させる装置"
    CASE 多重シールド発生装置
        RETURNF "シールドを多重展開させる装置"
    CASE 武装制御機器
        RETURNF "武装の制御に必要な機器"
    CASE 合金加工剤
        RETURNF "合金を加工するのに使う工業液"
    CASE 耐熱合金
        RETURNF "エンジンなどに使われる耐熱性を持った合金"
    CASE ジェットガス
        RETURNF "エンジンのジェット噴射に使うガス"
    CASE 超電導回路
        RETURNF "精密機器用の回路"
    CASE タイラーセンサー
        RETURNF "汎用的に扱われているセンサーの中核素材"
    CASE 宇宙たばこ
        RETURNF "煙も有害性もない不思議なたばこ"
    CASE オーネスワイン
        RETURNF "特定の星でとれる木の実から作られた風味の深いワイン"
    CASE トルス酒
        RETURNF "特定の星でとれる木の実から作られた深い味わいの酒"
    CASE サンロットの香木
        RETURNF "気分を落ち着かせる香りを放つ香木"
    CASE フォルス酒
        RETURNF "のど越しがよく、手っ取り早く酔える酒"
    CASE ゴルンミスト発生器
        RETURNF "気分を高揚させるミストを散布する装置"
    CASE ロック布
        RETURNF "富裕層に人気の布。肌触りがとにかくいい"
    CASE ナナーシャ鳥
        RETURNF "旨味の強い鳥"
    CASE エインズの実
        RETURNF "女性人気の高い甘い木の実。上品な甘さ"
    CASE ナイ・ゲーム機
        RETURNF "ロボットもはまる面白さのゲーム機"
    CASE パワードスーツ
        RETURNF "陸戦や地上の鉱物採掘時に使われるパワードスーツ"
    CASE レース機
        RETURNF "宇宙レースで使われるレース機。コレクターが多い"
    CASE 思考戦車
        RETURNF "自立思考AI搭載の戦車。喋り相手にもなる"
    CASE 異星生物育成キット
        RETURNF "スライムや触手を育てるための育成キット"
    CASE セクサロイド
        RETURNF "世の男達垂涎の美貌を持つセクサロイド。AIの思考レベルや性格も調整できる"
    CASEELSE
        RETURNF NO_ITEM
ENDSELECT

; SLG ITEM SHOP画面
@SLG_ITEM_SHOP(PORT_ID, IS_PORT)
#DIM PORT_ID
#DIM IS_PORT
#DIM ITEM_ID
#DIM ITEM_COUNT
#DIM SHIP_ID
#DIM SOLD_MONEY
#DIM BUY_COUNT
#DIM MAX_BUY
#DIM CAPACITY
#DIM OWNER
#DIM POSID

OWNER = IS_PORT == 1 ? PORT_OWNER:PORT_ID # STAR_OWNER:PORT_ID
POSID = IS_PORT == 1 ? PORT_POSITION_ID:PORT_ID # 星系座標ID:PORT_ID

$INPUT_LOOP
CAPACITY = GET_CAPACITY(CHARACTER_POSITION, PLAYER_COUNTRY)
PRINTL ◆アイテム取引
IF CAPACITY == 0
    SETCOLOR 0XFF0000
    PRINTL これ以上物資を追加購入できません(可能性: 輸送船を持っていない/輸送船のコンテナが一杯）
    RESETCOLOR
ENDIF
PRINTFORML      %"名前", 20, LEFT% %"価格", 9, RIGHT% 個数 説明
FOR ITEM_ID, 0, ITEM_LENGTH
    ITEM_COUNT = 0
    LOCALS = %GET_RESOURCE_NAME(ITEM_ID)%
    SIF LOCALS == NO_ITEM
        CONTINUE
    SIF GET_RESOURCE_NUM(POSID, OWNER, ITEM_ID) == 0 && GET_RESOURCE_NUM(POSID, PLAYER_COUNTRY, ITEM_ID) == 0
        CONTINUE
    FOR SHIP_ID, 0, MAX_SHIP
        SIF SHIP_COUNTRY:SHIP_ID != PLAYER_COUNTRY
            CONTINUE
        SIF SHIP_CATEGORY:SHIP_ID != 輸送船
            CONTINUE
        SIF SHIP_POSITION != POSID
            CONTINUE
        ITEM_COUNT += CARGO_CONTENTS:SHIP_ID:ITEM_ID
    NEXT
    LOCALS:1 = %TOSTR(GET_RESOURCE_PRICE(POSID, ITEM_ID), "$###,###,###")%
    PRINTBUTTON @"[{ITEM_ID, 3, RIGHT}] %LOCALS, 20, LEFT%  %LOCALS:1, 8, RIGHT% {ITEM_COUNT, 4, RIGHT} %GET_RESOURCE_DESCRIPTION(ITEM_ID)%", ITEM_ID
    PRINTL
NEXT
PRINTL [9999] 戻る
INPUT
SIF RESULT == 9999
    RETURN
SIF RESULT < 0 || RESULT >= ITEM_LENGTH
    RETURN
SIF NO_ITEM == GET_RESOURCE_NAME(RESULT)
    RETURN
ITEM_ID = RESULT
BUY_COUNT = 0
FOR SHIP_ID, 0, MAX_SHIP
    SIF SHIP_COUNTRY:SHIP_ID != PLAYER_COUNTRY
        CONTINUE
    SIF SHIP_CATEGORY:SHIP_ID != 輸送船
        CONTINUE
    SIF SHIP_POSITION != 星系座標ID:PORT_ID
        CONTINUE
    ITEM_COUNT += CARGO_CONTENTS:SHIP_ID:ITEM_ID
NEXT
$INPUT_LOOP2
PRINTL 購入はプラス、売却はマイナスに値を決定して決定を押してください
PRINTL
PRINTBUTTON "[<<<]", -100
PRINTBUTTON "[<<]", -10
PRINTBUTTON "[<]", -1
PRINTFORM {ITEM_COUNT + BUY_COUNT, 4, RIGHT}
PRINTBUTTON "[>]", 1
PRINTBUTTON "[>>]", 10
PRINTBUTTON "[>>>]", 100
PRINTL
DRAWLINE
PRINTFORML 売買数: {BUY_COUNT}
IF MONEY == 0
    PRINTL 所持金: $0
ELSE
    PRINTFORML 所持金: %TOSTR(MONEY - (BUY_COUNT * GET_RESOURCE_PRICE(POSID, ITEM_ID)), "$#,###,###,###,###")%
ENDIF
PRINTBUTTON "[999] 決定", 999
INPUT
SELECTCASE RESULT
    CASE -100 TO 100
        ; 売買数が所持数以下の場合
        BUY_COUNT += RESULT
        ; 自分が売れる数より販売数が多かった場合
        LOCAL =  GET_RESOURCE_NUM(POSID, PLAYER_COUNTRY, ITEM_ID)
        SIF BUY_COUNT < -1 * LOCAL
            BUY_COUNT = -1 * LOCAL
        ; 売られる側のキャパより販売数が多かった場合
        LOCAL = GET_CAPACITY(POSID, OWNER)
        SIF BUY_COUNT < -1 * LOCAL
            BUY_COUNT = -1 * LOCAL
        ; 自分が買えるキャパより多く買おうとした場合
        LOCAL = GET_CAPACITY(POSID, PLAYER_COUNTRY)
        SIF BUY_COUNT > LOCAL
            BUY_COUNT = LOCAL
        ; 店が売れる数よりも多く買おうとした場合
        LOCAL = GET_RESOURCE_NUM(POSID, OWNER, ITEM_ID)
        SIF BUY_COUNT > LOCAL
            BUY_COUNT = LOCAL
        ; 購入費が足りない場合
        SIF BUY_COUNT * GET_RESOURCE_PRICE(POSID, ITEM_ID) > MONEY
            BUY_COUNT = MONEY / GET_RESOURCE_PRICE(POSID, ITEM_ID)
        GOTO INPUT_LOOP2
    CASE 999
        SIF BUY_COUNT * GET_RESOURCE_PRICE(POSID, ITEM_ID) != 0
            PRINTFORMW 所持金: %TOSTR(MONEY, "$##,###,###,###")% -> %TOSTR(MONEY - (BUY_COUNT * GET_RESOURCE_PRICE(POSID, ITEM_ID)), "$##,###,###,###")%
        MONEY -= BUY_COUNT * GET_RESOURCE_PRICE(POSID, ITEM_ID)
        IF OWNER == PLAYER_COUNTRY
            MONEY += BUY_COUNT * GET_RESOURCE_PRICE(POSID, ITEM_ID)
        ELSE
            MONEY:OWNER += BUY_COUNT * GET_RESOURCE_PRICE(POSID, ITEM_ID)
        ENDIF
        IF BUY_COUNT > 0
            RESULT = ADD_RESOURCE(POSID, PLAYER_COUNTRY, ITEM_ID, BUY_COUNT)
            RESULT = REMOVE_RESOURCE(POSID, OWNER, ITEM_ID, BUY_COUNT)
        ELSE
            RESULT = ADD_RESOURCE(POSID, OWNER, ITEM_ID, BUY_COUNT * -1)
            RESULT = REMOVE_RESOURCE(POSID, PLAYER_COUNTRY, ITEM_ID, BUY_COUNT * -1)
        ENDIF
        GOTO INPUT_LOOP
    CASEELSE
        GOTO INPUT_LOOP2
ENDSELECT

; 自動売却
@AUTO_SALE(POSID, COUNTRY_ID, OWNER, ITEM_ID, NUM)
#DIM POSID
#DIM COUNTRY_ID
#DIM OWNER
#DIM ITEM_ID
#DIM NUM
#DIM SALE_PRICE
IF GET_CAPACITY(POSID, OWNER) >= NUM
    SALE_PRICE = GET_RESOURCE_PRICE(POSID, ITEM_ID)
    IF COUNTRY_ID == PLAYER_COUNTRY
        MONEY += SALE_PRICE
        MONEY:OWNER -= SALE_PRICE
    ELSEIF OWNER == PLAYER_COUNTRY
        MONEY:COUNTRY_ID += SALE_PRICE
        MONEY -= SALE_PRICE
    ELSE
        MONEY:COUNTRY_ID += SALE_PRICE
        MONEY:OWNER -= SALE_PRICE
    ENDIF
    LOCAL = ADD_RESOURCE(POSID, OWNER, ITEM_ID, NUM)
    LOCAL = REMOVE_RESOURCE(POSID, COUNTRY_ID, ITEM_ID, NUM)
    RETURN 1
ELSE
    RETURN 0
ENDIF

; 指定国の指定宙域の物資キャパシティを返却する
@GET_CAPACITY(POSID, COUNTRY_ID)
#FUNCTION
#DIM POSID
#DIM COUNTRY_ID
#DIM SHIP_ID
#DIM CAPACITY
#DIM ITEM_ID
#DIM STAR_ID
#DIM PORT_ID
#DIM SLOT_ID

CAPACITY = 0

FOR STAR_ID, 0, 星系数
    SIF COUNTRY_ID != STAR_OWNER:STAR_ID
        CONTINUE
    SIF 星系座標ID:STAR_ID != POSID
        CONTINUE
    FOR SLOT_ID, 0, STAR_PORT_SLOT_NUM
        SIF STAR_PORT_SLOT:STAR_ID:SLOT_ID != コンテナ
            CONTINUE
        CAPACITY += CONTAINER_CAPACITY
        FOR ITEM_ID, 0, ITEM_LENGTH
            CAPACITY -= STAR_PORT_CONTAINER:STAR_ID:SLOT_ID:ITEM_ID
        NEXT
    NEXT
NEXT
FOR PORT_ID, 0, MAX_PORT
    SIF COUNTRY_ID != PORT_OWNER:PORT_ID
        CONTINUE
    SIF PORT_POSITION_ID:PORT_ID != POSID
        CONTINUE
    FOR SLOT_ID, 0, STAR_PORT_SLOT_NUM
        SIF PORT_SLOT:PORT_ID:SLOT_ID != コンテナ
            CONTINUE
        CAPACITY += CONTAINER_CAPACITY
        FOR ITEM_ID, 0, ITEM_LENGTH
            CAPACITY -= PORT_CONTAINER:PORT_ID:SLOT_ID:ITEM_ID
        NEXT
    NEXT
NEXT

FOR SHIP_ID, 0, MAX_SHIP
    SIF SHIP_COUNTRY:SHIP_ID != COUNTRY_ID
        CONTINUE
    SIF SHIP_POSITION:SHIP_ID != POSID
        CONTINUE
    SIF SHIP_CATEGORY:SHIP_ID != 輸送船
        CONTINUE
    CAPACITY += CARGO_CAPACITY
    FOR ITEM_ID, 0, ITEM_LENGTH
        CAPACITY -= CARGO_CONTENTS:SHIP_ID:ITEM_ID
    NEXT
NEXT

RETURNF CAPACITY

@ADD_RESOURCE(POSID, COUNTRY_ID, ADD_ITEM_ID, NUM)
#FUNCTION
#DIM POSID
#DIM COUNTRY_ID
#DIM ADD_ITEM_ID
#DIM ITEM_ID
#DIM NUM
#DIM SHIP_ID
#DIM CAPACITY
#DIM STAR_ID
#DIM SLOT_ID
#DIM PORT_ID

FOR STAR_ID, 0, 星系数
    SIF COUNTRY_ID != STAR_OWNER:STAR_ID
        CONTINUE
    SIF POSID != 星系座標ID:STAR_ID
        CONTINUE
    FOR SLOT_ID, 0, STAR_PORT_SLOT_NUM
        SIF STAR_PORT_SLOT:STAR_ID:SLOT_ID != コンテナ
            CONTINUE
        CAPACITY = CONTAINER_CAPACITY
        FOR ITEM_ID, 0, ITEM_LENGTH
            CAPACITY -= STAR_PORT_CONTAINER:STAR_ID:SLOT_ID:ITEM_ID
        NEXT

        IF CAPACITY > NUM
            STAR_PORT_CONTAINER:STAR_ID:SLOT_ID:ADD_ITEM_ID += NUM
            RETURNF 1
        ELSE
            STAR_PORT_CONTAINER:STAR_ID:SLOT_ID:ADD_ITEM_ID += CAPACITY
            NUM -= CAPACITY
        ENDIF
    NEXT
NEXT

FOR PORT_ID, 0, MAX_PORT
    SIF COUNTRY_ID != PORT_OWNER:PORT_ID
        CONTINUE
    SIF POSID != PORT_POSITION_ID:PORT_ID
        CONTINUE
    FOR SLOT_ID, 0, STAR_PORT_SLOT_NUM
        SIF PORT_SLOT:PORT_ID:SLOT_ID != コンテナ
            CONTINUE
        CAPACITY = CONTAINER_CAPACITY
        FOR ITEM_ID, 0, ITEM_LENGTH
            CAPACITY -= PORT_CONTAINER:PORT_ID:SLOT_ID:ITEM_ID
        NEXT

        IF CAPACITY > NUM
            PORT_CONTAINER:PORT_ID:SLOT_ID:ADD_ITEM_ID += NUM
            RETURNF 1
        ELSE
            PORT_CONTAINER:STAR_ID:SLOT_ID:ADD_ITEM_ID += CAPACITY
            NUM -= CAPACITY
        ENDIF
    NEXT
NEXT

FOR SHIP_ID, 0, MAX_SHIP
    SIF SHIP_COUNTRY:SHIP_ID != COUNTRY_ID
        CONTINUE
    SIF SHIP_POSITION:SHIP_ID != POSID
        CONTINUE
    SIF SHIP_CATEGORY:SHIP_ID != 輸送船
        CONTINUE
    CAPACITY = CARGO_CAPACITY
    FOR ITEM_ID, 0, ITEM_LENGTH
        CAPACITY -= CARGO_CONTENTS:SHIP_ID:ITEM_ID
    NEXT

    IF CAPACITY > NUM
        CARGO_CONTENTS:SHIP_ID:ADD_ITEM_ID += NUM
        RETURNF 1
    ELSE
        CARGO_CONTENTS:SHIP_ID:ADD_ITEM_ID += CAPACITY
        NUM -= CAPACITY
    ENDIF
NEXT

SIF NUM > 0
    RETURNF 2
RETURNF 0

; リソース除去
; INT 不足分
@REMOVE_RESOURCE(POSID, COUNTRY_ID, REMOVE_ITEM_ID, NUM)
#FUNCTION
#DIM POSID
#DIM COUNTRY_ID
#DIM REMOVE_ITEM_ID
#DIM ITEM_ID
#DIM NUM
#DIM SHIP_ID
#DIM CAPACITY
#DIM STAR_ID
#DIM PORT_ID
#DIM SLOT_ID

FOR SHIP_ID, 0, MAX_SHIP
    SIF SHIP_COUNTRY:SHIP_ID != COUNTRY_ID
        CONTINUE
    SIF SHIP_POSITION:SHIP_ID != POSID
        CONTINUE
    SIF SHIP_CATEGORY:SHIP_ID != 輸送船
        CONTINUE
    IF CARGO_CONTENTS:SHIP_ID:REMOVE_ITEM_ID > NUM
        CARGO_CONTENTS:SHIP_ID:REMOVE_ITEM_ID -= NUM
        RETURNF 0
    ELSE
        NUM -= CARGO_CONTENTS:SHIP_ID:REMOVE_ITEM_ID
        CARGO_CONTENTS:SHIP_ID:REMOVE_ITEM_ID = 0
    ENDIF
NEXT

FOR STAR_ID, 0, 星系数
    SIF COUNTRY_ID != STAR_OWNER:STAR_ID
        CONTINUE
    SIF POSID != 星系座標ID:STAR_ID
        CONTINUE
    FOR SLOT_ID, 0, STAR_PORT_SLOT_NUM
        IF STAR_PORT_CONTAINER:STAR_ID:SLOT_ID:REMOVE_ITEM_ID >= NUM
            STAR_PORT_CONTAINER:STAR_ID:SLOT_ID:REMOVE_ITEM_ID -= NUM
            RETURNF 0
        ELSE
            NUM -= STAR_PORT_CONTAINER:STAR_ID:SLOT_ID:REMOVE_ITEM_ID
            STAR_PORT_CONTAINER:STAR_ID:SLOT_ID:REMOVE_ITEM_ID = 0
        ENDIF
    NEXT
NEXT

FOR PORT_ID, 0, MAX_PORT
    SIF COUNTRY_ID != PORT_OWNER:PORT_ID
        CONTINUE
    SIF POSID != PORT_POSITION_ID:PORT_ID
        CONTINUE
    FOR SLOT_ID, 0, STAR_PORT_SLOT_NUM
        IF PORT_CONTAINER:PORT_ID:SLOT_ID:REMOVE_ITEM_ID >= NUM
            PORT_CONTAINER:PORT_ID:SLOT_ID:REMOVE_ITEM_ID -= NUM
            RETURNF 0
        ELSE
            NUM -= PORT_CONTAINER:PORT_ID:SLOT_ID:REMOVE_ITEM_ID
            PORT_CONTAINER:PORT_ID:SLOT_ID:REMOVE_ITEM_ID = 0
        ENDIF
    NEXT
NEXT

RETURNF NUM

; リソースの数量取得関数
; 戻り値 INT リソースの数量
@GET_RESOURCE_NUM(POSID, COUNTRY_ID, ITEM_ID)
#FUNCTION
#DIM POSID
#DIM COUNTRY_ID
#DIM ITEM_ID
#DIM SHIP_ID
#DIM STAR_ID
#DIM SLOT_ID
#DIM PORT_ID
#DIM ITEM_COUNT

ITEM_COUNT = 0

FOR STAR_ID, 0, 星系数
    SIF COUNTRY_ID != STAR_OWNER:STAR_ID
        CONTINUE
    SIF POSID != 星系座標ID:STAR_ID
        CONTINUE
    FOR SLOT_ID, 0, STAR_PORT_SLOT_NUM
        ITEM_COUNT += STAR_PORT_CONTAINER:STAR_ID:SLOT_ID:ITEM_ID
    NEXT
NEXT

FOR PORT_ID, 0, MAX_PORT
    SIF COUNTRY_ID != PORT_OWNER:PORT_ID
        CONTINUE
    SIF POSID != PORT_POSITION_ID:PORT_ID
        CONTINUE
    FOR SLOT_ID, 0, STAR_PORT_SLOT_NUM
        ITEM_COUNT += PORT_CONTAINER:PORT_ID:SLOT_ID:ITEM_ID
    NEXT
NEXT

FOR SHIP_ID, 0, MAX_SHIP
    SIF SHIP_COUNTRY:SHIP_ID != COUNTRY_ID
        CONTINUE
    SIF SHIP_POSITION:SHIP_ID != POSID
        CONTINUE
    SIF SHIP_CATEGORY:SHIP_ID != 輸送船
        CONTINUE
    ITEM_COUNT += CARGO_CONTENTS:SHIP_ID:ITEM_ID
NEXT

RETURNF ITEM_COUNT

@GET_RESOURCE_NUM_FROM_CARGO_SHIP(POSID, COUNTRY_ID, ITEM_ID)
#FUNCTION
#DIM POSID
#DIM COUNTRY_ID
#DIM ITEM_ID
#DIM SHIP_ID

#DIM ITEM_COUNT

ITEM_COUNT = 0
FOR SHIP_ID, 0, MAX_SHIP
    SIF SHIP_COUNTRY:SHIP_ID != COUNTRY_ID
        CONTINUE
    SIF SHIP_POSITION:SHIP_ID != POSID
        CONTINUE
    SIF SHIP_CATEGORY:SHIP_ID != 輸送船
        CONTINUE
    ITEM_COUNT += CARGO_CONTENTS:SHIP_ID:ITEM_ID
NEXT
RETURNF ITEM_COUNT

@ADD_RESOURCE_TO_CARGO_SHIP(POSID, COUNTRY_ID, RESOURCE)
#DIM POSID
#DIM COUNTRY_ID
#DIM REF RESOURCE
#DIM SHIP_ID
#DIM ITEM_ID
#DIM CAPACITY
#DIM RESOURCE_ID

FOR RESOURCE_ID, 0, ITEM_LENGTH
    SIF RESOURCE:RESOURCE_ID == 0
        CONTINUE
    FOR SHIP_ID, 0, MAX_SHIP
        SIF SHIP_COUNTRY:SHIP_ID != COUNTRY_ID
            CONTINUE
        SIF SHIP_POSITION:SHIP_ID != POSID
            CONTINUE
        SIF SHIP_CATEGORY:SHIP_ID != 輸送船
            CONTINUE
        CAPACITY = CARGO_CAPACITY
        FOR ITEM_ID, 0, ITEM_LENGTH
            CAPACITY -= CARGO_CONTENTS:SHIP_ID:ITEM_ID
        NEXT

        IF CAPACITY > RESOURCE:RESOURCE_ID
            CARGO_CONTENTS:SHIP_ID:RESOURCE_ID += RESOURCE:RESOURCE_ID
        ELSE
            CARGO_CONTENTS:SHIP_ID:RESOURCE_ID += CAPACITY
            RESOURCE:RESOURCE_ID -= CAPACITY
        ENDIF
    NEXT
NEXT

@ADD_RESOURCE_TO_PORT_CONTAINER(POSID, COUNTRY_ID, RESOURCE)
#DIM POSID
#DIM COUNTRY_ID
#DIM REF RESOURCE
#DIM PORT_ID
#DIM ITEM_ID
#DIM SLOT_ID
#DIM CAPACITY
#DIM RESOURCE_ID

FOR RESOURCE_ID, 0, ITEM_LENGTH
    SIF RESOURCE:RESOURCE_ID == 0
        CONTINUE
    FOR PORT_ID, 0, MAX_PORT
        SIF PORT_OWNER:PORT_ID != COUNTRY_ID
            CONTINUE
        SIF PORT_POSITION_ID:PORT_ID != POSID
            CONTINUE
        FOR SLOT_ID, 0, STAR_PORT_SLOT_NUM
            CAPACITY = CONTAINER_CAPACITY
            FOR ITEM_ID, 0, ITEM_LENGTH
                CAPACITY -= PORT_CONTAINER:PORT_ID:SLOT_ID:ITEM_ID
            NEXT

            IF CAPACITY > RESOURCE:RESOURCE_ID
                PORT_CONTAINER:PORT_ID:SLOT_ID:RESOURCE_ID += RESOURCE:RESOURCE_ID
            ELSE
                PORT_CONTAINER:PORT_ID:SLOT_ID:RESOURCE_ID += CAPACITY
                RESOURCE:RESOURCE_ID -= CAPACITY
            ENDIF
        NEXT
    NEXT
NEXT

;リソースの現在の値段を返却
@GET_RESOURCE_PRICE(POSID, ITEM_ID)
#FUNCTION
#DIM PORT_ID
#DIM ITEM_ID
#DIM OWNER
#DIM STAR_ID
#DIM POSID
#DIM CURRENT_NUM
#DIM 倍率

FOR STAR_ID, 0, 星系数
    IF 星系座標ID:STAR_ID == POSID
        OWNER = STAR_OWNER:STAR_ID
        BREAK
    ENDIF
NEXT

FOR PORT_ID, 0, MAX_PORT
    IF PORT_POSITION_ID:PORT_ID == POSID
        OWNER = PORT_OWNER:PORT_ID
        BREAK
    ENDIF
NEXT

CURRENT_NUM = GET_RESOURCE_NUM(POSID, OWNER, ITEM_ID)
SIF CURRENT_NUM == 0
    CURRENT_NUM += 1
倍率 = LIMIT(100 * (STOCK_TARGET / CURRENT_NUM), 50, 200)

RETURNF ITEM_PRICE:ITEM_ID * 倍率 /100

;--------------------------
; 不足リソースの返却
;--------------------------
@GET_LACK_RESOURCE(POSID, COUNTRY_ID, NEED_RESOURCE)
#DIM POSID
#DIM COUNTRY_ID
#DIM REF NEED_RESOURCE
#DIM RESOURCE_ID
#DIM RESOURCE_NUM

FOR RESOURCE_ID, 0, 9
    RESOURCE_NUM = GET_RESOURCE_NUM(POSID, COUNTRY_ID, RESOURCE_ID)
    SIF STOCK_TARGET > RESOURCE_NUM
        NEED_RESOURCE:RESOURCE_ID = STOCK_TARGET - RESOURCE_NUM
NEXT

;--------------------------
; 最寄りの指定リソースの採掘ポイントを返却する
;--------------------------
@GET_NEAREST_MINING_POINT(CURRENT_SECTOR_ID, ITEM_ID)
#DIM CURRENT_SECTOR_ID
#DIM ITEM_ID
#DIM RADIUS
#DIM X_POS
#DIM Y_POS
#DIM SECTOR_X_POS
#DIM SECTOR_Y_POS

; 現在のセクターにリソースがあるか判定(非効率版)
SIF RESOURCE_POS_LIST:ITEM_ID:CURRENT_SECTOR_ID > -1
    RETURN RESOURCE_POS_LIST:ITEM_ID:CURRENT_SECTOR_ID

SECTOR_X_POS = CURRENT_SECTOR_ID / 10
SECTOR_Y_POS = CURRENT_SECTOR_ID % 10

FOR RADIUS, 1, MAX_SECTOR_X
    FOR X_POS, -1 * RADIUS + SECTOR_X_POS, RADIUS + SECTOR_X_POS
        FOR Y_POS, -1 * RADIUS + SECTOR_Y_POS, RADIUS + SECTOR_Y_POS
            SIF X_POS < 0
                CONTINUE
            SIF X_POS >= MAX_SECTOR_X
                CONTINUE
            SIF Y_POS < 0
                CONTINUE
            SIF Y_POS >= MAX_SECTOR_Y
                CONTINUE
            SIF RESOURCE_POS_LIST:ITEM_ID:(X_POS * 10 + Y_POS) > -1
                RETURN RESOURCE_POS_LIST:ITEM_ID:(X_POS * 10 + Y_POS)
        NEXT
    NEXT
NEXT


