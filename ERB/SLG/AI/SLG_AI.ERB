;--------------------------
; AI
;--------------------------
@SLG_AI
#DIM SECTOR_ID
#DIM POS_X
#DIM POS_Y
#DIM ITER

; 各国の挙動
FOR ITER, 1, MAX_COUNTRY
	SELECTCASE ITER
		CASE 1
			CALL SLG_AI_ACTION_1
		CASE 2
			CALL SLG_AI_ACTION_2
		CASE 3
			CALL SLG_AI_ACTION_3
		CASE 4
			CALL SLG_AI_ACTION_4
		CASE 5
			CALL SLG_AI_ACTION_5
		CASE 6
			CALL SLG_AI_ACTION_6
		CASE 10
			CALL SLG_AI_ACTION_10
		CASE 11
			CALL SLG_AI_ACTION_11
		CASE 12
			CALL SLG_AI_ACTION_12
	ENDSELECT
NEXT

CALL COMMON_AI_ACTION

; MAP走査だと無駄なので艦で走査
FOR ITER, 0, MAX_SHIP
	SIF SHIP_COUNTRY:ITER == 0
		CONTINUE
	CALL ID2POS(SHIP_POSITION:ITER)
	SECTOR_ID = RESULT:0
	POS_X = RESULT:1
	POS_Y = RESULT:2
	; チェック済みのエリアは弾く
	SIF CHECKED_MAP:SECTOR_ID:POS_X:POS_Y == 1
		CONTINUE
	CALL COMBAT(SHIP_POSITION:ITER)
	CHECKED_MAP:SECTOR_ID:POS_X:POS_Y = 1
NEXT
CALL RETIRE_BROKEN_SHIP

;--------------------------
; AI ACTION プレイヤー勢力
;--------------------------
@SLG_AI_ACTION_1
#DIM STAR_ID
#DIM SHIP_ID
#DIM ITER, 2
#DIM FOLLOWING_SHIPS, MAX_SHIP
#DIM CONST COUNTRY_ID = 1
#DIM SECTOR_ID
#DIM X_POS
#DIM Y_POS
#DIM ITEM_COUNT


;--------------------------
; AI ACTION 企業連合
;--------------------------
@SLG_AI_ACTION_3
#DIM CONST COUNTRY_ID = 3

;--------------------------
; AI ACTION 宗教国家
;--------------------------
@SLG_AI_ACTION_5
#DIM CONST COUNTRY_ID = 5

;--------------------------
; AI ACTION 機械文明
;--------------------------
@SLG_AI_ACTION_6
#DIM CONST COUNTRY_ID = 6

;--------------------------
; AI ACTION 海賊
;--------------------------
@SLG_AI_ACTION_10
#DIM SHIP_ID
#DIM CONST COUNTRY_ID = 10

;全艦上下左右1マス以内に襲える敵がいるか判定して、いた場合襲う
FOR SHIP_ID, 0, MAX_SHIP
	IF SHIP_COUNTRY:SHIP_ID == 10
		CALL ID2POS(SHIP_POSITION:SHIP_ID)
		CALL IS_PIRATE_ATTACK(RESULT:0, RESULT:1, RESULT:2 + 1)
		IF RESULT == 1
			CALL SHIP_MOVE_FOR(2, SHIP_ID)
			CONTINUE
		ENDIF
		CALL IS_PIRATE_ATTACK(RESULT:0, RESULT:1, RESULT:2 - 1)
		IF RESULT == 1
			CALL SHIP_MOVE_FOR(8, SHIP_ID)
			CONTINUE
		ENDIF
		CALL IS_PIRATE_ATTACK(RESULT:0, RESULT:1 + 1, RESULT:2)
		IF RESULT == 1
			CALL SHIP_MOVE_FOR(6, SHIP_ID)
			CONTINUE
		ENDIF
		CALL IS_PIRATE_ATTACK(RESULT:0, RESULT:1 - 1, RESULT:2)
		IF RESULT == 1
			CALL SHIP_MOVE_FOR(4, SHIP_ID)
			CONTINUE
		ENDIF
	ENDIF
NEXT

;--------------------------
; AI ACTION 豊秋津皇国
;--------------------------
@SLG_AI_ACTION_11
#DIM CONST COUNTRY_ID = 11

;--------------------------
; AI ACTION ハールバルズ王国
;--------------------------
@SLG_AI_ACTION_12
#DIM CONST COUNTRY_ID = 12

;--------------------------
; AIの共通処理
;--------------------------
@COMMON_AI_ACTION
#DIM COUNTRY_ID
#DIM ITER
#DIM STAR_ID
#DIM SHIP_ID, MAX_SHIP
#DIM NEW_SHIP_LIST, MAX_SHIP
#DIM SHIP_CATEGORY_ITER
#DIM CURRENT_SHIP_LIST, 星系数, MAX_SHIP
#DIM パトロール中, 星系数
#DIM DUMMY
#DIM ITEM_ID
#DIM ITEM_COUNT

VARSET パトロール中, 0
VARSET CURRENT_SHIP_LIST, 0
FOR SHIP_ID, 0, MAX_SHIP
	SIF SHIP_MISSION:SHIP_ID == 追従
		CONTINUE
	IF SHIP_MISSION:SHIP_ID == パトロール
		FOR STAR_ID, 0, 星系数
			SIF SHIP_PATROL:SHIP_ID !=星系座標ID:STAR_ID
				CONTINUE
			CALL PATROL(SHIP_ID)
			パトロール中:STAR_ID = 1
		NEXT
		CONTINUE
	ENDIF
	IF SHIP_MISSION:SHIP_ID == 移動
		CALL MOVE_SHIP(MOVING_POS:SHIP_ID, SHIP_ID)
		IF RESULT == 1
			SHIP_MISSION:SHIP_ID = 待機
			IF SHIP_COUNTRY:SHIP_ID == PLAYER_COUNTRY
				CALL ID2POS(MOVING_POS:SHIP_ID)
				SETCOLOR 0XFFFF00
				PRINTFORML [INFO] %SHIP_NAME:SHIP_MISSION%の移動任務完了(X: {RESULT:1}, Y: {RESULT:2})
				RESETCOLOR
			ENDIF
		ENDIF
	ELSEIF SHIP_MISSION:SHIP_ID == 採掘
		CALL MOVE_SHIP(MOVING_POS:SHIP_ID, SHIP_ID)
	ENDIF

	IF SHIP_CATEGORY:SHIP_ID == 駆逐艦 && SHIP_MISSION:SHIP_ID == 待機
		FOR STAR_ID, 0, 星系数
			SIF STAR_OWNER:STAR_ID != SHIP_COUNTRY:SHIP_ID
				CONTINUE
			SIF パトロール中:STAR_ID == 1
				CONTINUE
			IF 星系座標ID:STAR_ID == SHIP_POSITION:SHIP_ID
				SHIP_MISSION:SHIP_ID = パトロール
				SHIP_PATROL:SHIP_ID = 星系座標ID:STAR_ID
				CALL PATROL(SHIP_ID)
				パトロール中:STAR_ID = 1
			ENDIF
		NEXT
	ENDIF
NEXT

;追従任務に就いている艦の追従処理
FOR SHIP_ID, 0, MAX_SHIP
	SIF SHIP_MISSION:SHIP_ID != 追従
		CONTINUE
	CALL ID2POS(SHIP_POSITION:(SHIP_FOLLOW:SHIP_ID))
	CALL MOVE_SHIP(SHIP_POSITION:(SHIP_FOLLOW:SHIP_ID), SHIP_ID)
NEXT

; 採掘処理
FOR SHIP_ID, 0, MAX_SHIP
	SIF SHIP_MISSION:SHIP_ID == 交易
		CALL TRADE(SHIP_ID)
	SIF SHIP_MISSION:SHIP_ID != 採掘
		CONTINUE
	SIF SHIP_POSITION:SHIP_ID != MOVING_POS:SHIP_ID
		CONTINUE
	CALL ID2POS(SHIP_POSITION:SHIP_ID)
	IF MAP:RESULT:(RESULT:1):(RESULT:2) == 資源
		CALL MINING(MOVING_POS:SHIP_ID, SHIP_COUNTRY:SHIP_ID)
	ELSE
		FOR LOCAL, 0, 星系数
			IF 星系座標ID:LOCAL == MOVING_POS:SHIP_ID
				FOR LOCAL:1, 0, ITEM_LENGTH
					ITEM_COUNT = GET_RESOURCE_NUM_FROM_CARGO_SHIP(MOVING_POS:SHIP_ID, SHIP_COUNTRY:SHIP_ID, LOCAL:1)
					SIF ITEM_COUNT > 0
						CALL AUTO_SALE(MOVING_POS:SHIP_ID, SHIP_COUNTRY:SHIP_ID, STAR_OWNER:LOCAL, LOCAL:1, ITEM_COUNT)
				NEXT
			ENDIF
		NEXT
	ENDIF
	IF RESULT != 1
		LOCAL = MOVING_POS:SHIP_ID
		MOVING_POS:SHIP_ID = FROM_POS:SHIP_ID
		FROM_POS:SHIP_ID = LOCAL
	ENDIF
NEXT

; 星単位の処理
FOR STAR_ID, 0, 星系数
	; 加工品のリソースを見て必要量より不足していたら工場経由で補給を試みる
	COUNTRY_ID = STAR_OWNER:STAR_ID
	FOR ITEM_ID, 10, 22
		LOCAL = STOCK_TARGET - GET_RESOURCE_NUM(星系座標ID:STAR_ID, COUNTRY_ID, ITEM_ID)
		SIF LOCAL > 0
			CALL AUTO_PROCESSING(STAR_ID, COUNTRY_ID, ITEM_ID, LOCAL)
	NEXT
NEXT

CALL AI_AUTO_MINING(COUNTRY_ID)

;--------------------------
; 自拠点の周りにパトロール軍を出す
;--------------------------
@PATROL(SHIP_ID)
#DIM SHIP_ID
#DIM SECTOR_ID
#DIM CENTER_POS_X
#DIM CENTER_POS_Y
#DIM SHIP_POS_X
#DIM SHIP_POS_Y

CALL ID2POS(SHIP_PATROL:SHIP_ID)
SECTOR_ID = RESULT:0
CENTER_POS_X = RESULT:1
CENTER_POS_Y = RESULT:2

CALL ID2POS(SHIP_POSITION:SHIP_ID)
SHIP_POS_X = RESULT:1
SHIP_POS_Y = RESULT:2
IF CENTER_POS_X == SHIP_POS_X && CENTER_POS_Y == SHIP_POS_Y
	CALL POS2ID(SECTOR_ID, CENTER_POS_X, CENTER_POS_Y - 1)
	CALL MOVE2POS(RESULT, SHIP_ID)
ELSEIF CENTER_POS_X == SHIP_POS_X && CENTER_POS_Y - 1 == SHIP_POS_Y
	CALL POS2ID(SECTOR_ID, CENTER_POS_X + 1, CENTER_POS_Y - 1)
	CALL MOVE2POS(RESULT , SHIP_ID)
ELSEIF CENTER_POS_X + 1 == SHIP_POS_X && CENTER_POS_Y - 1 == SHIP_POS_Y
	CALL POS2ID(SECTOR_ID, CENTER_POS_X + 1, CENTER_POS_Y)
	CALL MOVE2POS(RESULT, SHIP_ID)
ELSEIF CENTER_POS_X + 1 == SHIP_POS_X && CENTER_POS_Y == SHIP_POS_Y
	CALL POS2ID(SECTOR_ID, CENTER_POS_X + 1, CENTER_POS_Y + 1)
	CALL MOVE2POS(RESULT, SHIP_ID)
ELSEIF CENTER_POS_X + 1 == SHIP_POS_X && CENTER_POS_Y + 1 == SHIP_POS_Y
	CALL POS2ID(SECTOR_ID, CENTER_POS_X, CENTER_POS_Y + 1)
	CALL MOVE2POS(RESULT, SHIP_ID)
ELSEIF CENTER_POS_X == SHIP_POS_X && CENTER_POS_Y + 1 == SHIP_POS_Y
	CALL POS2ID(SECTOR_ID, CENTER_POS_X - 1, CENTER_POS_Y + 1)
	CALL MOVE2POS(RESULT, SHIP_ID)
ELSEIF CENTER_POS_X - 1 == SHIP_POS_X && CENTER_POS_Y + 1 == SHIP_POS_Y
	CALL POS2ID(SECTOR_ID, CENTER_POS_X - 1, CENTER_POS_Y)
	CALL MOVE2POS(RESULT, SHIP_ID)
ELSEIF CENTER_POS_X - 1 == SHIP_POS_X && CENTER_POS_Y == SHIP_POS_Y
	CALL POS2ID(SECTOR_ID, CENTER_POS_X - 1, CENTER_POS_Y - 1)
	CALL MOVE2POS(RESULT, SHIP_ID)
ELSEIF CENTER_POS_X - 1 == SHIP_POS_X && CENTER_POS_Y - 1 == SHIP_POS_Y
	CALL POS2ID(SECTOR_ID, CENTER_POS_X, CENTER_POS_Y - 1)
	CALL MOVE2POS(RESULT, SHIP_ID)
ENDIF
;--------------------------
; 移動
;--------------------------
@MOVE2POS(POSID, SHIP_ID)
#DIM POSID
#DIM SECTOR_ID
#DIM POS_X
#DIM POS_Y
#DIM SHIP_ID
#DIM X_DIFF
#DIM Y_DIFF
CALL ID2POS(POSID)
SECTOR_ID = RESULT:0
POS_X = RESULT:1
POS_Y = RESULT:2

CALL ID2POS(SHIP_POSITION:SHIP_ID)
X_DIFF = RESULT:1
Y_DIFF = RESULT:2

ABS (X_DIFF - POS_X)
X_DIFF = RESULT

ABS (Y_DIFF - POS_Y)
Y_DIFF = RESULT

IF X_DIFF + Y_DIFF > 1
	THROW 移動可能距離を超えて移動しようとしました
ELSE
	CALL POS2ID(SECTOR_ID, POS_X, POS_Y)
	SHIP_POSITION:SHIP_ID = RESULT
ENDIF

;--------------------------
; 海賊の攻撃判定
;--------------------------
@IS_PIRATE_ATTACK(ARG:0, ARG:1, ARG:2)
#DIM 艦種
#DIM ITER

CALL POS2ID(ARG:0, ARG:1, ARG:2)
CALL GET_SHIP_LIST_FROM_POS(RESULT)
SIF SHIP_LIST_LENGTH == 0
	RETURN 0
; 敵に戦闘艦が含まれていなければ襲う
FOR ITER, 0, SHIP_LIST_LENGTH
	艦種 = SHIP_CATEGORY:(SHIP_LIST:ITER)
	IF 艦種 == フリゲート || 艦種 == コルベット || 艦種 == 駆逐艦 || 艦種 == 巡洋艦 || 艦種 == 戦艦 || 艦種 == 空母
		RETURN 0
		BREAK
	ENDIF
NEXT
RETURN 1

; 海賊の撤退
@ESCAPE_PIRATE
#DIM SHIP_ID
FOR SHIP_ID, 0, MAX_SHIP
	SIF SHIP_COUNTRY:SHIP_ID != 10
		CONTINUE
	CALL GET_SHIP_TOTAL_HP(SHIP_ID)
	SIF RESULT < SHIP_DAMAGE:SHIP_ID / 2 * 3
		SHIP_DAMAGE:SHIP_ID = RESULT
NEXT

;--------------------------
; 自動採掘
;--------------------------
@AI_AUTO_MINING(COUNTRY_ID)
#DIM COUNTRY_ID
#DIM PORT_ID
#DIM NEED_RESOURCE, ITEM_LENGTH
#DIM ITEM_ID
#DIM SHIP_ID
#DIM SECTOR_ID
#DIM X_POS
#DIM Y_POS
#DIM NEW_ID
#DIM 作業船ID
#DIM 輸送船ID
#DIM 採掘ポイント
#DIM DUMMY

VARSET NEED_RESOURCE, 0

; 不足している資源の取得
FOR PORT_ID, 0, 星系数
	SIF STAR_OWNER:PORT_ID != COUNTRY_ID
		CONTINUE
	CALL GET_LACK_RESOURCE(星系座標ID:PORT_ID, COUNTRY_ID, NEED_RESOURCE)

	; 採掘地点を探す
	FOR ITEM_ID, 0, 9
		; リソースが十分な時
		IF NEED_RESOURCE:ITEM_ID == 0
			; まだ採掘していたら自動採掘解除
			IF MINING_ID:PORT_ID:ITEM_ID != 0
				FOR SHIP_ID, 0, MAX_SHIP
					SIF MINING_POINT:SHIP_ID != MINING_ID:COUNTRY_ID:ITEM_ID
						CONTINUE
					MINING_POINT:SHIP_ID = -1
				NEXT
				MINING_ID:COUNTRY_ID:ITEM_ID = 0
			ENDIF
			CONTINUE
		ENDIF
		; リソース不足の時
		; 採掘中だったら
		IF MINING_ID:PORT_ID:ITEM_ID != 0
			CONTINUE
		; 採掘してなかったら
		ELSE
			CALL ID2POS(星系座標ID:PORT_ID)
			SECTOR_ID = RESULT:0
			; 最寄りの採掘ポイント取得
			CALL GET_NEAREST_MINING_POINT(SECTOR_ID, ITEM_ID)
			採掘ポイント = RESULT
			; ユニークなMINING_IDを取得
			WHILE 1 == 1 
				NEW_ID = (RAND:MAX_SHIP) + 1
				FINDELEMENT MINING_POINT, NEW_ID
				SIF RESULT == -1
					BREAK;
			WEND
			; 空いている輸送船と作業船を探索
			輸送船ID = -1
			作業船ID = -1
			FOR SHIP_ID, 0, MAX_SHIP
				SIF SHIP_COUNTRY:SHIP_ID != COUNTRY_ID
					CONTINUE
				IF SHIP_CATEGORY:SHIP_ID == 作業船 && MINING_POINT:SHIP_ID == -1
					作業船ID = SHIP_ID
					CONTINUE
				ELSEIF SHIP_CATEGORY:SHIP_ID == 輸送船 && MINING_POINT:SHIP_ID == -1
					輸送船ID = SHIP_ID
					CONTINUE
				ENDIF
			NEXT
			; 空いている輸送船がいない場合は、輸送船建造を試みる
			IF 輸送船ID == -1
				CALL BUILD_SHIP(星系座標ID:PORT_ID, COUNTRY_ID, COUNTRY_ID, 汎用輸送船, "汎用輸送船", DUMMY)
				CONTINUE
			ENDIF
			; 空いている作業船がいない場合は、作業船建造を試みる
			IF 作業船ID == -1
				CALL BUILD_SHIP(星系座標ID:PORT_ID, COUNTRY_ID, COUNTRY_ID, 汎用作業船, "汎用作業船", DUMMY)
				CONTINUE
			ENDIF
			; 両方とも揃っているなら、採掘タスクを割り振る
			SHIP_MISSION:作業船ID = 採掘
			MOVING_POS:作業船ID = 採掘ポイント
			FROM_POS:作業船ID = 星系座標ID:PORT_ID
			SHIP_MISSION:輸送船ID = 追従
			SHIP_FOLLOW:輸送船ID = 作業船ID
			MINING_ID:PORT_ID:ITEM_ID = NEW_ID
			MINING_POINT:作業船ID = NEW_ID
			MINING_POINT:輸送船ID = NEW_ID
		ENDIF
	NEXT
NEXT

