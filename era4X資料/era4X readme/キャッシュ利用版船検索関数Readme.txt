キャッシュ利用版船検索関数

◇やりたい事
船検索関数を複数回呼ぶ場合の処理を軽量化したい


◇備考
キャッシュを利用して軽量化を目指す都合上
キャッシュ生成時の状態を基本に確認していくのでセクターを跨いでの移動が挟まると判断が不正確になる可能性があります。
また「キャッシュ生成時点で存在していなかった船」は一切確認されません。

以前の艦船検索とは違い「セクターの近さ」が一番の条件となっています。



◇具体的な変更点

@SLG_TURN_END
処理の後端にSHIP_SECTOR_CACHEのVARSETを追加

SLG.ERH
非保存配列SHIP_SECTOR_CACHEを追加
(各セクターに居る船の数と船のIDをキャッシュする為の配列)


@SHIP_SECTOR_CACHED_NEAREST_SHIP_CHECK
キャッシュ済みの場合には「船のあるセクターとの距離」別にセクター番号と入っているセクター数を配列SECTOR_DISTANCE_ARRAYに収め、距離毎に処理していく関数です。
「1つのセクターに全ての艦艇が集結している」等の状況では効力を発揮できないと思われますが、各セクターに艦船が散らばっていたりする分にはより早く対象を見つけ得ると思われます。


@SHIP_SECTOR_CACHED_POS_DISTANCE_CHECK
キャッシュ機能を追加したPOS_DISTANCE_CHECKの改造関数です。第二引数に渡すのが船のIDに変わっています。

@SHIP_SECTOR_CACHE_CHECK
キャッシュの有無を確認する関数です。