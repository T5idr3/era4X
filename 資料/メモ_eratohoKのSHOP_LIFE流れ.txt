■メモ_eratohoKのSHOP_LIFE流れ

	2017/03/07
	変更した内容を含めて、把握しているおおまかな流れをまとめました。
	何か間違いがあったらすみません。

-------------------------------------------------
●SHOP_LIFE.ERB
-------------------------------------------------
	拠点（LIFE）のメイン処理がまとめられたファイル。

	Emueraではロード後とBEGIN SHOP実行後
	@SHOW_SHOPが呼ばれる
	　　　├─@EVENTBUY　入力値が0～99だった場合が呼ばれる（本来は購入処理）
	　　　└─@USERSHOP　入力値が100以上だった場合が呼ばれる

	この3つの関数の中で、拠点（LIFE）と戦略（SLG）に分岐している。

	SHOP_LIFE.ERBはその拠点部分で、構造はSHOP.ERBとだいたい同じになっている。

	@SHOW_SHOP_LIFE　@SHOW_SHOPから拠点フェイズのとき呼ばれる
	　　　├─@EVENTBUY_LIFE　@EVENTBUYから入力値が0～99だった場合呼ばれる
	　　　└─@USERSHOP_LIFE　@USERSHOPから入力値が100以上だった場合呼ばれる

	@USERSHOP_LIFEは更に、入力値によって以下に別れる。
	100～ リスト１　キャラリストあるいは２段組みキャラリストの上段
	1100～リスト２　２段組みキャラリストの下段

	@USERSHOP_LIFE
	　　　├─キャラリストを使用しない
	　　　└─キャラリストを使用する
	　　　　　　　├─@USERSHOP_LIFE_CHARA1
	　　　　　　　│　　入力値が100+CSV番号のとき-100をキャラ番号に変換して
	　　　　　　　│　　キャラリスト１入力処理を呼び
	　　　　　　　│　　キャラ番号外のエラー退避などの処理を行う
	　　　　　　　└─@USERSHOP_LIFE_CHARA2
	　　　　　　　　　　入力値が1100+CSV番号のとき-1100をキャラ番号に変換して
	　　　　　　　　　　キャラリスト２入力処理を呼び〃

	それぞれ、各メニューコマンドのファイルに配置された
	表示処理や入力処理を呼び出している。

	呼び出される側の関数は「SHOP_LIFE11_会いに行く.ERB」にまとめている。


-------------------------------------------------
●@SHOW_SHOP_LIFE
-------------------------------------------------
	各種リセットを行い、左右カラムを表示する。

	リセットするもの
		LOCAL変数
		メニューコマンドの選択可否判定
		キャラリストの表示順設定
		調教参加フラグ

	ここで行う処理は、FLAG:拠点フェイズ選択コマンドを元に
	左カラムにはメニューコマンド表示を
	右カラムには内容表示を一行ごとに交互に表示していくこと。

	実際の処理は各メニューコマンドのファイルに配置された表示処理
	@SHOP_LIFE_EVENTBUY_SHOW{FLAG:拠点フェイズ選択コマンド}に分解されている。
	ので、それを呼び出す。

	左カラムのメニューコマンド表示は自動化されている。
	正確には右カラムの改行関数（@COLUMN_RIGHT_PRINTL）に含められているので
	これを使用すれば右カラムの表示内容に絞って考えることができる。

	FLAG:拠点フェイズ選択コマンドがメニュー番号外のときや
	選択中のメニューが選択不可能になったときは右カラムは空白になる。


-------------------------------------------------
●@EVENTBUY_LIFE（0～99）……入力値の扱い内訳
-------------------------------------------------
	入力値0～99を受け取る。
	数字は以下のように割り振っている。

 　0～9番）右カラムのボタンに自由に使えるように（キャラリストの補佐ボタン）

 11～79番）メニュー番号
 　　　　　10の位をカテゴリ番号に、1～9をメニュー番号にすると
 　　　　　COMFのように自動的に読み込まれる。
 　　　　　ただし行数があふれた場合の処理はしていないので要確認。

 　　81番）固定行・休憩
 　　　　　80番台を独占していてもったいない。
 　　　　　とりあえずページ番号はわかりやすい90番代にしたが
 　　　　　90番台が不足するなら96～99は80番台に変更するとよさげ。

   91～番）固定行・設定系
 　　　　　91 設定・92 セーブ・93 ロード・94 QSAVE・95 QLOAD
 　　　　　96 右カラムリスト２前ページ・97 右カラムリスト２次ページ
 　　　　　98 右カラムリスト１前ページ・99 右カラムリスト１次ページ

	※なるべく1オリジンで設定したため、20番、30番、40番...等が空欄になっているが
		カテゴリの保存等に利用されたりするかもしれないので
		ボタンに使ったりは今のところしないようにしている。


-------------------------------------------------
●@USERSHOP_LIFE（100～）……入力値の扱い内訳
-------------------------------------------------
	入力値100～を受け取る。

	基本的にキャラリストから受け取った入力値を
	キャラ番号に変換して受け取る。

	そうしたくない場合は
	各メニューコマンドのファイルに判定用関数を配置すると
	入力値をそのまま受け取るように変わる。

	〇キャラリストを使用する場合

		※キャラ番号範囲外エラーの退避処理を通る。

		・CSV番号 + 100 をキャラリスト１のボタン番号とする。
			各メニューのリスト１入力処理関数
			@SHOP_LIFE_USERSHOP{メニュー番号}(NO_TO_CHARA(入力値-100))を呼ぶ。

		・CSV番号 + 1100 をキャラリスト２のボタン番号とする。
			各メニューのリスト２入力処理関数
			@SHOP_LIFE_USERSHOP{メニュー番号}(NO_TO_CHARA(入力値-1100))を呼ぶ。

		この100とか1100とかの値はSHOP_LIFE_VARIABLE.ERH↓で定数を宣言して使うようにした。
		#DIM CONST SHOP_LIFE_LIST1_ADD_INPUT = 100
		#DIM CONST SHOP_LIFE_LIST2_ADD_INPUT = 1100

	〇キャラリストを使用しない場合

		※キャラ番号範囲外エラーの退避処理を通らない。
			ボタン番号からキャラ番号を拾ったりする場合、
			キャラ番号外エラーの退避処理を作っておかないと
			手入力をしたとき（番号が見えないのでする人は少ないと思うが）エラーが出る。

		・入力値をそのまま受け取る
			各メニューのリスト１入力処理関数
			@SHOP_LIFE_USERSHOP{メニュー番号}(入力値)を呼ぶ。


